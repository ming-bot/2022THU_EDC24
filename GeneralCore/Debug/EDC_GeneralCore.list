
EDC_GeneralCore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ceb4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b0  0800d0a0  0800d0a0  0001d0a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da50  0800da50  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800da50  0800da50  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800da50  0800da50  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da50  0800da50  0001da50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da54  0800da54  0001da54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800da58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001410  20000088  0800dae0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001498  0800dae0  00021498  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c5a  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034b2  00000000  00000000  00034d0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  000381c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001238  00000000  00000000  00039528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b7d9  00000000  00000000  0003a760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000191a1  00000000  00000000  00055f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e339  00000000  00000000  0006f0da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010d413  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006120  00000000  00000000  0010d464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000088 	.word	0x20000088
 8000204:	00000000 	.word	0x00000000
 8000208:	0800d084 	.word	0x0800d084

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000008c 	.word	0x2000008c
 8000224:	0800d084 	.word	0x0800d084

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2f>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b2c:	bf24      	itt	cs
 8000b2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_d2f+0x30>
 8000b38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b4c:	bf08      	it	eq
 8000b4e:	f020 0001 	biceq.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b58:	d121      	bne.n	8000b9e <__aeabi_d2f+0x7a>
 8000b5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5e:	bfbc      	itt	lt
 8000b60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	4770      	bxlt	lr
 8000b66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6e:	f1c2 0218 	rsb	r2, r2, #24
 8000b72:	f1c2 0c20 	rsb	ip, r2, #32
 8000b76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	bf18      	it	ne
 8000b80:	f040 0001 	orrne.w	r0, r0, #1
 8000b84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b90:	ea40 000c 	orr.w	r0, r0, ip
 8000b94:	fa23 f302 	lsr.w	r3, r3, r2
 8000b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b9c:	e7cc      	b.n	8000b38 <__aeabi_d2f+0x14>
 8000b9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba2:	d107      	bne.n	8000bb4 <__aeabi_d2f+0x90>
 8000ba4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba8:	bf1e      	ittt	ne
 8000baa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb2:	4770      	bxne	lr
 8000bb4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_frsub>:
 8000bc4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bc8:	e002      	b.n	8000bd0 <__addsf3>
 8000bca:	bf00      	nop

08000bcc <__aeabi_fsub>:
 8000bcc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bd0 <__addsf3>:
 8000bd0:	0042      	lsls	r2, r0, #1
 8000bd2:	bf1f      	itttt	ne
 8000bd4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bd8:	ea92 0f03 	teqne	r2, r3
 8000bdc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be4:	d06a      	beq.n	8000cbc <__addsf3+0xec>
 8000be6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bee:	bfc1      	itttt	gt
 8000bf0:	18d2      	addgt	r2, r2, r3
 8000bf2:	4041      	eorgt	r1, r0
 8000bf4:	4048      	eorgt	r0, r1
 8000bf6:	4041      	eorgt	r1, r0
 8000bf8:	bfb8      	it	lt
 8000bfa:	425b      	neglt	r3, r3
 8000bfc:	2b19      	cmp	r3, #25
 8000bfe:	bf88      	it	hi
 8000c00:	4770      	bxhi	lr
 8000c02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4240      	negne	r0, r0
 8000c12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c1e:	bf18      	it	ne
 8000c20:	4249      	negne	r1, r1
 8000c22:	ea92 0f03 	teq	r2, r3
 8000c26:	d03f      	beq.n	8000ca8 <__addsf3+0xd8>
 8000c28:	f1a2 0201 	sub.w	r2, r2, #1
 8000c2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c30:	eb10 000c 	adds.w	r0, r0, ip
 8000c34:	f1c3 0320 	rsb	r3, r3, #32
 8000c38:	fa01 f103 	lsl.w	r1, r1, r3
 8000c3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__addsf3+0x78>
 8000c42:	4249      	negs	r1, r1
 8000c44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c4c:	d313      	bcc.n	8000c76 <__addsf3+0xa6>
 8000c4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c52:	d306      	bcc.n	8000c62 <__addsf3+0x92>
 8000c54:	0840      	lsrs	r0, r0, #1
 8000c56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c5a:	f102 0201 	add.w	r2, r2, #1
 8000c5e:	2afe      	cmp	r2, #254	; 0xfe
 8000c60:	d251      	bcs.n	8000d06 <__addsf3+0x136>
 8000c62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c6a:	bf08      	it	eq
 8000c6c:	f020 0001 	biceq.w	r0, r0, #1
 8000c70:	ea40 0003 	orr.w	r0, r0, r3
 8000c74:	4770      	bx	lr
 8000c76:	0049      	lsls	r1, r1, #1
 8000c78:	eb40 0000 	adc.w	r0, r0, r0
 8000c7c:	3a01      	subs	r2, #1
 8000c7e:	bf28      	it	cs
 8000c80:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c84:	d2ed      	bcs.n	8000c62 <__addsf3+0x92>
 8000c86:	fab0 fc80 	clz	ip, r0
 8000c8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c96:	bfaa      	itet	ge
 8000c98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c9c:	4252      	neglt	r2, r2
 8000c9e:	4318      	orrge	r0, r3
 8000ca0:	bfbc      	itt	lt
 8000ca2:	40d0      	lsrlt	r0, r2
 8000ca4:	4318      	orrlt	r0, r3
 8000ca6:	4770      	bx	lr
 8000ca8:	f092 0f00 	teq	r2, #0
 8000cac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cb0:	bf06      	itte	eq
 8000cb2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cb6:	3201      	addeq	r2, #1
 8000cb8:	3b01      	subne	r3, #1
 8000cba:	e7b5      	b.n	8000c28 <__addsf3+0x58>
 8000cbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc4:	bf18      	it	ne
 8000cc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cca:	d021      	beq.n	8000d10 <__addsf3+0x140>
 8000ccc:	ea92 0f03 	teq	r2, r3
 8000cd0:	d004      	beq.n	8000cdc <__addsf3+0x10c>
 8000cd2:	f092 0f00 	teq	r2, #0
 8000cd6:	bf08      	it	eq
 8000cd8:	4608      	moveq	r0, r1
 8000cda:	4770      	bx	lr
 8000cdc:	ea90 0f01 	teq	r0, r1
 8000ce0:	bf1c      	itt	ne
 8000ce2:	2000      	movne	r0, #0
 8000ce4:	4770      	bxne	lr
 8000ce6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cea:	d104      	bne.n	8000cf6 <__addsf3+0x126>
 8000cec:	0040      	lsls	r0, r0, #1
 8000cee:	bf28      	it	cs
 8000cf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cf4:	4770      	bx	lr
 8000cf6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cfa:	bf3c      	itt	cc
 8000cfc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bxcc	lr
 8000d02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	4770      	bx	lr
 8000d10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d14:	bf16      	itet	ne
 8000d16:	4608      	movne	r0, r1
 8000d18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d1c:	4601      	movne	r1, r0
 8000d1e:	0242      	lsls	r2, r0, #9
 8000d20:	bf06      	itte	eq
 8000d22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d26:	ea90 0f01 	teqeq	r0, r1
 8000d2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_ui2f>:
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e004      	b.n	8000d40 <__aeabi_i2f+0x8>
 8000d36:	bf00      	nop

08000d38 <__aeabi_i2f>:
 8000d38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d3c:	bf48      	it	mi
 8000d3e:	4240      	negmi	r0, r0
 8000d40:	ea5f 0c00 	movs.w	ip, r0
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	f04f 0000 	mov.w	r0, #0
 8000d52:	e01c      	b.n	8000d8e <__aeabi_l2f+0x2a>

08000d54 <__aeabi_ul2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e00a      	b.n	8000d78 <__aeabi_l2f+0x14>
 8000d62:	bf00      	nop

08000d64 <__aeabi_l2f>:
 8000d64:	ea50 0201 	orrs.w	r2, r0, r1
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d70:	d502      	bpl.n	8000d78 <__aeabi_l2f+0x14>
 8000d72:	4240      	negs	r0, r0
 8000d74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d78:	ea5f 0c01 	movs.w	ip, r1
 8000d7c:	bf02      	ittt	eq
 8000d7e:	4684      	moveq	ip, r0
 8000d80:	4601      	moveq	r1, r0
 8000d82:	2000      	moveq	r0, #0
 8000d84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d88:	bf08      	it	eq
 8000d8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d92:	fabc f28c 	clz	r2, ip
 8000d96:	3a08      	subs	r2, #8
 8000d98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d9c:	db10      	blt.n	8000dc0 <__aeabi_l2f+0x5c>
 8000d9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da2:	4463      	add	r3, ip
 8000da4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000db0:	fa20 f202 	lsr.w	r2, r0, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	f020 0001 	biceq.w	r0, r0, #1
 8000dbe:	4770      	bx	lr
 8000dc0:	f102 0220 	add.w	r2, r2, #32
 8000dc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc8:	f1c2 0220 	rsb	r2, r2, #32
 8000dcc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dd4:	eb43 0002 	adc.w	r0, r3, r2
 8000dd8:	bf08      	it	eq
 8000dda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dde:	4770      	bx	lr

08000de0 <__aeabi_fmul>:
 8000de0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000de4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000de8:	bf1e      	ittt	ne
 8000dea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dee:	ea92 0f0c 	teqne	r2, ip
 8000df2:	ea93 0f0c 	teqne	r3, ip
 8000df6:	d06f      	beq.n	8000ed8 <__aeabi_fmul+0xf8>
 8000df8:	441a      	add	r2, r3
 8000dfa:	ea80 0c01 	eor.w	ip, r0, r1
 8000dfe:	0240      	lsls	r0, r0, #9
 8000e00:	bf18      	it	ne
 8000e02:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e06:	d01e      	beq.n	8000e46 <__aeabi_fmul+0x66>
 8000e08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e0c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e10:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e14:	fba0 3101 	umull	r3, r1, r0, r1
 8000e18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e1c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e20:	bf3e      	ittt	cc
 8000e22:	0049      	lslcc	r1, r1, #1
 8000e24:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e28:	005b      	lslcc	r3, r3, #1
 8000e2a:	ea40 0001 	orr.w	r0, r0, r1
 8000e2e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e32:	2afd      	cmp	r2, #253	; 0xfd
 8000e34:	d81d      	bhi.n	8000e72 <__aeabi_fmul+0x92>
 8000e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e3e:	bf08      	it	eq
 8000e40:	f020 0001 	biceq.w	r0, r0, #1
 8000e44:	4770      	bx	lr
 8000e46:	f090 0f00 	teq	r0, #0
 8000e4a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e4e:	bf08      	it	eq
 8000e50:	0249      	lsleq	r1, r1, #9
 8000e52:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e56:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e5a:	3a7f      	subs	r2, #127	; 0x7f
 8000e5c:	bfc2      	ittt	gt
 8000e5e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e62:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e66:	4770      	bxgt	lr
 8000e68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	3a01      	subs	r2, #1
 8000e72:	dc5d      	bgt.n	8000f30 <__aeabi_fmul+0x150>
 8000e74:	f112 0f19 	cmn.w	r2, #25
 8000e78:	bfdc      	itt	le
 8000e7a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e7e:	4770      	bxle	lr
 8000e80:	f1c2 0200 	rsb	r2, r2, #0
 8000e84:	0041      	lsls	r1, r0, #1
 8000e86:	fa21 f102 	lsr.w	r1, r1, r2
 8000e8a:	f1c2 0220 	rsb	r2, r2, #32
 8000e8e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e92:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e96:	f140 0000 	adc.w	r0, r0, #0
 8000e9a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e9e:	bf08      	it	eq
 8000ea0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea4:	4770      	bx	lr
 8000ea6:	f092 0f00 	teq	r2, #0
 8000eaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0040      	lsleq	r0, r0, #1
 8000eb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eb6:	3a01      	subeq	r2, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fmul+0xce>
 8000eba:	ea40 000c 	orr.w	r0, r0, ip
 8000ebe:	f093 0f00 	teq	r3, #0
 8000ec2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	bf02      	ittt	eq
 8000ec8:	0049      	lsleq	r1, r1, #1
 8000eca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ece:	3b01      	subeq	r3, #1
 8000ed0:	d0f9      	beq.n	8000ec6 <__aeabi_fmul+0xe6>
 8000ed2:	ea41 010c 	orr.w	r1, r1, ip
 8000ed6:	e78f      	b.n	8000df8 <__aeabi_fmul+0x18>
 8000ed8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000edc:	ea92 0f0c 	teq	r2, ip
 8000ee0:	bf18      	it	ne
 8000ee2:	ea93 0f0c 	teqne	r3, ip
 8000ee6:	d00a      	beq.n	8000efe <__aeabi_fmul+0x11e>
 8000ee8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eec:	bf18      	it	ne
 8000eee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ef2:	d1d8      	bne.n	8000ea6 <__aeabi_fmul+0xc6>
 8000ef4:	ea80 0001 	eor.w	r0, r0, r1
 8000ef8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000efc:	4770      	bx	lr
 8000efe:	f090 0f00 	teq	r0, #0
 8000f02:	bf17      	itett	ne
 8000f04:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f08:	4608      	moveq	r0, r1
 8000f0a:	f091 0f00 	teqne	r1, #0
 8000f0e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f12:	d014      	beq.n	8000f3e <__aeabi_fmul+0x15e>
 8000f14:	ea92 0f0c 	teq	r2, ip
 8000f18:	d101      	bne.n	8000f1e <__aeabi_fmul+0x13e>
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	d10f      	bne.n	8000f3e <__aeabi_fmul+0x15e>
 8000f1e:	ea93 0f0c 	teq	r3, ip
 8000f22:	d103      	bne.n	8000f2c <__aeabi_fmul+0x14c>
 8000f24:	024b      	lsls	r3, r1, #9
 8000f26:	bf18      	it	ne
 8000f28:	4608      	movne	r0, r1
 8000f2a:	d108      	bne.n	8000f3e <__aeabi_fmul+0x15e>
 8000f2c:	ea80 0001 	eor.w	r0, r0, r1
 8000f30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3c:	4770      	bx	lr
 8000f3e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f42:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f46:	4770      	bx	lr

08000f48 <__aeabi_fdiv>:
 8000f48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f50:	bf1e      	ittt	ne
 8000f52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f56:	ea92 0f0c 	teqne	r2, ip
 8000f5a:	ea93 0f0c 	teqne	r3, ip
 8000f5e:	d069      	beq.n	8001034 <__aeabi_fdiv+0xec>
 8000f60:	eba2 0203 	sub.w	r2, r2, r3
 8000f64:	ea80 0c01 	eor.w	ip, r0, r1
 8000f68:	0249      	lsls	r1, r1, #9
 8000f6a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f6e:	d037      	beq.n	8000fe0 <__aeabi_fdiv+0x98>
 8000f70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f74:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f78:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f80:	428b      	cmp	r3, r1
 8000f82:	bf38      	it	cc
 8000f84:	005b      	lslcc	r3, r3, #1
 8000f86:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f8a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	bf24      	itt	cs
 8000f92:	1a5b      	subcs	r3, r3, r1
 8000f94:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f98:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f9c:	bf24      	itt	cs
 8000f9e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fa2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fa6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000faa:	bf24      	itt	cs
 8000fac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fb4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fb8:	bf24      	itt	cs
 8000fba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fbe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fc2:	011b      	lsls	r3, r3, #4
 8000fc4:	bf18      	it	ne
 8000fc6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fca:	d1e0      	bne.n	8000f8e <__aeabi_fdiv+0x46>
 8000fcc:	2afd      	cmp	r2, #253	; 0xfd
 8000fce:	f63f af50 	bhi.w	8000e72 <__aeabi_fmul+0x92>
 8000fd2:	428b      	cmp	r3, r1
 8000fd4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fd8:	bf08      	it	eq
 8000fda:	f020 0001 	biceq.w	r0, r0, #1
 8000fde:	4770      	bx	lr
 8000fe0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fe4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fe8:	327f      	adds	r2, #127	; 0x7f
 8000fea:	bfc2      	ittt	gt
 8000fec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ff0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ff4:	4770      	bxgt	lr
 8000ff6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	3a01      	subs	r2, #1
 8001000:	e737      	b.n	8000e72 <__aeabi_fmul+0x92>
 8001002:	f092 0f00 	teq	r2, #0
 8001006:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800100a:	bf02      	ittt	eq
 800100c:	0040      	lsleq	r0, r0, #1
 800100e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001012:	3a01      	subeq	r2, #1
 8001014:	d0f9      	beq.n	800100a <__aeabi_fdiv+0xc2>
 8001016:	ea40 000c 	orr.w	r0, r0, ip
 800101a:	f093 0f00 	teq	r3, #0
 800101e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001022:	bf02      	ittt	eq
 8001024:	0049      	lsleq	r1, r1, #1
 8001026:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800102a:	3b01      	subeq	r3, #1
 800102c:	d0f9      	beq.n	8001022 <__aeabi_fdiv+0xda>
 800102e:	ea41 010c 	orr.w	r1, r1, ip
 8001032:	e795      	b.n	8000f60 <__aeabi_fdiv+0x18>
 8001034:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001038:	ea92 0f0c 	teq	r2, ip
 800103c:	d108      	bne.n	8001050 <__aeabi_fdiv+0x108>
 800103e:	0242      	lsls	r2, r0, #9
 8001040:	f47f af7d 	bne.w	8000f3e <__aeabi_fmul+0x15e>
 8001044:	ea93 0f0c 	teq	r3, ip
 8001048:	f47f af70 	bne.w	8000f2c <__aeabi_fmul+0x14c>
 800104c:	4608      	mov	r0, r1
 800104e:	e776      	b.n	8000f3e <__aeabi_fmul+0x15e>
 8001050:	ea93 0f0c 	teq	r3, ip
 8001054:	d104      	bne.n	8001060 <__aeabi_fdiv+0x118>
 8001056:	024b      	lsls	r3, r1, #9
 8001058:	f43f af4c 	beq.w	8000ef4 <__aeabi_fmul+0x114>
 800105c:	4608      	mov	r0, r1
 800105e:	e76e      	b.n	8000f3e <__aeabi_fmul+0x15e>
 8001060:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001064:	bf18      	it	ne
 8001066:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800106a:	d1ca      	bne.n	8001002 <__aeabi_fdiv+0xba>
 800106c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001070:	f47f af5c 	bne.w	8000f2c <__aeabi_fmul+0x14c>
 8001074:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001078:	f47f af3c 	bne.w	8000ef4 <__aeabi_fmul+0x114>
 800107c:	e75f      	b.n	8000f3e <__aeabi_fmul+0x15e>
 800107e:	bf00      	nop

08001080 <__gesf2>:
 8001080:	f04f 3cff 	mov.w	ip, #4294967295
 8001084:	e006      	b.n	8001094 <__cmpsf2+0x4>
 8001086:	bf00      	nop

08001088 <__lesf2>:
 8001088:	f04f 0c01 	mov.w	ip, #1
 800108c:	e002      	b.n	8001094 <__cmpsf2+0x4>
 800108e:	bf00      	nop

08001090 <__cmpsf2>:
 8001090:	f04f 0c01 	mov.w	ip, #1
 8001094:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001098:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800109c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a4:	bf18      	it	ne
 80010a6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010aa:	d011      	beq.n	80010d0 <__cmpsf2+0x40>
 80010ac:	b001      	add	sp, #4
 80010ae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010b2:	bf18      	it	ne
 80010b4:	ea90 0f01 	teqne	r0, r1
 80010b8:	bf58      	it	pl
 80010ba:	ebb2 0003 	subspl.w	r0, r2, r3
 80010be:	bf88      	it	hi
 80010c0:	17c8      	asrhi	r0, r1, #31
 80010c2:	bf38      	it	cc
 80010c4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010c8:	bf18      	it	ne
 80010ca:	f040 0001 	orrne.w	r0, r0, #1
 80010ce:	4770      	bx	lr
 80010d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d4:	d102      	bne.n	80010dc <__cmpsf2+0x4c>
 80010d6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010da:	d105      	bne.n	80010e8 <__cmpsf2+0x58>
 80010dc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e0:	d1e4      	bne.n	80010ac <__cmpsf2+0x1c>
 80010e2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010e6:	d0e1      	beq.n	80010ac <__cmpsf2+0x1c>
 80010e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <__aeabi_cfrcmple>:
 80010f0:	4684      	mov	ip, r0
 80010f2:	4608      	mov	r0, r1
 80010f4:	4661      	mov	r1, ip
 80010f6:	e7ff      	b.n	80010f8 <__aeabi_cfcmpeq>

080010f8 <__aeabi_cfcmpeq>:
 80010f8:	b50f      	push	{r0, r1, r2, r3, lr}
 80010fa:	f7ff ffc9 	bl	8001090 <__cmpsf2>
 80010fe:	2800      	cmp	r0, #0
 8001100:	bf48      	it	mi
 8001102:	f110 0f00 	cmnmi.w	r0, #0
 8001106:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001108 <__aeabi_fcmpeq>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff fff4 	bl	80010f8 <__aeabi_cfcmpeq>
 8001110:	bf0c      	ite	eq
 8001112:	2001      	moveq	r0, #1
 8001114:	2000      	movne	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_fcmplt>:
 800111c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001120:	f7ff ffea 	bl	80010f8 <__aeabi_cfcmpeq>
 8001124:	bf34      	ite	cc
 8001126:	2001      	movcc	r0, #1
 8001128:	2000      	movcs	r0, #0
 800112a:	f85d fb08 	ldr.w	pc, [sp], #8
 800112e:	bf00      	nop

08001130 <__aeabi_fcmple>:
 8001130:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001134:	f7ff ffe0 	bl	80010f8 <__aeabi_cfcmpeq>
 8001138:	bf94      	ite	ls
 800113a:	2001      	movls	r0, #1
 800113c:	2000      	movhi	r0, #0
 800113e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001142:	bf00      	nop

08001144 <__aeabi_fcmpge>:
 8001144:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001148:	f7ff ffd2 	bl	80010f0 <__aeabi_cfrcmple>
 800114c:	bf94      	ite	ls
 800114e:	2001      	movls	r0, #1
 8001150:	2000      	movhi	r0, #0
 8001152:	f85d fb08 	ldr.w	pc, [sp], #8
 8001156:	bf00      	nop

08001158 <__aeabi_fcmpgt>:
 8001158:	f84d ed08 	str.w	lr, [sp, #-8]!
 800115c:	f7ff ffc8 	bl	80010f0 <__aeabi_cfrcmple>
 8001160:	bf34      	ite	cc
 8001162:	2001      	movcc	r0, #1
 8001164:	2000      	movcs	r0, #0
 8001166:	f85d fb08 	ldr.w	pc, [sp], #8
 800116a:	bf00      	nop

0800116c <__aeabi_f2iz>:
 800116c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001170:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001174:	d30f      	bcc.n	8001196 <__aeabi_f2iz+0x2a>
 8001176:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800117a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800117e:	d90d      	bls.n	800119c <__aeabi_f2iz+0x30>
 8001180:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001188:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800118c:	fa23 f002 	lsr.w	r0, r3, r2
 8001190:	bf18      	it	ne
 8001192:	4240      	negne	r0, r0
 8001194:	4770      	bx	lr
 8001196:	f04f 0000 	mov.w	r0, #0
 800119a:	4770      	bx	lr
 800119c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011a0:	d101      	bne.n	80011a6 <__aeabi_f2iz+0x3a>
 80011a2:	0242      	lsls	r2, r0, #9
 80011a4:	d105      	bne.n	80011b2 <__aeabi_f2iz+0x46>
 80011a6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011aa:	bf08      	it	eq
 80011ac:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011b0:	4770      	bx	lr
 80011b2:	f04f 0000 	mov.w	r0, #0
 80011b6:	4770      	bx	lr

080011b8 <__aeabi_f2uiz>:
 80011b8:	0042      	lsls	r2, r0, #1
 80011ba:	d20e      	bcs.n	80011da <__aeabi_f2uiz+0x22>
 80011bc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011c0:	d30b      	bcc.n	80011da <__aeabi_f2uiz+0x22>
 80011c2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011c6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ca:	d409      	bmi.n	80011e0 <__aeabi_f2uiz+0x28>
 80011cc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011d4:	fa23 f002 	lsr.w	r0, r3, r2
 80011d8:	4770      	bx	lr
 80011da:	f04f 0000 	mov.w	r0, #0
 80011de:	4770      	bx	lr
 80011e0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011e4:	d101      	bne.n	80011ea <__aeabi_f2uiz+0x32>
 80011e6:	0242      	lsls	r2, r0, #9
 80011e8:	d102      	bne.n	80011f0 <__aeabi_f2uiz+0x38>
 80011ea:	f04f 30ff 	mov.w	r0, #4294967295
 80011ee:	4770      	bx	lr
 80011f0:	f04f 0000 	mov.w	r0, #0
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop

080011f8 <chao_move_angle>:
extern Order_list orders;
extern XB_HandleTypeDef hxb;
extern uint8_t delivering_num;

//0 - 360 degree, 0 degree front, clockwise
void chao_move_angle(float _angle, float speed) {
 80011f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011fc:	b084      	sub	sp, #16
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	6039      	str	r1, [r7, #0]
	float angle_arc = (_angle / 180) * M_PI;
 8001204:	4984      	ldr	r1, [pc, #528]	; (8001418 <chao_move_angle+0x220>)
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff fe9e 	bl	8000f48 <__aeabi_fdiv>
 800120c:	4603      	mov	r3, r0
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f96e 	bl	80004f0 <__aeabi_f2d>
 8001214:	a37e      	add	r3, pc, #504	; (adr r3, 8001410 <chao_move_angle+0x218>)
 8001216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121a:	f7ff f9c1 	bl	80005a0 <__aeabi_dmul>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fc7d 	bl	8000b24 <__aeabi_d2f>
 800122a:	4603      	mov	r3, r0
 800122c:	60fb      	str	r3, [r7, #12]
	cmotor_lf.goalSpeed = speed * cos(angle_arc) + speed * sin(angle_arc);
 800122e:	6838      	ldr	r0, [r7, #0]
 8001230:	f7ff f95e 	bl	80004f0 <__aeabi_f2d>
 8001234:	4604      	mov	r4, r0
 8001236:	460d      	mov	r5, r1
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f7ff f959 	bl	80004f0 <__aeabi_f2d>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4610      	mov	r0, r2
 8001244:	4619      	mov	r1, r3
 8001246:	f00a feb9 	bl	800bfbc <cos>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4620      	mov	r0, r4
 8001250:	4629      	mov	r1, r5
 8001252:	f7ff f9a5 	bl	80005a0 <__aeabi_dmul>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4690      	mov	r8, r2
 800125c:	4699      	mov	r9, r3
 800125e:	6838      	ldr	r0, [r7, #0]
 8001260:	f7ff f946 	bl	80004f0 <__aeabi_f2d>
 8001264:	4604      	mov	r4, r0
 8001266:	460d      	mov	r5, r1
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	f7ff f941 	bl	80004f0 <__aeabi_f2d>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4610      	mov	r0, r2
 8001274:	4619      	mov	r1, r3
 8001276:	f00a feeb 	bl	800c050 <sin>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4620      	mov	r0, r4
 8001280:	4629      	mov	r1, r5
 8001282:	f7ff f98d 	bl	80005a0 <__aeabi_dmul>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4640      	mov	r0, r8
 800128c:	4649      	mov	r1, r9
 800128e:	f7fe ffd1 	bl	8000234 <__adddf3>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	f7ff fc43 	bl	8000b24 <__aeabi_d2f>
 800129e:	4603      	mov	r3, r0
 80012a0:	4a5e      	ldr	r2, [pc, #376]	; (800141c <chao_move_angle+0x224>)
 80012a2:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_rf.goalSpeed = speed * cos(angle_arc) - speed * sin(angle_arc);
 80012a4:	6838      	ldr	r0, [r7, #0]
 80012a6:	f7ff f923 	bl	80004f0 <__aeabi_f2d>
 80012aa:	4604      	mov	r4, r0
 80012ac:	460d      	mov	r5, r1
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	f7ff f91e 	bl	80004f0 <__aeabi_f2d>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	f00a fe7e 	bl	800bfbc <cos>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4620      	mov	r0, r4
 80012c6:	4629      	mov	r1, r5
 80012c8:	f7ff f96a 	bl	80005a0 <__aeabi_dmul>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4690      	mov	r8, r2
 80012d2:	4699      	mov	r9, r3
 80012d4:	6838      	ldr	r0, [r7, #0]
 80012d6:	f7ff f90b 	bl	80004f0 <__aeabi_f2d>
 80012da:	4604      	mov	r4, r0
 80012dc:	460d      	mov	r5, r1
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f7ff f906 	bl	80004f0 <__aeabi_f2d>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4610      	mov	r0, r2
 80012ea:	4619      	mov	r1, r3
 80012ec:	f00a feb0 	bl	800c050 <sin>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4620      	mov	r0, r4
 80012f6:	4629      	mov	r1, r5
 80012f8:	f7ff f952 	bl	80005a0 <__aeabi_dmul>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4640      	mov	r0, r8
 8001302:	4649      	mov	r1, r9
 8001304:	f7fe ff94 	bl	8000230 <__aeabi_dsub>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f7ff fc08 	bl	8000b24 <__aeabi_d2f>
 8001314:	4603      	mov	r3, r0
 8001316:	4a42      	ldr	r2, [pc, #264]	; (8001420 <chao_move_angle+0x228>)
 8001318:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_lb.goalSpeed = speed * cos(angle_arc) - speed * sin(angle_arc);
 800131a:	6838      	ldr	r0, [r7, #0]
 800131c:	f7ff f8e8 	bl	80004f0 <__aeabi_f2d>
 8001320:	4604      	mov	r4, r0
 8001322:	460d      	mov	r5, r1
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f7ff f8e3 	bl	80004f0 <__aeabi_f2d>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f00a fe43 	bl	800bfbc <cos>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4620      	mov	r0, r4
 800133c:	4629      	mov	r1, r5
 800133e:	f7ff f92f 	bl	80005a0 <__aeabi_dmul>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4690      	mov	r8, r2
 8001348:	4699      	mov	r9, r3
 800134a:	6838      	ldr	r0, [r7, #0]
 800134c:	f7ff f8d0 	bl	80004f0 <__aeabi_f2d>
 8001350:	4604      	mov	r4, r0
 8001352:	460d      	mov	r5, r1
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	f7ff f8cb 	bl	80004f0 <__aeabi_f2d>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4610      	mov	r0, r2
 8001360:	4619      	mov	r1, r3
 8001362:	f00a fe75 	bl	800c050 <sin>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4620      	mov	r0, r4
 800136c:	4629      	mov	r1, r5
 800136e:	f7ff f917 	bl	80005a0 <__aeabi_dmul>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4640      	mov	r0, r8
 8001378:	4649      	mov	r1, r9
 800137a:	f7fe ff59 	bl	8000230 <__aeabi_dsub>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	f7ff fbcd 	bl	8000b24 <__aeabi_d2f>
 800138a:	4603      	mov	r3, r0
 800138c:	4a25      	ldr	r2, [pc, #148]	; (8001424 <chao_move_angle+0x22c>)
 800138e:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_rb.goalSpeed = speed * cos(angle_arc) + speed * sin(angle_arc);
 8001390:	6838      	ldr	r0, [r7, #0]
 8001392:	f7ff f8ad 	bl	80004f0 <__aeabi_f2d>
 8001396:	4604      	mov	r4, r0
 8001398:	460d      	mov	r5, r1
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f7ff f8a8 	bl	80004f0 <__aeabi_f2d>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f00a fe08 	bl	800bfbc <cos>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4620      	mov	r0, r4
 80013b2:	4629      	mov	r1, r5
 80013b4:	f7ff f8f4 	bl	80005a0 <__aeabi_dmul>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4690      	mov	r8, r2
 80013be:	4699      	mov	r9, r3
 80013c0:	6838      	ldr	r0, [r7, #0]
 80013c2:	f7ff f895 	bl	80004f0 <__aeabi_f2d>
 80013c6:	4604      	mov	r4, r0
 80013c8:	460d      	mov	r5, r1
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f7ff f890 	bl	80004f0 <__aeabi_f2d>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4610      	mov	r0, r2
 80013d6:	4619      	mov	r1, r3
 80013d8:	f00a fe3a 	bl	800c050 <sin>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4620      	mov	r0, r4
 80013e2:	4629      	mov	r1, r5
 80013e4:	f7ff f8dc 	bl	80005a0 <__aeabi_dmul>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4640      	mov	r0, r8
 80013ee:	4649      	mov	r1, r9
 80013f0:	f7fe ff20 	bl	8000234 <__adddf3>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	f7ff fb92 	bl	8000b24 <__aeabi_d2f>
 8001400:	4603      	mov	r3, r0
 8001402:	4a09      	ldr	r2, [pc, #36]	; (8001428 <chao_move_angle+0x230>)
 8001404:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001410:	54442d18 	.word	0x54442d18
 8001414:	400921fb 	.word	0x400921fb
 8001418:	43340000 	.word	0x43340000
 800141c:	20000da8 	.word	0x20000da8
 8001420:	20000de4 	.word	0x20000de4
 8001424:	20000e20 	.word	0x20000e20
 8001428:	20000e5c 	.word	0x20000e5c
 800142c:	00000000 	.word	0x00000000

08001430 <move_angle_omega>:

void move_angle_omega(float _angle, float speed){
 8001430:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001434:	b084      	sub	sp, #16
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	6039      	str	r1, [r7, #0]
	float omega = _angle <= 180 ? _angle: (_angle - 360);
 800143c:	490f      	ldr	r1, [pc, #60]	; (800147c <move_angle_omega+0x4c>)
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff fe76 	bl	8001130 <__aeabi_fcmple>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <move_angle_omega+0x1e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	e004      	b.n	8001458 <move_angle_omega+0x28>
 800144e:	490c      	ldr	r1, [pc, #48]	; (8001480 <move_angle_omega+0x50>)
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff fbbb 	bl	8000bcc <__aeabi_fsub>
 8001456:	4603      	mov	r3, r0
 8001458:	60fb      	str	r3, [r7, #12]
	if(abs(omega) < 15)
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f7ff fe86 	bl	800116c <__aeabi_f2iz>
 8001460:	4603      	mov	r3, r0
 8001462:	f113 0f0e 	cmn.w	r3, #14
 8001466:	db0d      	blt.n	8001484 <move_angle_omega+0x54>
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f7ff fe7f 	bl	800116c <__aeabi_f2iz>
 800146e:	4603      	mov	r3, r0
 8001470:	2b0e      	cmp	r3, #14
 8001472:	dc07      	bgt.n	8001484 <move_angle_omega+0x54>
		omega = 0;
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	e013      	b.n	80014a4 <move_angle_omega+0x74>
 800147c:	43340000 	.word	0x43340000
 8001480:	43b40000 	.word	0x43b40000
	else
		omega = 0.3 * omega;
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f7ff f833 	bl	80004f0 <__aeabi_f2d>
 800148a:	a3c1      	add	r3, pc, #772	; (adr r3, 8001790 <move_angle_omega+0x360>)
 800148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001490:	f7ff f886 	bl	80005a0 <__aeabi_dmul>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
 800149c:	f7ff fb42 	bl	8000b24 <__aeabi_d2f>
 80014a0:	4603      	mov	r3, r0
 80014a2:	60fb      	str	r3, [r7, #12]
	float angle_arc = (_angle / 180) * M_PI;
 80014a4:	49c2      	ldr	r1, [pc, #776]	; (80017b0 <move_angle_omega+0x380>)
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fd4e 	bl	8000f48 <__aeabi_fdiv>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f81e 	bl	80004f0 <__aeabi_f2d>
 80014b4:	a3b8      	add	r3, pc, #736	; (adr r3, 8001798 <move_angle_omega+0x368>)
 80014b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ba:	f7ff f871 	bl	80005a0 <__aeabi_dmul>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4610      	mov	r0, r2
 80014c4:	4619      	mov	r1, r3
 80014c6:	f7ff fb2d 	bl	8000b24 <__aeabi_d2f>
 80014ca:	4603      	mov	r3, r0
 80014cc:	60bb      	str	r3, [r7, #8]
	if(omega * HALFLENGTH + 1.414 * speed > 3500)
 80014ce:	49b9      	ldr	r1, [pc, #740]	; (80017b4 <move_angle_omega+0x384>)
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f7ff fc85 	bl	8000de0 <__aeabi_fmul>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f809 	bl	80004f0 <__aeabi_f2d>
 80014de:	4604      	mov	r4, r0
 80014e0:	460d      	mov	r5, r1
 80014e2:	6838      	ldr	r0, [r7, #0]
 80014e4:	f7ff f804 	bl	80004f0 <__aeabi_f2d>
 80014e8:	a3ad      	add	r3, pc, #692	; (adr r3, 80017a0 <move_angle_omega+0x370>)
 80014ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ee:	f7ff f857 	bl	80005a0 <__aeabi_dmul>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4620      	mov	r0, r4
 80014f8:	4629      	mov	r1, r5
 80014fa:	f7fe fe9b 	bl	8000234 <__adddf3>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	a3a8      	add	r3, pc, #672	; (adr r3, 80017a8 <move_angle_omega+0x378>)
 8001508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150c:	f7ff fad8 	bl	8000ac0 <__aeabi_dcmpgt>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <move_angle_omega+0xea>
		speed = 2000;
 8001516:	4ba8      	ldr	r3, [pc, #672]	; (80017b8 <move_angle_omega+0x388>)
 8001518:	603b      	str	r3, [r7, #0]
	cmotor_lf.goalSpeed = speed * cos(angle_arc) + speed * sin(angle_arc) - omega * HALFLENGTH;
 800151a:	6838      	ldr	r0, [r7, #0]
 800151c:	f7fe ffe8 	bl	80004f0 <__aeabi_f2d>
 8001520:	4604      	mov	r4, r0
 8001522:	460d      	mov	r5, r1
 8001524:	68b8      	ldr	r0, [r7, #8]
 8001526:	f7fe ffe3 	bl	80004f0 <__aeabi_f2d>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4610      	mov	r0, r2
 8001530:	4619      	mov	r1, r3
 8001532:	f00a fd43 	bl	800bfbc <cos>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4620      	mov	r0, r4
 800153c:	4629      	mov	r1, r5
 800153e:	f7ff f82f 	bl	80005a0 <__aeabi_dmul>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4690      	mov	r8, r2
 8001548:	4699      	mov	r9, r3
 800154a:	6838      	ldr	r0, [r7, #0]
 800154c:	f7fe ffd0 	bl	80004f0 <__aeabi_f2d>
 8001550:	4604      	mov	r4, r0
 8001552:	460d      	mov	r5, r1
 8001554:	68b8      	ldr	r0, [r7, #8]
 8001556:	f7fe ffcb 	bl	80004f0 <__aeabi_f2d>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	f00a fd75 	bl	800c050 <sin>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4620      	mov	r0, r4
 800156c:	4629      	mov	r1, r5
 800156e:	f7ff f817 	bl	80005a0 <__aeabi_dmul>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4640      	mov	r0, r8
 8001578:	4649      	mov	r1, r9
 800157a:	f7fe fe5b 	bl	8000234 <__adddf3>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4614      	mov	r4, r2
 8001584:	461d      	mov	r5, r3
 8001586:	498b      	ldr	r1, [pc, #556]	; (80017b4 <move_angle_omega+0x384>)
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f7ff fc29 	bl	8000de0 <__aeabi_fmul>
 800158e:	4603      	mov	r3, r0
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe ffad 	bl	80004f0 <__aeabi_f2d>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4620      	mov	r0, r4
 800159c:	4629      	mov	r1, r5
 800159e:	f7fe fe47 	bl	8000230 <__aeabi_dsub>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f7ff fabb 	bl	8000b24 <__aeabi_d2f>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4a82      	ldr	r2, [pc, #520]	; (80017bc <move_angle_omega+0x38c>)
 80015b2:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_rf.goalSpeed = speed * cos(angle_arc) - speed * sin(angle_arc) + omega * HALFLENGTH;
 80015b4:	6838      	ldr	r0, [r7, #0]
 80015b6:	f7fe ff9b 	bl	80004f0 <__aeabi_f2d>
 80015ba:	4604      	mov	r4, r0
 80015bc:	460d      	mov	r5, r1
 80015be:	68b8      	ldr	r0, [r7, #8]
 80015c0:	f7fe ff96 	bl	80004f0 <__aeabi_f2d>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	f00a fcf6 	bl	800bfbc <cos>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4620      	mov	r0, r4
 80015d6:	4629      	mov	r1, r5
 80015d8:	f7fe ffe2 	bl	80005a0 <__aeabi_dmul>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4690      	mov	r8, r2
 80015e2:	4699      	mov	r9, r3
 80015e4:	6838      	ldr	r0, [r7, #0]
 80015e6:	f7fe ff83 	bl	80004f0 <__aeabi_f2d>
 80015ea:	4604      	mov	r4, r0
 80015ec:	460d      	mov	r5, r1
 80015ee:	68b8      	ldr	r0, [r7, #8]
 80015f0:	f7fe ff7e 	bl	80004f0 <__aeabi_f2d>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f00a fd28 	bl	800c050 <sin>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4620      	mov	r0, r4
 8001606:	4629      	mov	r1, r5
 8001608:	f7fe ffca 	bl	80005a0 <__aeabi_dmul>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4640      	mov	r0, r8
 8001612:	4649      	mov	r1, r9
 8001614:	f7fe fe0c 	bl	8000230 <__aeabi_dsub>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4614      	mov	r4, r2
 800161e:	461d      	mov	r5, r3
 8001620:	4964      	ldr	r1, [pc, #400]	; (80017b4 <move_angle_omega+0x384>)
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f7ff fbdc 	bl	8000de0 <__aeabi_fmul>
 8001628:	4603      	mov	r3, r0
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ff60 	bl	80004f0 <__aeabi_f2d>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4620      	mov	r0, r4
 8001636:	4629      	mov	r1, r5
 8001638:	f7fe fdfc 	bl	8000234 <__adddf3>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	f7ff fa6e 	bl	8000b24 <__aeabi_d2f>
 8001648:	4603      	mov	r3, r0
 800164a:	4a5d      	ldr	r2, [pc, #372]	; (80017c0 <move_angle_omega+0x390>)
 800164c:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_lb.goalSpeed = speed * cos(angle_arc) - speed * sin(angle_arc) - omega * HALFLENGTH;
 800164e:	6838      	ldr	r0, [r7, #0]
 8001650:	f7fe ff4e 	bl	80004f0 <__aeabi_f2d>
 8001654:	4604      	mov	r4, r0
 8001656:	460d      	mov	r5, r1
 8001658:	68b8      	ldr	r0, [r7, #8]
 800165a:	f7fe ff49 	bl	80004f0 <__aeabi_f2d>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	f00a fca9 	bl	800bfbc <cos>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4620      	mov	r0, r4
 8001670:	4629      	mov	r1, r5
 8001672:	f7fe ff95 	bl	80005a0 <__aeabi_dmul>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4690      	mov	r8, r2
 800167c:	4699      	mov	r9, r3
 800167e:	6838      	ldr	r0, [r7, #0]
 8001680:	f7fe ff36 	bl	80004f0 <__aeabi_f2d>
 8001684:	4604      	mov	r4, r0
 8001686:	460d      	mov	r5, r1
 8001688:	68b8      	ldr	r0, [r7, #8]
 800168a:	f7fe ff31 	bl	80004f0 <__aeabi_f2d>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	f00a fcdb 	bl	800c050 <sin>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4620      	mov	r0, r4
 80016a0:	4629      	mov	r1, r5
 80016a2:	f7fe ff7d 	bl	80005a0 <__aeabi_dmul>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4640      	mov	r0, r8
 80016ac:	4649      	mov	r1, r9
 80016ae:	f7fe fdbf 	bl	8000230 <__aeabi_dsub>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4614      	mov	r4, r2
 80016b8:	461d      	mov	r5, r3
 80016ba:	493e      	ldr	r1, [pc, #248]	; (80017b4 <move_angle_omega+0x384>)
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f7ff fb8f 	bl	8000de0 <__aeabi_fmul>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe ff13 	bl	80004f0 <__aeabi_f2d>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4620      	mov	r0, r4
 80016d0:	4629      	mov	r1, r5
 80016d2:	f7fe fdad 	bl	8000230 <__aeabi_dsub>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f7ff fa21 	bl	8000b24 <__aeabi_d2f>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4a37      	ldr	r2, [pc, #220]	; (80017c4 <move_angle_omega+0x394>)
 80016e6:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_rb.goalSpeed = speed * cos(angle_arc) + speed * sin(angle_arc) + omega * HALFLENGTH;
 80016e8:	6838      	ldr	r0, [r7, #0]
 80016ea:	f7fe ff01 	bl	80004f0 <__aeabi_f2d>
 80016ee:	4604      	mov	r4, r0
 80016f0:	460d      	mov	r5, r1
 80016f2:	68b8      	ldr	r0, [r7, #8]
 80016f4:	f7fe fefc 	bl	80004f0 <__aeabi_f2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f00a fc5c 	bl	800bfbc <cos>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4620      	mov	r0, r4
 800170a:	4629      	mov	r1, r5
 800170c:	f7fe ff48 	bl	80005a0 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4690      	mov	r8, r2
 8001716:	4699      	mov	r9, r3
 8001718:	6838      	ldr	r0, [r7, #0]
 800171a:	f7fe fee9 	bl	80004f0 <__aeabi_f2d>
 800171e:	4604      	mov	r4, r0
 8001720:	460d      	mov	r5, r1
 8001722:	68b8      	ldr	r0, [r7, #8]
 8001724:	f7fe fee4 	bl	80004f0 <__aeabi_f2d>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	f00a fc8e 	bl	800c050 <sin>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4620      	mov	r0, r4
 800173a:	4629      	mov	r1, r5
 800173c:	f7fe ff30 	bl	80005a0 <__aeabi_dmul>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4640      	mov	r0, r8
 8001746:	4649      	mov	r1, r9
 8001748:	f7fe fd74 	bl	8000234 <__adddf3>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4614      	mov	r4, r2
 8001752:	461d      	mov	r5, r3
 8001754:	4917      	ldr	r1, [pc, #92]	; (80017b4 <move_angle_omega+0x384>)
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f7ff fb42 	bl	8000de0 <__aeabi_fmul>
 800175c:	4603      	mov	r3, r0
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fec6 	bl	80004f0 <__aeabi_f2d>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4620      	mov	r0, r4
 800176a:	4629      	mov	r1, r5
 800176c:	f7fe fd62 	bl	8000234 <__adddf3>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4610      	mov	r0, r2
 8001776:	4619      	mov	r1, r3
 8001778:	f7ff f9d4 	bl	8000b24 <__aeabi_d2f>
 800177c:	4603      	mov	r3, r0
 800177e:	4a12      	ldr	r2, [pc, #72]	; (80017c8 <move_angle_omega+0x398>)
 8001780:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800178c:	f3af 8000 	nop.w
 8001790:	33333333 	.word	0x33333333
 8001794:	3fd33333 	.word	0x3fd33333
 8001798:	54442d18 	.word	0x54442d18
 800179c:	400921fb 	.word	0x400921fb
 80017a0:	76c8b439 	.word	0x76c8b439
 80017a4:	3ff69fbe 	.word	0x3ff69fbe
 80017a8:	00000000 	.word	0x00000000
 80017ac:	40ab5800 	.word	0x40ab5800
 80017b0:	43340000 	.word	0x43340000
 80017b4:	41600000 	.word	0x41600000
 80017b8:	44fa0000 	.word	0x44fa0000
 80017bc:	20000da8 	.word	0x20000da8
 80017c0:	20000de4 	.word	0x20000de4
 80017c4:	20000e20 	.word	0x20000e20
 80017c8:	20000e5c 	.word	0x20000e5c

080017cc <move_random>:

void move_random(void){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
	uint8_t isInBarrier = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	71fb      	strb	r3, [r7, #7]
	if((myCoord.x >=38 && myCoord.x<=40) && ((myCoord.y >=38 && myCoord.y<=107)||(myCoord.y >=147 && myCoord.y<=216)))
 80017d6:	4b9b      	ldr	r3, [pc, #620]	; (8001a44 <move_random+0x278>)
 80017d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017dc:	2b25      	cmp	r3, #37	; 0x25
 80017de:	dd1b      	ble.n	8001818 <move_random+0x4c>
 80017e0:	4b98      	ldr	r3, [pc, #608]	; (8001a44 <move_random+0x278>)
 80017e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e6:	2b28      	cmp	r3, #40	; 0x28
 80017e8:	dc16      	bgt.n	8001818 <move_random+0x4c>
 80017ea:	4b96      	ldr	r3, [pc, #600]	; (8001a44 <move_random+0x278>)
 80017ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017f0:	2b25      	cmp	r3, #37	; 0x25
 80017f2:	dd04      	ble.n	80017fe <move_random+0x32>
 80017f4:	4b93      	ldr	r3, [pc, #588]	; (8001a44 <move_random+0x278>)
 80017f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017fa:	2b6b      	cmp	r3, #107	; 0x6b
 80017fc:	dd09      	ble.n	8001812 <move_random+0x46>
 80017fe:	4b91      	ldr	r3, [pc, #580]	; (8001a44 <move_random+0x278>)
 8001800:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001804:	2b92      	cmp	r3, #146	; 0x92
 8001806:	dd07      	ble.n	8001818 <move_random+0x4c>
 8001808:	4b8e      	ldr	r3, [pc, #568]	; (8001a44 <move_random+0x278>)
 800180a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800180e:	2bd8      	cmp	r3, #216	; 0xd8
 8001810:	dc02      	bgt.n	8001818 <move_random+0x4c>
		isInBarrier = 1;//左侧俩墙
 8001812:	2301      	movs	r3, #1
 8001814:	71fb      	strb	r3, [r7, #7]
 8001816:	e098      	b.n	800194a <move_random+0x17e>
	else if((myCoord.x >=214 && myCoord.x<=216) && ((myCoord.y >=38 && myCoord.y<=107)||(myCoord.y >=147 && myCoord.y<=216)))
 8001818:	4b8a      	ldr	r3, [pc, #552]	; (8001a44 <move_random+0x278>)
 800181a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800181e:	2bd5      	cmp	r3, #213	; 0xd5
 8001820:	dd1b      	ble.n	800185a <move_random+0x8e>
 8001822:	4b88      	ldr	r3, [pc, #544]	; (8001a44 <move_random+0x278>)
 8001824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001828:	2bd8      	cmp	r3, #216	; 0xd8
 800182a:	dc16      	bgt.n	800185a <move_random+0x8e>
 800182c:	4b85      	ldr	r3, [pc, #532]	; (8001a44 <move_random+0x278>)
 800182e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001832:	2b25      	cmp	r3, #37	; 0x25
 8001834:	dd04      	ble.n	8001840 <move_random+0x74>
 8001836:	4b83      	ldr	r3, [pc, #524]	; (8001a44 <move_random+0x278>)
 8001838:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800183c:	2b6b      	cmp	r3, #107	; 0x6b
 800183e:	dd09      	ble.n	8001854 <move_random+0x88>
 8001840:	4b80      	ldr	r3, [pc, #512]	; (8001a44 <move_random+0x278>)
 8001842:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001846:	2b92      	cmp	r3, #146	; 0x92
 8001848:	dd07      	ble.n	800185a <move_random+0x8e>
 800184a:	4b7e      	ldr	r3, [pc, #504]	; (8001a44 <move_random+0x278>)
 800184c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001850:	2bd8      	cmp	r3, #216	; 0xd8
 8001852:	dc02      	bgt.n	800185a <move_random+0x8e>
		isInBarrier = 3;//右侧俩墙
 8001854:	2303      	movs	r3, #3
 8001856:	71fb      	strb	r3, [r7, #7]
 8001858:	e077      	b.n	800194a <move_random+0x17e>
	else if((myCoord.y >=38 && myCoord.y<=40) && ((myCoord.x >=38 && myCoord.x<=107)||(myCoord.x >=147 && myCoord.x<=216)))
 800185a:	4b7a      	ldr	r3, [pc, #488]	; (8001a44 <move_random+0x278>)
 800185c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001860:	2b25      	cmp	r3, #37	; 0x25
 8001862:	dd1b      	ble.n	800189c <move_random+0xd0>
 8001864:	4b77      	ldr	r3, [pc, #476]	; (8001a44 <move_random+0x278>)
 8001866:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800186a:	2b28      	cmp	r3, #40	; 0x28
 800186c:	dc16      	bgt.n	800189c <move_random+0xd0>
 800186e:	4b75      	ldr	r3, [pc, #468]	; (8001a44 <move_random+0x278>)
 8001870:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001874:	2b25      	cmp	r3, #37	; 0x25
 8001876:	dd04      	ble.n	8001882 <move_random+0xb6>
 8001878:	4b72      	ldr	r3, [pc, #456]	; (8001a44 <move_random+0x278>)
 800187a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187e:	2b6b      	cmp	r3, #107	; 0x6b
 8001880:	dd09      	ble.n	8001896 <move_random+0xca>
 8001882:	4b70      	ldr	r3, [pc, #448]	; (8001a44 <move_random+0x278>)
 8001884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001888:	2b92      	cmp	r3, #146	; 0x92
 800188a:	dd07      	ble.n	800189c <move_random+0xd0>
 800188c:	4b6d      	ldr	r3, [pc, #436]	; (8001a44 <move_random+0x278>)
 800188e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001892:	2bd8      	cmp	r3, #216	; 0xd8
 8001894:	dc02      	bgt.n	800189c <move_random+0xd0>
		isInBarrier = 2;//上面俩墙
 8001896:	2302      	movs	r3, #2
 8001898:	71fb      	strb	r3, [r7, #7]
 800189a:	e056      	b.n	800194a <move_random+0x17e>
	else if((myCoord.y >=214 && myCoord.y<=216) && ((myCoord.x >=38 && myCoord.x<=107)||(myCoord.x >=147 && myCoord.x<=216)))
 800189c:	4b69      	ldr	r3, [pc, #420]	; (8001a44 <move_random+0x278>)
 800189e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018a2:	2bd5      	cmp	r3, #213	; 0xd5
 80018a4:	dd1b      	ble.n	80018de <move_random+0x112>
 80018a6:	4b67      	ldr	r3, [pc, #412]	; (8001a44 <move_random+0x278>)
 80018a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018ac:	2bd8      	cmp	r3, #216	; 0xd8
 80018ae:	dc16      	bgt.n	80018de <move_random+0x112>
 80018b0:	4b64      	ldr	r3, [pc, #400]	; (8001a44 <move_random+0x278>)
 80018b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b6:	2b25      	cmp	r3, #37	; 0x25
 80018b8:	dd04      	ble.n	80018c4 <move_random+0xf8>
 80018ba:	4b62      	ldr	r3, [pc, #392]	; (8001a44 <move_random+0x278>)
 80018bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c0:	2b6b      	cmp	r3, #107	; 0x6b
 80018c2:	dd09      	ble.n	80018d8 <move_random+0x10c>
 80018c4:	4b5f      	ldr	r3, [pc, #380]	; (8001a44 <move_random+0x278>)
 80018c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ca:	2b92      	cmp	r3, #146	; 0x92
 80018cc:	dd07      	ble.n	80018de <move_random+0x112>
 80018ce:	4b5d      	ldr	r3, [pc, #372]	; (8001a44 <move_random+0x278>)
 80018d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d4:	2bd8      	cmp	r3, #216	; 0xd8
 80018d6:	dc02      	bgt.n	80018de <move_random+0x112>
		isInBarrier = 4;//下面俩墙
 80018d8:	2304      	movs	r3, #4
 80018da:	71fb      	strb	r3, [r7, #7]
 80018dc:	e035      	b.n	800194a <move_random+0x17e>
	else{
		for(uint8_t i = 0;i < 5; i++){
 80018de:	2300      	movs	r3, #0
 80018e0:	71bb      	strb	r3, [r7, #6]
 80018e2:	e02f      	b.n	8001944 <move_random+0x178>
			if(myCoord.x >= obstacles[i].coord1.x && myCoord.y >= obstacles[i].coord1.y && myCoord.x <= obstacles[i].coord2.x && myCoord.y <= obstacles[i].coord2.y){
 80018e4:	4b57      	ldr	r3, [pc, #348]	; (8001a44 <move_random+0x278>)
 80018e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80018ea:	79bb      	ldrb	r3, [r7, #6]
 80018ec:	4956      	ldr	r1, [pc, #344]	; (8001a48 <move_random+0x27c>)
 80018ee:	f931 3033 	ldrsh.w	r3, [r1, r3, lsl #3]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	db23      	blt.n	800193e <move_random+0x172>
 80018f6:	4b53      	ldr	r3, [pc, #332]	; (8001a44 <move_random+0x278>)
 80018f8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80018fc:	79bb      	ldrb	r3, [r7, #6]
 80018fe:	4952      	ldr	r1, [pc, #328]	; (8001a48 <move_random+0x27c>)
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	440b      	add	r3, r1
 8001904:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001908:	429a      	cmp	r2, r3
 800190a:	db18      	blt.n	800193e <move_random+0x172>
 800190c:	4b4d      	ldr	r3, [pc, #308]	; (8001a44 <move_random+0x278>)
 800190e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001912:	79bb      	ldrb	r3, [r7, #6]
 8001914:	494c      	ldr	r1, [pc, #304]	; (8001a48 <move_random+0x27c>)
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	440b      	add	r3, r1
 800191a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800191e:	429a      	cmp	r2, r3
 8001920:	dc0d      	bgt.n	800193e <move_random+0x172>
 8001922:	4b48      	ldr	r3, [pc, #288]	; (8001a44 <move_random+0x278>)
 8001924:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001928:	79bb      	ldrb	r3, [r7, #6]
 800192a:	4947      	ldr	r1, [pc, #284]	; (8001a48 <move_random+0x27c>)
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	440b      	add	r3, r1
 8001930:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001934:	429a      	cmp	r2, r3
 8001936:	dc02      	bgt.n	800193e <move_random+0x172>
				isInBarrier = 5;//在场上的障碍物里
 8001938:	2305      	movs	r3, #5
 800193a:	71fb      	strb	r3, [r7, #7]
				break;
 800193c:	e005      	b.n	800194a <move_random+0x17e>
		for(uint8_t i = 0;i < 5; i++){
 800193e:	79bb      	ldrb	r3, [r7, #6]
 8001940:	3301      	adds	r3, #1
 8001942:	71bb      	strb	r3, [r7, #6]
 8001944:	79bb      	ldrb	r3, [r7, #6]
 8001946:	2b04      	cmp	r3, #4
 8001948:	d9cc      	bls.n	80018e4 <move_random+0x118>
			}
		}
	}
	if(isInBarrier == 0){
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d111      	bne.n	8001974 <move_random+0x1a8>
		while(orders.length == 0){
 8001950:	e00b      	b.n	800196a <move_random+0x19e>
			cmotor_lf.goalSpeed = 500;
 8001952:	4b3e      	ldr	r3, [pc, #248]	; (8001a4c <move_random+0x280>)
 8001954:	4a3e      	ldr	r2, [pc, #248]	; (8001a50 <move_random+0x284>)
 8001956:	639a      	str	r2, [r3, #56]	; 0x38
			cmotor_rf.goalSpeed = -500;
 8001958:	4b3e      	ldr	r3, [pc, #248]	; (8001a54 <move_random+0x288>)
 800195a:	4a3f      	ldr	r2, [pc, #252]	; (8001a58 <move_random+0x28c>)
 800195c:	639a      	str	r2, [r3, #56]	; 0x38
			cmotor_lb.goalSpeed = 500;
 800195e:	4b3f      	ldr	r3, [pc, #252]	; (8001a5c <move_random+0x290>)
 8001960:	4a3b      	ldr	r2, [pc, #236]	; (8001a50 <move_random+0x284>)
 8001962:	639a      	str	r2, [r3, #56]	; 0x38
			cmotor_rb.goalSpeed = -500;
 8001964:	4b3e      	ldr	r3, [pc, #248]	; (8001a60 <move_random+0x294>)
 8001966:	4a3c      	ldr	r2, [pc, #240]	; (8001a58 <move_random+0x28c>)
 8001968:	639a      	str	r2, [r3, #56]	; 0x38
		while(orders.length == 0){
 800196a:	4b3e      	ldr	r3, [pc, #248]	; (8001a64 <move_random+0x298>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0ef      	beq.n	8001952 <move_random+0x186>
			cmotor_rf.goalSpeed = -500;
			cmotor_lb.goalSpeed = 500;
			cmotor_rb.goalSpeed = -500;
		}
	}
}
 8001972:	e063      	b.n	8001a3c <move_random+0x270>
		if(isInBarrier == 1){
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d110      	bne.n	800199c <move_random+0x1d0>
			safeplace.x = myCoord.x - 10;
 800197a:	4b32      	ldr	r3, [pc, #200]	; (8001a44 <move_random+0x278>)
 800197c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001980:	b29b      	uxth	r3, r3
 8001982:	3b0a      	subs	r3, #10
 8001984:	b29b      	uxth	r3, r3
 8001986:	b21b      	sxth	r3, r3
 8001988:	803b      	strh	r3, [r7, #0]
			safeplace.y = myCoord.y;
 800198a:	4b2e      	ldr	r3, [pc, #184]	; (8001a44 <move_random+0x278>)
 800198c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001990:	807b      	strh	r3, [r7, #2]
			GotoDestination(safeplace, 0);
 8001992:	2100      	movs	r1, #0
 8001994:	6838      	ldr	r0, [r7, #0]
 8001996:	f003 f85b 	bl	8004a50 <GotoDestination>
 800199a:	e047      	b.n	8001a2c <move_random+0x260>
		else if(isInBarrier == 2){
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d110      	bne.n	80019c4 <move_random+0x1f8>
			safeplace.x = myCoord.x;
 80019a2:	4b28      	ldr	r3, [pc, #160]	; (8001a44 <move_random+0x278>)
 80019a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a8:	803b      	strh	r3, [r7, #0]
			safeplace.y = myCoord.y - 10;
 80019aa:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <move_random+0x278>)
 80019ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	3b0a      	subs	r3, #10
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	b21b      	sxth	r3, r3
 80019b8:	807b      	strh	r3, [r7, #2]
			GotoDestination(safeplace, 0);
 80019ba:	2100      	movs	r1, #0
 80019bc:	6838      	ldr	r0, [r7, #0]
 80019be:	f003 f847 	bl	8004a50 <GotoDestination>
 80019c2:	e033      	b.n	8001a2c <move_random+0x260>
		else if(isInBarrier == 3){
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d110      	bne.n	80019ec <move_random+0x220>
			safeplace.x = myCoord.x + 10;
 80019ca:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <move_random+0x278>)
 80019cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	330a      	adds	r3, #10
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	b21b      	sxth	r3, r3
 80019d8:	803b      	strh	r3, [r7, #0]
			safeplace.y = myCoord.y;
 80019da:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <move_random+0x278>)
 80019dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019e0:	807b      	strh	r3, [r7, #2]
			GotoDestination(safeplace, 0);
 80019e2:	2100      	movs	r1, #0
 80019e4:	6838      	ldr	r0, [r7, #0]
 80019e6:	f003 f833 	bl	8004a50 <GotoDestination>
 80019ea:	e01f      	b.n	8001a2c <move_random+0x260>
		else if(isInBarrier == 4){
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d11c      	bne.n	8001a2c <move_random+0x260>
			safeplace.x = myCoord.x;
 80019f2:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <move_random+0x278>)
 80019f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f8:	803b      	strh	r3, [r7, #0]
			safeplace.y = myCoord.y + 10;
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <move_random+0x278>)
 80019fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	330a      	adds	r3, #10
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	b21b      	sxth	r3, r3
 8001a08:	807b      	strh	r3, [r7, #2]
			GotoDestination(safeplace, 0);
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	6838      	ldr	r0, [r7, #0]
 8001a0e:	f003 f81f 	bl	8004a50 <GotoDestination>
		while((orders.length + delivering_num) == 0){
 8001a12:	e00b      	b.n	8001a2c <move_random+0x260>
			cmotor_lf.goalSpeed = 500;
 8001a14:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <move_random+0x280>)
 8001a16:	4a0e      	ldr	r2, [pc, #56]	; (8001a50 <move_random+0x284>)
 8001a18:	639a      	str	r2, [r3, #56]	; 0x38
			cmotor_rf.goalSpeed = -500;
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <move_random+0x288>)
 8001a1c:	4a0e      	ldr	r2, [pc, #56]	; (8001a58 <move_random+0x28c>)
 8001a1e:	639a      	str	r2, [r3, #56]	; 0x38
			cmotor_lb.goalSpeed = 500;
 8001a20:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <move_random+0x290>)
 8001a22:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <move_random+0x284>)
 8001a24:	639a      	str	r2, [r3, #56]	; 0x38
			cmotor_rb.goalSpeed = -500;
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <move_random+0x294>)
 8001a28:	4a0b      	ldr	r2, [pc, #44]	; (8001a58 <move_random+0x28c>)
 8001a2a:	639a      	str	r2, [r3, #56]	; 0x38
		while((orders.length + delivering_num) == 0){
 8001a2c:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <move_random+0x298>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <move_random+0x29c>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0eb      	beq.n	8001a14 <move_random+0x248>
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20001068 	.word	0x20001068
 8001a48:	20000fd8 	.word	0x20000fd8
 8001a4c:	20000da8 	.word	0x20000da8
 8001a50:	43fa0000 	.word	0x43fa0000
 8001a54:	20000de4 	.word	0x20000de4
 8001a58:	c3fa0000 	.word	0xc3fa0000
 8001a5c:	20000e20 	.word	0x20000e20
 8001a60:	20000e5c 	.word	0x20000e5c
 8001a64:	200010e4 	.word	0x200010e4
 8001a68:	20001064 	.word	0x20001064

08001a6c <huansic_jy62_init>:
/*
 * 		Initializes the port of the IMU.
 * 		@param	himu	jy62 pending initialization
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_init(JY62_HandleTypeDef *himu) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	// perform some necessary checks
	if (!himu)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <huansic_jy62_init+0x12>
		return IMU_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e051      	b.n	8001b22 <huansic_jy62_init+0xb6>

	if (!himu->huart)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <huansic_jy62_init+0x1e>
		return IMU_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e04b      	b.n	8001b22 <huansic_jy62_init+0xb6>

	if (himu->huart->Init.BaudRate != 9600) {		// if it is not 9600bps
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8001a94:	d00e      	beq.n	8001ab4 <huansic_jy62_init+0x48>
		// make it 9600 to send the package
		HAL_UART_DeInit(himu->huart);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f008 f88c 	bl	8009bb8 <HAL_UART_DeInit>
		himu->huart->Init.BaudRate = 9600;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001aa8:	605a      	str	r2, [r3, #4]
		HAL_UART_Init(himu->huart);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f008 f835 	bl	8009b1e <HAL_UART_Init>
	}
	HAL_UART_Transmit(himu->huart, JY62_BAUD_115200, 3, 10);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	230a      	movs	r3, #10
 8001aba:	2203      	movs	r2, #3
 8001abc:	491b      	ldr	r1, [pc, #108]	; (8001b2c <huansic_jy62_init+0xc0>)
 8001abe:	f008 f8aa 	bl	8009c16 <HAL_UART_Transmit>
	HAL_UART_DeInit(himu->huart);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f008 f876 	bl	8009bb8 <HAL_UART_DeInit>
	himu->huart->Init.BaudRate = 115200;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ad4:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(himu->huart);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f008 f81f 	bl	8009b1e <HAL_UART_Init>

	HAL_Delay(3);
 8001ae0:	2003      	movs	r0, #3
 8001ae2:	f004 fd77 	bl	80065d4 <HAL_Delay>

	// reset z-axis angle
	HAL_UART_Transmit(himu->huart, JY62_RESET_Z_ANGLE, 3, 10);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6818      	ldr	r0, [r3, #0]
 8001aea:	230a      	movs	r3, #10
 8001aec:	2203      	movs	r2, #3
 8001aee:	4910      	ldr	r1, [pc, #64]	; (8001b30 <huansic_jy62_init+0xc4>)
 8001af0:	f008 f891 	bl	8009c16 <HAL_UART_Transmit>

	// instead, just use DMA
	himu->pending_alignment = 0;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_DMA(himu->huart, &himu->buffer[0], 33);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6818      	ldr	r0, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3334      	adds	r3, #52	; 0x34
 8001b04:	2221      	movs	r2, #33	; 0x21
 8001b06:	4619      	mov	r1, r3
 8001b08:	f008 f947 	bl	8009d9a <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(himu->hdma, DMA_IT_HT);		// disable half transfer interrupt
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0204 	bic.w	r2, r2, #4
 8001b1e:	601a      	str	r2, [r3, #0]

#ifdef HUANSIC_JY62_DEBUG
	himu->counter = 0;
#endif

	return IMU_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000004 	.word	0x20000004
 8001b30:	20000000 	.word	0x20000000

08001b34 <huansic_jy62_dma_isr>:
/*
 * 		Handles the dma interrupts.
 * 		@param	himu	jy62 whose port has sent out the interrupt signal
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_dma_isr(JY62_HandleTypeDef *himu) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
	if (!himu)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <huansic_jy62_dma_isr+0x12>
		return IMU_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e112      	b.n	8001d6c <huansic_jy62_dma_isr+0x238>

	uint8_t temp8, i, i11;

	for (i = 0, i11 = 0; i < 3; i++, i11 += 11) {
 8001b46:	2300      	movs	r3, #0
 8001b48:	73fb      	strb	r3, [r7, #15]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	73bb      	strb	r3, [r7, #14]
 8001b4e:	e0ed      	b.n	8001d2c <huansic_jy62_dma_isr+0x1f8>
		if (himu->buffer[0 + i11] != HUANSIC_JY62_HEADER) {		// header mis-aligned
 8001b50:	7bbb      	ldrb	r3, [r7, #14]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b5a:	2b55      	cmp	r3, #85	; 0x55
 8001b5c:	d01c      	beq.n	8001b98 <huansic_jy62_dma_isr+0x64>
			himu->pending_alignment = 1;		// enter aligning mode if not already
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6818      	ldr	r0, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3334      	adds	r3, #52	; 0x34
 8001b6e:	2201      	movs	r2, #1
 8001b70:	4619      	mov	r1, r3
 8001b72:	f008 f8e2 	bl	8009d3a <HAL_UART_Receive_IT>
			if (i) {
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00b      	beq.n	8001b94 <huansic_jy62_dma_isr+0x60>
				__huansic_jy62_decode_temp(himu, i - 1);
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	4619      	mov	r1, r3
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 fa6b 	bl	8002060 <__huansic_jy62_decode_temp>
				himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 8001b8a:	f004 fd19 	bl	80065c0 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	631a      	str	r2, [r3, #48]	; 0x30
			}
			return IMU_HEADER_ERROR;
 8001b94:	2305      	movs	r3, #5
 8001b96:	e0e9      	b.n	8001d6c <huansic_jy62_dma_isr+0x238>
		} else {
			// check sum
			temp8 = himu->buffer[0 + i11];
 8001b98:	7bbb      	ldrb	r3, [r7, #14]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ba2:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[1 + i11];
 8001ba4:	7bbb      	ldrb	r3, [r7, #14]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	4413      	add	r3, r2
 8001bac:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001bb0:	7b7b      	ldrb	r3, [r7, #13]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[2 + i11];
 8001bb6:	7bbb      	ldrb	r3, [r7, #14]
 8001bb8:	3302      	adds	r3, #2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001bc2:	7b7b      	ldrb	r3, [r7, #13]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[3 + i11];
 8001bc8:	7bbb      	ldrb	r3, [r7, #14]
 8001bca:	3303      	adds	r3, #3
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	4413      	add	r3, r2
 8001bd0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001bd4:	7b7b      	ldrb	r3, [r7, #13]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[4 + i11];
 8001bda:	7bbb      	ldrb	r3, [r7, #14]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001be6:	7b7b      	ldrb	r3, [r7, #13]
 8001be8:	4413      	add	r3, r2
 8001bea:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[5 + i11];
 8001bec:	7bbb      	ldrb	r3, [r7, #14]
 8001bee:	3305      	adds	r3, #5
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001bf8:	7b7b      	ldrb	r3, [r7, #13]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[6 + i11];
 8001bfe:	7bbb      	ldrb	r3, [r7, #14]
 8001c00:	3306      	adds	r3, #6
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001c0a:	7b7b      	ldrb	r3, [r7, #13]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[7 + i11];
 8001c10:	7bbb      	ldrb	r3, [r7, #14]
 8001c12:	3307      	adds	r3, #7
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	4413      	add	r3, r2
 8001c18:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001c1c:	7b7b      	ldrb	r3, [r7, #13]
 8001c1e:	4413      	add	r3, r2
 8001c20:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[8 + i11];
 8001c22:	7bbb      	ldrb	r3, [r7, #14]
 8001c24:	3308      	adds	r3, #8
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001c2e:	7b7b      	ldrb	r3, [r7, #13]
 8001c30:	4413      	add	r3, r2
 8001c32:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[9 + i11];
 8001c34:	7bbb      	ldrb	r3, [r7, #14]
 8001c36:	3309      	adds	r3, #9
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001c40:	7b7b      	ldrb	r3, [r7, #13]
 8001c42:	4413      	add	r3, r2
 8001c44:	737b      	strb	r3, [r7, #13]

			if (temp8 != himu->buffer[10 + i11]) {		// check
 8001c46:	7bbb      	ldrb	r3, [r7, #14]
 8001c48:	330a      	adds	r3, #10
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c52:	7b7a      	ldrb	r2, [r7, #13]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d01c      	beq.n	8001c92 <huansic_jy62_dma_isr+0x15e>
				himu->pending_alignment = 1;		// enter aligning mode if not already
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
				HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6818      	ldr	r0, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3334      	adds	r3, #52	; 0x34
 8001c68:	2201      	movs	r2, #1
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f008 f865 	bl	8009d3a <HAL_UART_Receive_IT>
				if (i) {
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00b      	beq.n	8001c8e <huansic_jy62_dma_isr+0x15a>
					__huansic_jy62_decode_temp(himu, i - 1);
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f9ee 	bl	8002060 <__huansic_jy62_decode_temp>
					himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 8001c84:	f004 fc9c 	bl	80065c0 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	631a      	str	r2, [r3, #48]	; 0x30
				}
				return IMU_SUM_ERROR;
 8001c8e:	2304      	movs	r3, #4
 8001c90:	e06c      	b.n	8001d6c <huansic_jy62_dma_isr+0x238>
			}

			if (himu->buffer[1 + i11] == HUANSIC_JY62_ACCEL) 		// then decode
 8001c92:	7bbb      	ldrb	r3, [r7, #14]
 8001c94:	3301      	adds	r3, #1
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c9e:	2b51      	cmp	r3, #81	; 0x51
 8001ca0:	d105      	bne.n	8001cae <huansic_jy62_dma_isr+0x17a>
				__huansic_jy62_decode_accel(himu, i);
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f8c6 	bl	8001e38 <__huansic_jy62_decode_accel>
 8001cac:	e038      	b.n	8001d20 <huansic_jy62_dma_isr+0x1ec>
			else if (himu->buffer[1 + i11] == HUANSIC_JY62_OMEGA)
 8001cae:	7bbb      	ldrb	r3, [r7, #14]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cba:	2b52      	cmp	r3, #82	; 0x52
 8001cbc:	d105      	bne.n	8001cca <huansic_jy62_dma_isr+0x196>
				__huansic_jy62_decode_omega(himu, i);
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f922 	bl	8001f0c <__huansic_jy62_decode_omega>
 8001cc8:	e02a      	b.n	8001d20 <huansic_jy62_dma_isr+0x1ec>
			else if (himu->buffer[1 + i11] == HUANSIC_JY62_THETA)
 8001cca:	7bbb      	ldrb	r3, [r7, #14]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cd6:	2b53      	cmp	r3, #83	; 0x53
 8001cd8:	d105      	bne.n	8001ce6 <huansic_jy62_dma_isr+0x1b2>
				__huansic_jy62_decode_theta(himu, i);
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f968 	bl	8001fb4 <__huansic_jy62_decode_theta>
 8001ce4:	e01c      	b.n	8001d20 <huansic_jy62_dma_isr+0x1ec>
			else {
				himu->pending_alignment = 1;		// enter aligning mode if not already
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
				HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6818      	ldr	r0, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3334      	adds	r3, #52	; 0x34
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f008 f81e 	bl	8009d3a <HAL_UART_Receive_IT>
				if (i) {
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00b      	beq.n	8001d1c <huansic_jy62_dma_isr+0x1e8>
					__huansic_jy62_decode_temp(himu, i - 1);
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f9a7 	bl	8002060 <__huansic_jy62_decode_temp>
					himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 8001d12:	f004 fc55 	bl	80065c0 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	631a      	str	r2, [r3, #48]	; 0x30
				}
				return IMU_PID_ERROR;
 8001d1c:	2306      	movs	r3, #6
 8001d1e:	e025      	b.n	8001d6c <huansic_jy62_dma_isr+0x238>
	for (i = 0, i11 = 0; i < 3; i++, i11 += 11) {
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	3301      	adds	r3, #1
 8001d24:	73fb      	strb	r3, [r7, #15]
 8001d26:	7bbb      	ldrb	r3, [r7, #14]
 8001d28:	330b      	adds	r3, #11
 8001d2a:	73bb      	strb	r3, [r7, #14]
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	f67f af0e 	bls.w	8001b50 <huansic_jy62_dma_isr+0x1c>
		}

	}

	// it should only reach this point if the package is fully valid
	himu->lastUpdated = HAL_GetTick();
 8001d34:	f004 fc44 	bl	80065c0 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	631a      	str	r2, [r3, #48]	; 0x30
	__huansic_jy62_decode_temp(himu, 2);
 8001d3e:	2102      	movs	r1, #2
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f98d 	bl	8002060 <__huansic_jy62_decode_temp>
	// start to receive the next package
	HAL_UART_Receive_DMA(himu->huart, &himu->buffer[0], 33);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	3334      	adds	r3, #52	; 0x34
 8001d4e:	2221      	movs	r2, #33	; 0x21
 8001d50:	4619      	mov	r1, r3
 8001d52:	f008 f822 	bl	8009d9a <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(himu->hdma, DMA_IT_HT);		// disable half transfer interrupt
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0204 	bic.w	r2, r2, #4
 8001d68:	601a      	str	r2, [r3, #0]
#ifdef HUANSIC_JY62_DEBUG
	himu->counter++;
	HAL_GPIO_WritePin(himu->port, himu->pin, himu->counter & (1 << 5));
#endif

	return IMU_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <huansic_jy62_isr>:
/*
 * 		Handles the interrupts.
 * 		@param	himu	jy62 whose port has sent out the interrupt signal
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_isr(JY62_HandleTypeDef *himu) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	if (!himu)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <huansic_jy62_isr+0x12>
		return IMU_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e029      	b.n	8001dda <huansic_jy62_isr+0x66>

	if (himu->buffer[0] != HUANSIC_JY62_HEADER) {		// header mis-aligned
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d8c:	2b55      	cmp	r3, #85	; 0x55
 8001d8e:	d00d      	beq.n	8001dac <huansic_jy62_isr+0x38>
		himu->pending_alignment = 1;		// enter aligning mode if not already
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6818      	ldr	r0, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3334      	adds	r3, #52	; 0x34
 8001da0:	2201      	movs	r2, #1
 8001da2:	4619      	mov	r1, r3
 8001da4:	f007 ffc9 	bl	8009d3a <HAL_UART_Receive_IT>
		return IMU_HEADER_ERROR;
 8001da8:	2305      	movs	r3, #5
 8001daa:	e016      	b.n	8001dda <huansic_jy62_isr+0x66>
	} else {
		// header just aligned
		himu->pending_alignment = 0;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		HAL_UART_Receive_DMA(himu->huart, &himu->buffer[1], 32);		// receive the rest
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3335      	adds	r3, #53	; 0x35
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f007 ffeb 	bl	8009d9a <HAL_UART_Receive_DMA>
		__HAL_DMA_DISABLE_IT(himu->hdma, DMA_IT_HT);		// disable half transfer interrupt
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0204 	bic.w	r2, r2, #4
 8001dd6:	601a      	str	r2, [r3, #0]
		return IMU_OK;
 8001dd8:	2300      	movs	r3, #0
	}
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <huansic_jy62_dma_error>:
/*
 * 		Handles the dma errors.
 * 		@param	himu	jy62 whose port has sent out the error
 * 		@retval	enum IMU_STATUS
 */
void huansic_jy62_dma_error(JY62_HandleTypeDef *himu) {
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	himu->pending_alignment = 1;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
//		himu->huart->RxState = HAL_UART_STATE_READY;
//	}
//	if(himu->hdma->State != HAL_DMA_STATE_READY){
//		himu->hdma->State = HAL_DMA_STATE_READY;
//	}
	HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6818      	ldr	r0, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3334      	adds	r3, #52	; 0x34
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f007 ff9c 	bl	8009d3a <HAL_UART_Receive_IT>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <huansic_jy62_it_error>:
/*
 * 		Handles the errors.
 * 		@param	himu	jy62 whose port has sent out the error
 * 		@retval	enum IMU_STATUS
 */
void huansic_jy62_it_error(JY62_HandleTypeDef *himu) {
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	himu->pending_alignment = 1;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
//		himu->huart->gState = HAL_UART_STATE_READY;
//	}
//	if(himu->huart->RxState != HAL_UART_STATE_READY){
//		himu->huart->RxState = HAL_UART_STATE_READY;
//	}
	HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3334      	adds	r3, #52	; 0x34
 8001e22:	2201      	movs	r2, #1
 8001e24:	4619      	mov	r1, r3
 8001e26:	f007 ff88 	bl	8009d3a <HAL_UART_Receive_IT>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	0000      	movs	r0, r0
 8001e34:	0000      	movs	r0, r0
	...

08001e38 <__huansic_jy62_decode_accel>:

/***************	functions used by the library; not visible to users		***************/

static inline void __huansic_jy62_decode_accel(JY62_HandleTypeDef *himu, uint8_t location) {
 8001e38:	b590      	push	{r4, r7, lr}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 8001e44:	2300      	movs	r3, #0
 8001e46:	73fb      	strb	r3, [r7, #15]
 8001e48:	e050      	b.n	8001eec <__huansic_jy62_decode_accel+0xb4>
		temp = himu->buffer[3 + 2 * i + location * 11];
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	1cd9      	adds	r1, r3, #3
 8001e50:	78fa      	ldrb	r2, [r7, #3]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e66:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 8001e68:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e6c:	021b      	lsls	r3, r3, #8
 8001e6e:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[2 + 2 * i + location * 11];
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	3301      	adds	r3, #1
 8001e74:	0059      	lsls	r1, r3, #1
 8001e76:	78fa      	ldrb	r2, [r7, #3]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	440b      	add	r3, r1
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	4413      	add	r3, r2
 8001e88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e8c:	b21a      	sxth	r2, r3
 8001e8e:	89bb      	ldrh	r3, [r7, #12]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	81bb      	strh	r3, [r7, #12]
		himu->accel[i] = (float) temp * 16 * 9.8 / 32768;
 8001e94:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe ff4d 	bl	8000d38 <__aeabi_i2f>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe ff9b 	bl	8000de0 <__aeabi_fmul>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fb1f 	bl	80004f0 <__aeabi_f2d>
 8001eb2:	a313      	add	r3, pc, #76	; (adr r3, 8001f00 <__huansic_jy62_decode_accel+0xc8>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	f7fe fb72 	bl	80005a0 <__aeabi_dmul>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <__huansic_jy62_decode_accel+0xd0>)
 8001eca:	f7fe fc93 	bl	80007f4 <__aeabi_ddiv>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	7bfc      	ldrb	r4, [r7, #15]
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f7fe fe24 	bl	8000b24 <__aeabi_d2f>
 8001edc:	4601      	mov	r1, r0
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	1ca2      	adds	r2, r4, #2
 8001ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 3; i++) {
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d9ab      	bls.n	8001e4a <__huansic_jy62_decode_accel+0x12>
	}
}
 8001ef2:	bf00      	nop
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd90      	pop	{r4, r7, pc}
 8001efc:	f3af 8000 	nop.w
 8001f00:	9999999a 	.word	0x9999999a
 8001f04:	40239999 	.word	0x40239999
 8001f08:	40e00000 	.word	0x40e00000

08001f0c <__huansic_jy62_decode_omega>:

static inline void __huansic_jy62_decode_omega(JY62_HandleTypeDef *himu, uint8_t location) {
 8001f0c:	b590      	push	{r4, r7, lr}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 8001f18:	2300      	movs	r3, #0
 8001f1a:	73fb      	strb	r3, [r7, #15]
 8001f1c:	e03f      	b.n	8001f9e <__huansic_jy62_decode_omega+0x92>
		temp = himu->buffer[3 + 2 * i + location * 11];
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	1cd9      	adds	r1, r3, #3
 8001f24:	78fa      	ldrb	r2, [r7, #3]
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	440b      	add	r3, r1
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f3a:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 8001f3c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[2 + 2 * i + location * 11];
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	3301      	adds	r3, #1
 8001f48:	0059      	lsls	r1, r3, #1
 8001f4a:	78fa      	ldrb	r2, [r7, #3]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4413      	add	r3, r2
 8001f56:	440b      	add	r3, r1
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f60:	b21a      	sxth	r2, r3
 8001f62:	89bb      	ldrh	r3, [r7, #12]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	81bb      	strh	r3, [r7, #12]
		himu->omega[i] = (float) temp * 2000 / 32768;
 8001f68:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe fee3 	bl	8000d38 <__aeabi_i2f>
 8001f72:	4603      	mov	r3, r0
 8001f74:	490e      	ldr	r1, [pc, #56]	; (8001fb0 <__huansic_jy62_decode_omega+0xa4>)
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe ff32 	bl	8000de0 <__aeabi_fmul>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	7bfc      	ldrb	r4, [r7, #15]
 8001f80:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe ffdf 	bl	8000f48 <__aeabi_fdiv>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	1d23      	adds	r3, r4, #4
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	6059      	str	r1, [r3, #4]
	for (i = 0; i < 3; i++) {
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	73fb      	strb	r3, [r7, #15]
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d9bc      	bls.n	8001f1e <__huansic_jy62_decode_omega+0x12>
	}
}
 8001fa4:	bf00      	nop
 8001fa6:	bf00      	nop
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd90      	pop	{r4, r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	44fa0000 	.word	0x44fa0000

08001fb4 <__huansic_jy62_decode_theta>:

static inline void __huansic_jy62_decode_theta(JY62_HandleTypeDef *himu, uint8_t location) {
 8001fb4:	b590      	push	{r4, r7, lr}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	73fb      	strb	r3, [r7, #15]
 8001fc4:	e03f      	b.n	8002046 <__huansic_jy62_decode_theta+0x92>
		temp = himu->buffer[3 + 2 * i + location * 11];
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	1cd9      	adds	r1, r3, #3
 8001fcc:	78fa      	ldrb	r2, [r7, #3]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	440b      	add	r3, r1
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fe2:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 8001fe4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[2 + 2 * i + location * 11];
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	0059      	lsls	r1, r3, #1
 8001ff2:	78fa      	ldrb	r2, [r7, #3]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	4413      	add	r3, r2
 8001ffe:	440b      	add	r3, r1
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	4413      	add	r3, r2
 8002004:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002008:	b21a      	sxth	r2, r3
 800200a:	89bb      	ldrh	r3, [r7, #12]
 800200c:	4313      	orrs	r3, r2
 800200e:	81bb      	strh	r3, [r7, #12]
		himu->theta[i] = (float) temp * 180 / 32768;
 8002010:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fe8f 	bl	8000d38 <__aeabi_i2f>
 800201a:	4603      	mov	r3, r0
 800201c:	490e      	ldr	r1, [pc, #56]	; (8002058 <__huansic_jy62_decode_theta+0xa4>)
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fede 	bl	8000de0 <__aeabi_fmul>
 8002024:	4603      	mov	r3, r0
 8002026:	7bfc      	ldrb	r4, [r7, #15]
 8002028:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe ff8b 	bl	8000f48 <__aeabi_fdiv>
 8002032:	4603      	mov	r3, r0
 8002034:	4619      	mov	r1, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f104 0208 	add.w	r2, r4, #8
 800203c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 3; i++) {
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	3301      	adds	r3, #1
 8002044:	73fb      	strb	r3, [r7, #15]
 8002046:	7bfb      	ldrb	r3, [r7, #15]
 8002048:	2b02      	cmp	r3, #2
 800204a:	d9bc      	bls.n	8001fc6 <__huansic_jy62_decode_theta+0x12>
	}
}
 800204c:	bf00      	nop
 800204e:	bf00      	nop
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	bd90      	pop	{r4, r7, pc}
 8002056:	bf00      	nop
 8002058:	43340000 	.word	0x43340000
 800205c:	00000000 	.word	0x00000000

08002060 <__huansic_jy62_decode_temp>:

static inline void __huansic_jy62_decode_temp(JY62_HandleTypeDef *himu, uint8_t location) {
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	70fb      	strb	r3, [r7, #3]
	int16_t temp;

	temp = himu->buffer[8 + location * 11];
 800206c:	78fa      	ldrb	r2, [r7, #3]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4413      	add	r3, r2
 8002078:	3308      	adds	r3, #8
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002082:	81fb      	strh	r3, [r7, #14]
	temp <<= 8;
 8002084:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	81fb      	strh	r3, [r7, #14]
	temp |= himu->buffer[9 + location * 11];
 800208c:	78fa      	ldrb	r2, [r7, #3]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4413      	add	r3, r2
 8002098:	3309      	adds	r3, #9
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020a2:	b21a      	sxth	r2, r3
 80020a4:	89fb      	ldrh	r3, [r7, #14]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	81fb      	strh	r3, [r7, #14]
	himu->temperature = (float) temp / 340 + 36.53;
 80020aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fe42 	bl	8000d38 <__aeabi_i2f>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4910      	ldr	r1, [pc, #64]	; (80020f8 <__huansic_jy62_decode_temp+0x98>)
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe ff45 	bl	8000f48 <__aeabi_fdiv>
 80020be:	4603      	mov	r3, r0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fa15 	bl	80004f0 <__aeabi_f2d>
 80020c6:	a30a      	add	r3, pc, #40	; (adr r3, 80020f0 <__huansic_jy62_decode_temp+0x90>)
 80020c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020cc:	f7fe f8b2 	bl	8000234 <__adddf3>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4610      	mov	r0, r2
 80020d6:	4619      	mov	r1, r3
 80020d8:	f7fe fd24 	bl	8000b24 <__aeabi_d2f>
 80020dc:	4602      	mov	r2, r0
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	f3af 8000 	nop.w
 80020f0:	0a3d70a4 	.word	0x0a3d70a4
 80020f4:	404243d7 	.word	0x404243d7
 80020f8:	43aa0000 	.word	0x43aa0000

080020fc <custom_order_free_fault>:

__weak void custom_path_free_fault(Path *ptr) {

}

__weak void custom_order_free_fault(Order *ptr) {
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]

}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr
	...

08002110 <huansic_order_init>:
		newTail->nextPath = 0;
	}
	return retPath;
}

void huansic_order_init() {
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++){
 8002116:	2300      	movs	r3, #0
 8002118:	71fb      	strb	r3, [r7, #7]
 800211a:	e017      	b.n	800214c <huansic_order_init+0x3c>
		orderBuffers[i].id = -1;
 800211c:	79fa      	ldrb	r2, [r7, #7]
 800211e:	491a      	ldr	r1, [pc, #104]	; (8002188 <huansic_order_init+0x78>)
 8002120:	4613      	mov	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4413      	add	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	440b      	add	r3, r1
 800212a:	3310      	adds	r3, #16
 800212c:	f04f 32ff 	mov.w	r2, #4294967295
 8002130:	601a      	str	r2, [r3, #0]
		orderBuffers[i].startTime = 0;
 8002132:	79fa      	ldrb	r2, [r7, #7]
 8002134:	4914      	ldr	r1, [pc, #80]	; (8002188 <huansic_order_init+0x78>)
 8002136:	4613      	mov	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	440b      	add	r3, r1
 8002140:	330c      	adds	r3, #12
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++){
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	3301      	adds	r3, #1
 800214a:	71fb      	strb	r3, [r7, #7]
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	2b63      	cmp	r3, #99	; 0x63
 8002150:	d9e4      	bls.n	800211c <huansic_order_init+0xc>
	}
	for (i = 0; i < 5; i++)
 8002152:	2300      	movs	r3, #0
 8002154:	71fb      	strb	r3, [r7, #7]
 8002156:	e00d      	b.n	8002174 <huansic_order_init+0x64>
		delivering[i] = &orderBuffers[i];		// give it some default value
 8002158:	79fa      	ldrb	r2, [r7, #7]
 800215a:	79f9      	ldrb	r1, [r7, #7]
 800215c:	4613      	mov	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4413      	add	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4a08      	ldr	r2, [pc, #32]	; (8002188 <huansic_order_init+0x78>)
 8002166:	4413      	add	r3, r2
 8002168:	4a08      	ldr	r2, [pc, #32]	; (800218c <huansic_order_init+0x7c>)
 800216a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	for (i = 0; i < 5; i++)
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	3301      	adds	r3, #1
 8002172:	71fb      	strb	r3, [r7, #7]
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	2b04      	cmp	r3, #4
 8002178:	d9ee      	bls.n	8002158 <huansic_order_init+0x48>
}
 800217a:	bf00      	nop
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	200000a4 	.word	0x200000a4
 800218c:	20001044 	.word	0x20001044

08002190 <huansic_order_new>:

Order* huansic_order_new(int8_t id) {
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
	if (id == -1)
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a2:	d101      	bne.n	80021a8 <huansic_order_new+0x18>
		return 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	e046      	b.n	8002236 <huansic_order_new+0xa6>

	uint8_t i;

	// find duplicates
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 80021a8:	2300      	movs	r3, #0
 80021aa:	73fb      	strb	r3, [r7, #15]
 80021ac:	e017      	b.n	80021de <huansic_order_new+0x4e>
		if (orderBuffers[i].id == id)
 80021ae:	7bfa      	ldrb	r2, [r7, #15]
 80021b0:	4923      	ldr	r1, [pc, #140]	; (8002240 <huansic_order_new+0xb0>)
 80021b2:	4613      	mov	r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4413      	add	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	440b      	add	r3, r1
 80021bc:	3310      	adds	r3, #16
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d107      	bne.n	80021d8 <huansic_order_new+0x48>
			return &orderBuffers[i];
 80021c8:	7bfa      	ldrb	r2, [r7, #15]
 80021ca:	4613      	mov	r3, r2
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	4413      	add	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4a1b      	ldr	r2, [pc, #108]	; (8002240 <huansic_order_new+0xb0>)
 80021d4:	4413      	add	r3, r2
 80021d6:	e02e      	b.n	8002236 <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	3301      	adds	r3, #1
 80021dc:	73fb      	strb	r3, [r7, #15]
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	2b63      	cmp	r3, #99	; 0x63
 80021e2:	d9e4      	bls.n	80021ae <huansic_order_new+0x1e>
	}

	// find spares
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]
 80021e8:	e021      	b.n	800222e <huansic_order_new+0x9e>
		if (orderBuffers[i].id == -1) {
 80021ea:	7bfa      	ldrb	r2, [r7, #15]
 80021ec:	4914      	ldr	r1, [pc, #80]	; (8002240 <huansic_order_new+0xb0>)
 80021ee:	4613      	mov	r3, r2
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	4413      	add	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	440b      	add	r3, r1
 80021f8:	3310      	adds	r3, #16
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002200:	d112      	bne.n	8002228 <huansic_order_new+0x98>
			orderBuffers[i].id = id;
 8002202:	7bfa      	ldrb	r2, [r7, #15]
 8002204:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002208:	480d      	ldr	r0, [pc, #52]	; (8002240 <huansic_order_new+0xb0>)
 800220a:	4613      	mov	r3, r2
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	4413      	add	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	4403      	add	r3, r0
 8002214:	3310      	adds	r3, #16
 8002216:	6019      	str	r1, [r3, #0]
			return &orderBuffers[i];
 8002218:	7bfa      	ldrb	r2, [r7, #15]
 800221a:	4613      	mov	r3, r2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	4413      	add	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	4a07      	ldr	r2, [pc, #28]	; (8002240 <huansic_order_new+0xb0>)
 8002224:	4413      	add	r3, r2
 8002226:	e006      	b.n	8002236 <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	3301      	adds	r3, #1
 800222c:	73fb      	strb	r3, [r7, #15]
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	2b63      	cmp	r3, #99	; 0x63
 8002232:	d9da      	bls.n	80021ea <huansic_order_new+0x5a>
		}
	}

	return 0;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	200000a4 	.word	0x200000a4

08002244 <huansic_order_delete>:

void huansic_order_delete(Order *ptr) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
	if (ptr->id == -1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002254:	d103      	bne.n	800225e <huansic_order_delete+0x1a>
		custom_order_free_fault(ptr);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff ff50 	bl	80020fc <custom_order_free_fault>
	else{
		ptr->id = -1;		// simple as is
		ptr->startTime = 0;
	}
}
 800225c:	e006      	b.n	800226c <huansic_order_delete+0x28>
		ptr->id = -1;		// simple as is
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f04f 32ff 	mov.w	r2, #4294967295
 8002264:	611a      	str	r2, [r3, #16]
		ptr->startTime = 0;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	60da      	str	r2, [r3, #12]
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <huansic_motor_init>:
 *      Author: Zonghuan Wu
 */

#include "huansic_motorlib.h"

void huansic_motor_init(Motor_HandleTypeDef *hmotor) {
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
	// checking some stuff
	assert(hmotor->counter);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d105      	bne.n	8002290 <huansic_motor_init+0x1c>
 8002284:	4b55      	ldr	r3, [pc, #340]	; (80023dc <huansic_motor_init+0x168>)
 8002286:	4a56      	ldr	r2, [pc, #344]	; (80023e0 <huansic_motor_init+0x16c>)
 8002288:	210c      	movs	r1, #12
 800228a:	4856      	ldr	r0, [pc, #344]	; (80023e4 <huansic_motor_init+0x170>)
 800228c:	f008 fb08 	bl	800a8a0 <__assert_func>
	assert(hmotor->posTimer);	// the negative channel CAN be NULL
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d105      	bne.n	80022a4 <huansic_motor_init+0x30>
 8002298:	4b53      	ldr	r3, [pc, #332]	; (80023e8 <huansic_motor_init+0x174>)
 800229a:	4a51      	ldr	r2, [pc, #324]	; (80023e0 <huansic_motor_init+0x16c>)
 800229c:	210d      	movs	r1, #13
 800229e:	4851      	ldr	r0, [pc, #324]	; (80023e4 <huansic_motor_init+0x170>)
 80022a0:	f008 fafe 	bl	800a8a0 <__assert_func>
	assert(hmotor->dt);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	f04f 0100 	mov.w	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe ff2b 	bl	8001108 <__aeabi_fcmpeq>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <huansic_motor_init+0x50>
 80022b8:	4b4c      	ldr	r3, [pc, #304]	; (80023ec <huansic_motor_init+0x178>)
 80022ba:	4a49      	ldr	r2, [pc, #292]	; (80023e0 <huansic_motor_init+0x16c>)
 80022bc:	210e      	movs	r1, #14
 80022be:	4849      	ldr	r0, [pc, #292]	; (80023e4 <huansic_motor_init+0x170>)
 80022c0:	f008 faee 	bl	800a8a0 <__assert_func>

	// initialize
	hmotor->lastTick = 0;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	84da      	strh	r2, [r3, #38]	; 0x26
	hmotor->lastError = 0;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	629a      	str	r2, [r3, #40]	; 0x28
	hmotor->lastSpeed = 0;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	62da      	str	r2, [r3, #44]	; 0x2c
	hmotor->last5Speed = 0;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	631a      	str	r2, [r3, #48]	; 0x30
	hmotor->sumError = 0;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	635a      	str	r2, [r3, #52]	; 0x34
	hmotor->goalSpeed = 0;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	639a      	str	r2, [r3, #56]	; 0x38
	hmotor->counter->Instance->CNT = 0;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2200      	movs	r2, #0
 80022fa:	625a      	str	r2, [r3, #36]	; 0x24

	// shut down the motor for now

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d105      	bne.n	8002310 <huansic_motor_init+0x9c>
		hmotor->posTimer->Instance->CCR1 = 0;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2200      	movs	r2, #0
 800230c:	635a      	str	r2, [r3, #52]	; 0x34
 800230e:	e01c      	b.n	800234a <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	2b04      	cmp	r3, #4
 8002316:	d105      	bne.n	8002324 <huansic_motor_init+0xb0>
		hmotor->posTimer->Instance->CCR2 = 0;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2200      	movs	r2, #0
 8002320:	639a      	str	r2, [r3, #56]	; 0x38
 8002322:	e012      	b.n	800234a <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2b08      	cmp	r3, #8
 800232a:	d105      	bne.n	8002338 <huansic_motor_init+0xc4>
		hmotor->posTimer->Instance->CCR3 = 0;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2200      	movs	r2, #0
 8002334:	63da      	str	r2, [r3, #60]	; 0x3c
 8002336:	e008      	b.n	800234a <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	2b0c      	cmp	r3, #12
 800233e:	d104      	bne.n	800234a <huansic_motor_init+0xd6>
		hmotor->posTimer->Instance->CCR4 = 0;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2200      	movs	r2, #0
 8002348:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d026      	beq.n	80023a0 <huansic_motor_init+0x12c>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d105      	bne.n	8002366 <huansic_motor_init+0xf2>
			hmotor->negTimer->Instance->CCR1 = 0;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2200      	movs	r2, #0
 8002362:	635a      	str	r2, [r3, #52]	; 0x34
 8002364:	e01c      	b.n	80023a0 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	2b04      	cmp	r3, #4
 800236c:	d105      	bne.n	800237a <huansic_motor_init+0x106>
			hmotor->negTimer->Instance->CCR2 = 0;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2200      	movs	r2, #0
 8002376:	639a      	str	r2, [r3, #56]	; 0x38
 8002378:	e012      	b.n	80023a0 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2b08      	cmp	r3, #8
 8002380:	d105      	bne.n	800238e <huansic_motor_init+0x11a>
			hmotor->negTimer->Instance->CCR3 = 0;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2200      	movs	r2, #0
 800238a:	63da      	str	r2, [r3, #60]	; 0x3c
 800238c:	e008      	b.n	80023a0 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	2b0c      	cmp	r3, #12
 8002394:	d104      	bne.n	80023a0 <huansic_motor_init+0x12c>
			hmotor->negTimer->Instance->CCR4 = 0;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2200      	movs	r2, #0
 800239e:	641a      	str	r2, [r3, #64]	; 0x40
		else
			;
	}
	// and start the counter and timer
	HAL_TIM_Encoder_Start(hmotor->counter, TIM_CHANNEL_ALL);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	213c      	movs	r1, #60	; 0x3c
 80023a6:	4618      	mov	r0, r3
 80023a8:	f006 fcc4 	bl	8008d34 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(hmotor->posTimer, hmotor->pos_channel);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4619      	mov	r1, r3
 80023b6:	4610      	mov	r0, r2
 80023b8:	f006 fb60 	bl	8008a7c <HAL_TIM_PWM_Start>
	if (hmotor->negTimer)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <huansic_motor_init+0x160>
		HAL_TIM_PWM_Start(hmotor->negTimer, hmotor->neg_channel);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	4619      	mov	r1, r3
 80023ce:	4610      	mov	r0, r2
 80023d0:	f006 fb54 	bl	8008a7c <HAL_TIM_PWM_Start>
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	0800d0a0 	.word	0x0800d0a0
 80023e0:	0800d148 	.word	0x0800d148
 80023e4:	0800d0b0 	.word	0x0800d0b0
 80023e8:	0800d0d0 	.word	0x0800d0d0
 80023ec:	0800d0e4 	.word	0x0800d0e4

080023f0 <huansic_motor_pid>:

void huansic_motor_pid(Motor_HandleTypeDef *hmotor) {
 80023f0:	b5b0      	push	{r4, r5, r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
	int16_t newTick = 0x0FFFF & hmotor->counter->Instance->CNT;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	82fb      	strh	r3, [r7, #22]
	if (hmotor->encoderInverted)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <huansic_motor_pid+0x24>
		newTick = -newTick;
 800240c:	8afb      	ldrh	r3, [r7, #22]
 800240e:	425b      	negs	r3, r3
 8002410:	b29b      	uxth	r3, r3
 8002412:	82fb      	strh	r3, [r7, #22]
	int16_t diffTick = newTick - hmotor->lastTick;
 8002414:	8afa      	ldrh	r2, [r7, #22]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	b29b      	uxth	r3, r3
 800241e:	82bb      	strh	r3, [r7, #20]

	hmotor->lastTick = newTick;
 8002420:	8afa      	ldrh	r2, [r7, #22]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	84da      	strh	r2, [r3, #38]	; 0x26

	hmotor->lastSpeed = (float) diffTick / hmotor->dt;
 8002426:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe fc84 	bl	8000d38 <__aeabi_i2f>
 8002430:	4602      	mov	r2, r0
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	4619      	mov	r1, r3
 8002438:	4610      	mov	r0, r2
 800243a:	f7fe fd85 	bl	8000f48 <__aeabi_fdiv>
 800243e:	4603      	mov	r3, r0
 8002440:	461a      	mov	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	62da      	str	r2, [r3, #44]	; 0x2c
	hmotor->last5Speed = (4.0 * hmotor->last5Speed + hmotor->lastSpeed) / 5.0;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	4618      	mov	r0, r3
 800244c:	f7fe f850 	bl	80004f0 <__aeabi_f2d>
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	4b93      	ldr	r3, [pc, #588]	; (80026a4 <huansic_motor_pid+0x2b4>)
 8002456:	f7fe f8a3 	bl	80005a0 <__aeabi_dmul>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4614      	mov	r4, r2
 8002460:	461d      	mov	r5, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe f842 	bl	80004f0 <__aeabi_f2d>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4620      	mov	r0, r4
 8002472:	4629      	mov	r1, r5
 8002474:	f7fd fede 	bl	8000234 <__adddf3>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4610      	mov	r0, r2
 800247e:	4619      	mov	r1, r3
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	4b88      	ldr	r3, [pc, #544]	; (80026a8 <huansic_motor_pid+0x2b8>)
 8002486:	f7fe f9b5 	bl	80007f4 <__aeabi_ddiv>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4610      	mov	r0, r2
 8002490:	4619      	mov	r1, r3
 8002492:	f7fe fb47 	bl	8000b24 <__aeabi_d2f>
 8002496:	4602      	mov	r2, r0
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	631a      	str	r2, [r3, #48]	; 0x30

	// Derivative
	float dError = hmotor->lastError - (hmotor->goalSpeed - hmotor->lastSpeed);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a8:	4619      	mov	r1, r3
 80024aa:	4610      	mov	r0, r2
 80024ac:	f7fe fb8e 	bl	8000bcc <__aeabi_fsub>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4619      	mov	r1, r3
 80024b4:	4620      	mov	r0, r4
 80024b6:	f7fe fb89 	bl	8000bcc <__aeabi_fsub>
 80024ba:	4603      	mov	r3, r0
 80024bc:	613b      	str	r3, [r7, #16]

	// Proportional
	hmotor->lastError = hmotor->goalSpeed - hmotor->lastSpeed;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c6:	4619      	mov	r1, r3
 80024c8:	4610      	mov	r0, r2
 80024ca:	f7fe fb7f 	bl	8000bcc <__aeabi_fsub>
 80024ce:	4603      	mov	r3, r0
 80024d0:	461a      	mov	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	629a      	str	r2, [r3, #40]	; 0x28

	// Integral
	hmotor->sumError += hmotor->lastError;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024de:	4619      	mov	r1, r3
 80024e0:	4610      	mov	r0, r2
 80024e2:	f7fe fb75 	bl	8000bd0 <__addsf3>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461a      	mov	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	635a      	str	r2, [r3, #52]	; 0x34

	// calculate and constrain the duty cycle
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695a      	ldr	r2, [r3, #20]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f6:	4619      	mov	r1, r3
 80024f8:	4610      	mov	r0, r2
 80024fa:	f7fe fc71 	bl	8000de0 <__aeabi_fmul>
 80024fe:	4603      	mov	r3, r0
 8002500:	461c      	mov	r4, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699a      	ldr	r2, [r3, #24]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800250a:	4619      	mov	r1, r3
 800250c:	4610      	mov	r0, r2
 800250e:	f7fe fc67 	bl	8000de0 <__aeabi_fmul>
 8002512:	4603      	mov	r3, r0
 8002514:	4619      	mov	r1, r3
 8002516:	4620      	mov	r0, r4
 8002518:	f7fe fb5a 	bl	8000bd0 <__addsf3>
 800251c:	4603      	mov	r3, r0
 800251e:	461c      	mov	r4, r3
			+ hmotor->kd * dError;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	6939      	ldr	r1, [r7, #16]
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe fc5a 	bl	8000de0 <__aeabi_fmul>
 800252c:	4603      	mov	r3, r0
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 800252e:	4619      	mov	r1, r3
 8002530:	4620      	mov	r0, r4
 8002532:	f7fe fb4d 	bl	8000bd0 <__addsf3>
 8002536:	4603      	mov	r3, r0
 8002538:	60fb      	str	r3, [r7, #12]
	foutput = foutput > 1.0 ? 1.0 : (foutput < -1.0 ? -1.0 : foutput);
 800253a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f7fe fe0a 	bl	8001158 <__aeabi_fcmpgt>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <huansic_motor_pid+0x160>
 800254a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800254e:	e009      	b.n	8002564 <huansic_motor_pid+0x174>
 8002550:	4956      	ldr	r1, [pc, #344]	; (80026ac <huansic_motor_pid+0x2bc>)
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f7fe fde2 	bl	800111c <__aeabi_fcmplt>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <huansic_motor_pid+0x172>
 800255e:	4b53      	ldr	r3, [pc, #332]	; (80026ac <huansic_motor_pid+0x2bc>)
 8002560:	e000      	b.n	8002564 <huansic_motor_pid+0x174>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	60fb      	str	r3, [r7, #12]

	// output to the timers
	uint16_t posoutput = foutput > 0 ? roundf(fabsf(foutput) * hmotor->posTimer->Instance->ARR) : 0;
 8002566:	f04f 0100 	mov.w	r1, #0
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f7fe fdf4 	bl	8001158 <__aeabi_fcmpgt>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d019      	beq.n	80025aa <huansic_motor_pid+0x1ba>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	4618      	mov	r0, r3
 8002586:	f7fe fbd3 	bl	8000d30 <__aeabi_ui2f>
 800258a:	4603      	mov	r3, r0
 800258c:	4619      	mov	r1, r3
 800258e:	4620      	mov	r0, r4
 8002590:	f7fe fc26 	bl	8000de0 <__aeabi_fmul>
 8002594:	4603      	mov	r3, r0
 8002596:	4618      	mov	r0, r3
 8002598:	f009 fda0 	bl	800c0dc <roundf>
 800259c:	4603      	mov	r3, r0
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fe0a 	bl	80011b8 <__aeabi_f2uiz>
 80025a4:	4603      	mov	r3, r0
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	e000      	b.n	80025ac <huansic_motor_pid+0x1bc>
 80025aa:	2300      	movs	r3, #0
 80025ac:	817b      	strh	r3, [r7, #10]
	uint16_t negoutput = foutput < 0 ? roundf(fabsf(foutput) * hmotor->negTimer->Instance->ARR) : 0;
 80025ae:	f04f 0100 	mov.w	r1, #0
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f7fe fdb2 	bl	800111c <__aeabi_fcmplt>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d019      	beq.n	80025f2 <huansic_motor_pid+0x202>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe fbaf 	bl	8000d30 <__aeabi_ui2f>
 80025d2:	4603      	mov	r3, r0
 80025d4:	4619      	mov	r1, r3
 80025d6:	4620      	mov	r0, r4
 80025d8:	f7fe fc02 	bl	8000de0 <__aeabi_fmul>
 80025dc:	4603      	mov	r3, r0
 80025de:	4618      	mov	r0, r3
 80025e0:	f009 fd7c 	bl	800c0dc <roundf>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe fde6 	bl	80011b8 <__aeabi_f2uiz>
 80025ec:	4603      	mov	r3, r0
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	e000      	b.n	80025f4 <huansic_motor_pid+0x204>
 80025f2:	2300      	movs	r3, #0
 80025f4:	813b      	strh	r3, [r7, #8]

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d105      	bne.n	800260a <huansic_motor_pid+0x21a>
		hmotor->posTimer->Instance->CCR1 = posoutput;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	897a      	ldrh	r2, [r7, #10]
 8002606:	635a      	str	r2, [r3, #52]	; 0x34
 8002608:	e01c      	b.n	8002644 <huansic_motor_pid+0x254>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2b04      	cmp	r3, #4
 8002610:	d105      	bne.n	800261e <huansic_motor_pid+0x22e>
		hmotor->posTimer->Instance->CCR2 = posoutput;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	897a      	ldrh	r2, [r7, #10]
 800261a:	639a      	str	r2, [r3, #56]	; 0x38
 800261c:	e012      	b.n	8002644 <huansic_motor_pid+0x254>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	2b08      	cmp	r3, #8
 8002624:	d105      	bne.n	8002632 <huansic_motor_pid+0x242>
		hmotor->posTimer->Instance->CCR3 = posoutput;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	897a      	ldrh	r2, [r7, #10]
 800262e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002630:	e008      	b.n	8002644 <huansic_motor_pid+0x254>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	2b0c      	cmp	r3, #12
 8002638:	d104      	bne.n	8002644 <huansic_motor_pid+0x254>
		hmotor->posTimer->Instance->CCR4 = posoutput;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	897a      	ldrh	r2, [r7, #10]
 8002642:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d026      	beq.n	800269a <huansic_motor_pid+0x2aa>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d105      	bne.n	8002660 <huansic_motor_pid+0x270>
			hmotor->negTimer->Instance->CCR1 = negoutput;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	893a      	ldrh	r2, [r7, #8]
 800265c:	635a      	str	r2, [r3, #52]	; 0x34
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
			hmotor->negTimer->Instance->CCR4 = negoutput;
		else
			;
	}
}
 800265e:	e01c      	b.n	800269a <huansic_motor_pid+0x2aa>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	2b04      	cmp	r3, #4
 8002666:	d105      	bne.n	8002674 <huansic_motor_pid+0x284>
			hmotor->negTimer->Instance->CCR2 = negoutput;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	893a      	ldrh	r2, [r7, #8]
 8002670:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002672:	e012      	b.n	800269a <huansic_motor_pid+0x2aa>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	2b08      	cmp	r3, #8
 800267a:	d105      	bne.n	8002688 <huansic_motor_pid+0x298>
			hmotor->negTimer->Instance->CCR3 = negoutput;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	893a      	ldrh	r2, [r7, #8]
 8002684:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002686:	e008      	b.n	800269a <huansic_motor_pid+0x2aa>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	2b0c      	cmp	r3, #12
 800268e:	d104      	bne.n	800269a <huansic_motor_pid+0x2aa>
			hmotor->negTimer->Instance->CCR4 = negoutput;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	893a      	ldrh	r2, [r7, #8]
 8002698:	641a      	str	r2, [r3, #64]	; 0x40
}
 800269a:	bf00      	nop
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bdb0      	pop	{r4, r5, r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40100000 	.word	0x40100000
 80026a8:	40140000 	.word	0x40140000
 80026ac:	bf800000 	.word	0xbf800000

080026b0 <custom_order_new_failed>:
extern uint8_t delivering_num;
extern uint8_t allyBeacons_num;
extern uint8_t oppoBeacons_num;
uint8_t zigbeeSend[6] = { 0x55, 0xAA, 0x00, 0x00, 0x00, 0x00 };  //小车可能发送的信息（0x00:请求游戏信息 0x02:设置充电桩）

__weak void custom_order_new_failed(uint8_t id) {
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]

}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr

080026c4 <huansic_xb_init>:

void huansic_xb_init(XB_HandleTypeDef *hxb) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
	hxb->pending_alignment = 0;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	hxb->nextPackageID = 0x00;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	731a      	strb	r2, [r3, #12]
	hxb->nextPackageLength = 6;		// header length
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2206      	movs	r2, #6
 80026de:	735a      	strb	r2, [r3, #13]
	// flush UART buffer
	uint8_t temp = hxb->huart->Instance->SR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	73fb      	strb	r3, [r7, #15]
	temp = hxb->huart->Instance->DR;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	73fb      	strb	r3, [r7, #15]
	temp = hxb->huart->Instance->DR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	73fb      	strb	r3, [r7, #15]
	(void) temp;
	HAL_UART_Receive_DMA(hxb->huart, &hxb->buffer[0], hxb->nextPackageLength);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f103 010e 	add.w	r1, r3, #14
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	7b5b      	ldrb	r3, [r3, #13]
 800270c:	b29b      	uxth	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	f007 fb43 	bl	8009d9a <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(hxb->hdma, DMA_IT_HT);		// disable half transfer interrupt
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0204 	bic.w	r2, r2, #4
 8002726:	601a      	str	r2, [r3, #0]
}
 8002728:	bf00      	nop
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <huansic_xb_decodeHeader>:

enum XB_STATUS huansic_xb_decodeHeader(XB_HandleTypeDef *hxb) {
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
	if (!hxb)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <huansic_xb_decodeHeader+0x12>
		return XB_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e09d      	b.n	800287e <huansic_xb_decodeHeader+0x14e>

	// record checksum
	hxb->checksum = hxb->buffer[5];
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	7cda      	ldrb	r2, [r3, #19]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8

	// get and check packet ID
	if (hxb->buffer[2] != 0x01 && hxb->buffer[2] != 0x05) {
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	7c1b      	ldrb	r3, [r3, #16]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d015      	beq.n	8002780 <huansic_xb_decodeHeader+0x50>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	7c1b      	ldrb	r3, [r3, #16]
 8002758:	2b05      	cmp	r3, #5
 800275a:	d011      	beq.n	8002780 <huansic_xb_decodeHeader+0x50>
		hxb->pending_alignment = 1;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
		hxb->lastByte = 0x00;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
		HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);		// check next byte
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	330e      	adds	r3, #14
 8002774:	2201      	movs	r2, #1
 8002776:	4619      	mov	r1, r3
 8002778:	f007 fadf 	bl	8009d3a <HAL_UART_Receive_IT>
		return XB_ID_ERROR;
 800277c:	2306      	movs	r3, #6
 800277e:	e07e      	b.n	800287e <huansic_xb_decodeHeader+0x14e>
	}
	hxb->nextPackageID = hxb->buffer[2];
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	7c1a      	ldrb	r2, [r3, #16]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	731a      	strb	r2, [r3, #12]

	// read next package length
	hxb->nextPackageLength = hxb->buffer[3]; // the length shall not be longer than 255 (the max possible is 225)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	7c5a      	ldrb	r2, [r3, #17]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	735a      	strb	r2, [r3, #13]

	// set up next DMA
	// check if overrun occurred
	if (__HAL_UART_GET_FLAG(hxb->huart, UART_FLAG_ORE)) {
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b08      	cmp	r3, #8
 800279e:	d133      	bne.n	8002808 <huansic_xb_decodeHeader+0xd8>
		// perform the clear flag sequence and read the overrun data
		volatile uint8_t i = hxb->huart->Instance->SR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	73fb      	strb	r3, [r7, #15]
		hxb->buffer[0] = hxb->huart->Instance->DR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	739a      	strb	r2, [r3, #14]
		(void) i;
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
		while (!__HAL_UART_GET_FLAG(hxb->huart, UART_FLAG_RXNE))
 80027bc:	bf00      	nop
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0320 	and.w	r3, r3, #32
 80027ca:	2b20      	cmp	r3, #32
 80027cc:	d1f7      	bne.n	80027be <huansic_xb_decodeHeader+0x8e>
			;		// wait for the data in shift register to move into data register
		hxb->buffer[1] = hxb->huart->Instance->DR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	73da      	strb	r2, [r3, #15]
		HAL_UART_Receive_DMA(hxb->huart, &hxb->buffer[2],
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6818      	ldr	r0, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f103 0110 	add.w	r1, r3, #16
				hxb->nextPackageLength < 2 ? hxb->nextPackageLength : (hxb->nextPackageLength - 2));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	7b5b      	ldrb	r3, [r3, #13]
		HAL_UART_Receive_DMA(hxb->huart, &hxb->buffer[2],
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d803      	bhi.n	80027f6 <huansic_xb_decodeHeader+0xc6>
				hxb->nextPackageLength < 2 ? hxb->nextPackageLength : (hxb->nextPackageLength - 2));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	7b5b      	ldrb	r3, [r3, #13]
		HAL_UART_Receive_DMA(hxb->huart, &hxb->buffer[2],
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	e004      	b.n	8002800 <huansic_xb_decodeHeader+0xd0>
				hxb->nextPackageLength < 2 ? hxb->nextPackageLength : (hxb->nextPackageLength - 2));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	7b5b      	ldrb	r3, [r3, #13]
 80027fa:	b29b      	uxth	r3, r3
		HAL_UART_Receive_DMA(hxb->huart, &hxb->buffer[2],
 80027fc:	3b02      	subs	r3, #2
 80027fe:	b29b      	uxth	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	f007 faca 	bl	8009d9a <HAL_UART_Receive_DMA>
 8002806:	e02f      	b.n	8002868 <huansic_xb_decodeHeader+0x138>
	}

	// check if RX buffer is empty
	else if (__HAL_UART_GET_FLAG(hxb->huart, UART_FLAG_RXNE)) {
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0320 	and.w	r3, r3, #32
 8002814:	2b20      	cmp	r3, #32
 8002816:	d11c      	bne.n	8002852 <huansic_xb_decodeHeader+0x122>
		hxb->buffer[0] = hxb->huart->Instance->DR;		// read data
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	b2da      	uxtb	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	739a      	strb	r2, [r3, #14]
		HAL_UART_Receive_DMA(hxb->huart, &hxb->buffer[1],
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6818      	ldr	r0, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f103 010f 	add.w	r1, r3, #15
				hxb->nextPackageLength < 1 ? hxb->nextPackageLength : (hxb->nextPackageLength - 1));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	7b5b      	ldrb	r3, [r3, #13]
		HAL_UART_Receive_DMA(hxb->huart, &hxb->buffer[1],
 8002834:	2b00      	cmp	r3, #0
 8002836:	d103      	bne.n	8002840 <huansic_xb_decodeHeader+0x110>
				hxb->nextPackageLength < 1 ? hxb->nextPackageLength : (hxb->nextPackageLength - 1));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	7b5b      	ldrb	r3, [r3, #13]
		HAL_UART_Receive_DMA(hxb->huart, &hxb->buffer[1],
 800283c:	b29b      	uxth	r3, r3
 800283e:	e004      	b.n	800284a <huansic_xb_decodeHeader+0x11a>
				hxb->nextPackageLength < 1 ? hxb->nextPackageLength : (hxb->nextPackageLength - 1));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	7b5b      	ldrb	r3, [r3, #13]
 8002844:	b29b      	uxth	r3, r3
		HAL_UART_Receive_DMA(hxb->huart, &hxb->buffer[1],
 8002846:	3b01      	subs	r3, #1
 8002848:	b29b      	uxth	r3, r3
 800284a:	461a      	mov	r2, r3
 800284c:	f007 faa5 	bl	8009d9a <HAL_UART_Receive_DMA>
 8002850:	e00a      	b.n	8002868 <huansic_xb_decodeHeader+0x138>
	}

	// otherwise, receive normally
	else {
		HAL_UART_Receive_DMA(hxb->huart, &hxb->buffer[0], hxb->nextPackageLength);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f103 010e 	add.w	r1, r3, #14
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	7b5b      	ldrb	r3, [r3, #13]
 8002860:	b29b      	uxth	r3, r3
 8002862:	461a      	mov	r2, r3
 8002864:	f007 fa99 	bl	8009d9a <HAL_UART_Receive_DMA>
	}

	__HAL_DMA_DISABLE_IT(hxb->hdma, DMA_IT_HT);		// disable half transfer interrupt
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0204 	bic.w	r2, r2, #4
 800287a:	601a      	str	r2, [r3, #0]

	return XB_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <huansic_xb_decodeBody>:

enum XB_STATUS huansic_xb_decodeBody(XB_HandleTypeDef *hxb) {
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
	uint8_t listLength = 0, i, j, index = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	76fb      	strb	r3, [r7, #27]
 8002894:	2300      	movs	r3, #0
 8002896:	777b      	strb	r3, [r7, #29]
	uint32_t temp;

	if (!hxb)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d102      	bne.n	80028a4 <huansic_xb_decodeBody+0x1c>
		return XB_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	f000 bd68 	b.w	8003374 <huansic_xb_decodeBody+0xaec>

	// checksum
	for (i = 0, j = 0; i < hxb->nextPackageLength; i++)
 80028a4:	2300      	movs	r3, #0
 80028a6:	77fb      	strb	r3, [r7, #31]
 80028a8:	2300      	movs	r3, #0
 80028aa:	77bb      	strb	r3, [r7, #30]
 80028ac:	e009      	b.n	80028c2 <huansic_xb_decodeBody+0x3a>
		j ^= hxb->buffer[i];
 80028ae:	7ffb      	ldrb	r3, [r7, #31]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	4413      	add	r3, r2
 80028b4:	7b9a      	ldrb	r2, [r3, #14]
 80028b6:	7fbb      	ldrb	r3, [r7, #30]
 80028b8:	4053      	eors	r3, r2
 80028ba:	77bb      	strb	r3, [r7, #30]
	for (i = 0, j = 0; i < hxb->nextPackageLength; i++)
 80028bc:	7ffb      	ldrb	r3, [r7, #31]
 80028be:	3301      	adds	r3, #1
 80028c0:	77fb      	strb	r3, [r7, #31]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	7b5b      	ldrb	r3, [r3, #13]
 80028c6:	7ffa      	ldrb	r2, [r7, #31]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d3f0      	bcc.n	80028ae <huansic_xb_decodeBody+0x26>

	if (j != hxb->checksum) {
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 80028d2:	7fba      	ldrb	r2, [r7, #30]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d012      	beq.n	80028fe <huansic_xb_decodeBody+0x76>
		hxb->pending_alignment = 1;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
		hxb->lastByte = 0x00;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
		HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);		// check next byte
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	330e      	adds	r3, #14
 80028f0:	2201      	movs	r2, #1
 80028f2:	4619      	mov	r1, r3
 80028f4:	f007 fa21 	bl	8009d3a <HAL_UART_Receive_IT>
		return XB_SUM_ERROR;
 80028f8:	2304      	movs	r3, #4
 80028fa:	f000 bd3b 	b.w	8003374 <huansic_xb_decodeBody+0xaec>
	}

	if (hxb->nextPackageID == 0x01) {		// game information
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	7b1b      	ldrb	r3, [r3, #12]
 8002902:	2b01      	cmp	r3, #1
 8002904:	f040 816e 	bne.w	8002be4 <huansic_xb_decodeBody+0x35c>
		/* game stage */
		gameStage = hxb->buffer[index++];		// 0
 8002908:	7f7b      	ldrb	r3, [r7, #29]
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	777a      	strb	r2, [r7, #29]
 800290e:	461a      	mov	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4413      	add	r3, r2
 8002914:	7b9a      	ldrb	r2, [r3, #14]
 8002916:	4b89      	ldr	r3, [pc, #548]	; (8002b3c <huansic_xb_decodeBody+0x2b4>)
 8002918:	701a      	strb	r2, [r3, #0]

		/* barrier list */
		// listLength = hxb->buffer[index];		// the length is fixed to 5
		index++;
 800291a:	7f7b      	ldrb	r3, [r7, #29]
 800291c:	3301      	adds	r3, #1
 800291e:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < 5; i++) {
 8002920:	2300      	movs	r3, #0
 8002922:	77fb      	strb	r3, [r7, #31]
 8002924:	e06a      	b.n	80029fc <huansic_xb_decodeBody+0x174>
			obstacles[i].coord1.x = (uint16_t) hxb->buffer[index + 1] << 8;
 8002926:	7f7b      	ldrb	r3, [r7, #29]
 8002928:	3301      	adds	r3, #1
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	7b9b      	ldrb	r3, [r3, #14]
 8002930:	021a      	lsls	r2, r3, #8
 8002932:	7ffb      	ldrb	r3, [r7, #31]
 8002934:	b211      	sxth	r1, r2
 8002936:	4a82      	ldr	r2, [pc, #520]	; (8002b40 <huansic_xb_decodeBody+0x2b8>)
 8002938:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			obstacles[i].coord1.x = hxb->buffer[index];
 800293c:	7f7b      	ldrb	r3, [r7, #29]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	4413      	add	r3, r2
 8002942:	7b9a      	ldrb	r2, [r3, #14]
 8002944:	7ffb      	ldrb	r3, [r7, #31]
 8002946:	b211      	sxth	r1, r2
 8002948:	4a7d      	ldr	r2, [pc, #500]	; (8002b40 <huansic_xb_decodeBody+0x2b8>)
 800294a:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			index += 2;
 800294e:	7f7b      	ldrb	r3, [r7, #29]
 8002950:	3302      	adds	r3, #2
 8002952:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.y = (uint16_t) hxb->buffer[index + 1] << 8;
 8002954:	7f7b      	ldrb	r3, [r7, #29]
 8002956:	3301      	adds	r3, #1
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	4413      	add	r3, r2
 800295c:	7b9b      	ldrb	r3, [r3, #14]
 800295e:	021a      	lsls	r2, r3, #8
 8002960:	7ffb      	ldrb	r3, [r7, #31]
 8002962:	b211      	sxth	r1, r2
 8002964:	4a76      	ldr	r2, [pc, #472]	; (8002b40 <huansic_xb_decodeBody+0x2b8>)
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4413      	add	r3, r2
 800296a:	460a      	mov	r2, r1
 800296c:	805a      	strh	r2, [r3, #2]
			obstacles[i].coord1.y = hxb->buffer[index];
 800296e:	7f7b      	ldrb	r3, [r7, #29]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	4413      	add	r3, r2
 8002974:	7b9a      	ldrb	r2, [r3, #14]
 8002976:	7ffb      	ldrb	r3, [r7, #31]
 8002978:	b211      	sxth	r1, r2
 800297a:	4a71      	ldr	r2, [pc, #452]	; (8002b40 <huansic_xb_decodeBody+0x2b8>)
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4413      	add	r3, r2
 8002980:	460a      	mov	r2, r1
 8002982:	805a      	strh	r2, [r3, #2]
			index += 2;
 8002984:	7f7b      	ldrb	r3, [r7, #29]
 8002986:	3302      	adds	r3, #2
 8002988:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.x = (uint16_t) hxb->buffer[index + 1] << 8;
 800298a:	7f7b      	ldrb	r3, [r7, #29]
 800298c:	3301      	adds	r3, #1
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	4413      	add	r3, r2
 8002992:	7b9b      	ldrb	r3, [r3, #14]
 8002994:	021a      	lsls	r2, r3, #8
 8002996:	7ffb      	ldrb	r3, [r7, #31]
 8002998:	b211      	sxth	r1, r2
 800299a:	4a69      	ldr	r2, [pc, #420]	; (8002b40 <huansic_xb_decodeBody+0x2b8>)
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4413      	add	r3, r2
 80029a0:	460a      	mov	r2, r1
 80029a2:	809a      	strh	r2, [r3, #4]
			obstacles[i].coord2.x = hxb->buffer[index];
 80029a4:	7f7b      	ldrb	r3, [r7, #29]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	4413      	add	r3, r2
 80029aa:	7b9a      	ldrb	r2, [r3, #14]
 80029ac:	7ffb      	ldrb	r3, [r7, #31]
 80029ae:	b211      	sxth	r1, r2
 80029b0:	4a63      	ldr	r2, [pc, #396]	; (8002b40 <huansic_xb_decodeBody+0x2b8>)
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4413      	add	r3, r2
 80029b6:	460a      	mov	r2, r1
 80029b8:	809a      	strh	r2, [r3, #4]
			index += 2;
 80029ba:	7f7b      	ldrb	r3, [r7, #29]
 80029bc:	3302      	adds	r3, #2
 80029be:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.y = (uint16_t) hxb->buffer[index + 1] << 8;
 80029c0:	7f7b      	ldrb	r3, [r7, #29]
 80029c2:	3301      	adds	r3, #1
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	4413      	add	r3, r2
 80029c8:	7b9b      	ldrb	r3, [r3, #14]
 80029ca:	021a      	lsls	r2, r3, #8
 80029cc:	7ffb      	ldrb	r3, [r7, #31]
 80029ce:	b211      	sxth	r1, r2
 80029d0:	4a5b      	ldr	r2, [pc, #364]	; (8002b40 <huansic_xb_decodeBody+0x2b8>)
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4413      	add	r3, r2
 80029d6:	460a      	mov	r2, r1
 80029d8:	80da      	strh	r2, [r3, #6]
			obstacles[i].coord2.y = hxb->buffer[index];
 80029da:	7f7b      	ldrb	r3, [r7, #29]
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	4413      	add	r3, r2
 80029e0:	7b9a      	ldrb	r2, [r3, #14]
 80029e2:	7ffb      	ldrb	r3, [r7, #31]
 80029e4:	b211      	sxth	r1, r2
 80029e6:	4a56      	ldr	r2, [pc, #344]	; (8002b40 <huansic_xb_decodeBody+0x2b8>)
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4413      	add	r3, r2
 80029ec:	460a      	mov	r2, r1
 80029ee:	80da      	strh	r2, [r3, #6]
			index += 2;
 80029f0:	7f7b      	ldrb	r3, [r7, #29]
 80029f2:	3302      	adds	r3, #2
 80029f4:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < 5; i++) {
 80029f6:	7ffb      	ldrb	r3, [r7, #31]
 80029f8:	3301      	adds	r3, #1
 80029fa:	77fb      	strb	r3, [r7, #31]
 80029fc:	7ffb      	ldrb	r3, [r7, #31]
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d991      	bls.n	8002926 <huansic_xb_decodeBody+0x9e>
		}		//2 ~ 41

		/* total time of this round */
		gameStageTimeLimit = hxb->buffer[index + 3];
 8002a02:	7f7b      	ldrb	r3, [r7, #29]
 8002a04:	3303      	adds	r3, #3
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	7b9b      	ldrb	r3, [r3, #14]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4b4d      	ldr	r3, [pc, #308]	; (8002b44 <huansic_xb_decodeBody+0x2bc>)
 8002a10:	601a      	str	r2, [r3, #0]
		gameStageTimeLimit <<= 8;
 8002a12:	4b4c      	ldr	r3, [pc, #304]	; (8002b44 <huansic_xb_decodeBody+0x2bc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	021b      	lsls	r3, r3, #8
 8002a18:	4a4a      	ldr	r2, [pc, #296]	; (8002b44 <huansic_xb_decodeBody+0x2bc>)
 8002a1a:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index + 2];
 8002a1c:	7f7b      	ldrb	r3, [r7, #29]
 8002a1e:	3302      	adds	r3, #2
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	4413      	add	r3, r2
 8002a24:	7b9b      	ldrb	r3, [r3, #14]
 8002a26:	461a      	mov	r2, r3
 8002a28:	4b46      	ldr	r3, [pc, #280]	; (8002b44 <huansic_xb_decodeBody+0x2bc>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	4a45      	ldr	r2, [pc, #276]	; (8002b44 <huansic_xb_decodeBody+0x2bc>)
 8002a30:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8002a32:	4b44      	ldr	r3, [pc, #272]	; (8002b44 <huansic_xb_decodeBody+0x2bc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	4a42      	ldr	r2, [pc, #264]	; (8002b44 <huansic_xb_decodeBody+0x2bc>)
 8002a3a:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index + 1];
 8002a3c:	7f7b      	ldrb	r3, [r7, #29]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	4413      	add	r3, r2
 8002a44:	7b9b      	ldrb	r3, [r3, #14]
 8002a46:	461a      	mov	r2, r3
 8002a48:	4b3e      	ldr	r3, [pc, #248]	; (8002b44 <huansic_xb_decodeBody+0x2bc>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	4a3d      	ldr	r2, [pc, #244]	; (8002b44 <huansic_xb_decodeBody+0x2bc>)
 8002a50:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8002a52:	4b3c      	ldr	r3, [pc, #240]	; (8002b44 <huansic_xb_decodeBody+0x2bc>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	021b      	lsls	r3, r3, #8
 8002a58:	4a3a      	ldr	r2, [pc, #232]	; (8002b44 <huansic_xb_decodeBody+0x2bc>)
 8002a5a:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index];
 8002a5c:	7f7b      	ldrb	r3, [r7, #29]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	4413      	add	r3, r2
 8002a62:	7b9b      	ldrb	r3, [r3, #14]
 8002a64:	461a      	mov	r2, r3
 8002a66:	4b37      	ldr	r3, [pc, #220]	; (8002b44 <huansic_xb_decodeBody+0x2bc>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	4a35      	ldr	r2, [pc, #212]	; (8002b44 <huansic_xb_decodeBody+0x2bc>)
 8002a6e:	6013      	str	r3, [r2, #0]
		index += 4;		// 42 ~ 45
 8002a70:	7f7b      	ldrb	r3, [r7, #29]
 8002a72:	3304      	adds	r3, #4
 8002a74:	777b      	strb	r3, [r7, #29]

		/* ally beacons */
		listLength = hxb->buffer[index++];		//46
 8002a76:	7f7b      	ldrb	r3, [r7, #29]
 8002a78:	1c5a      	adds	r2, r3, #1
 8002a7a:	777a      	strb	r2, [r7, #29]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4413      	add	r3, r2
 8002a82:	7b9b      	ldrb	r3, [r3, #14]
 8002a84:	76fb      	strb	r3, [r7, #27]
		allyBeacons_num = listLength;
 8002a86:	4a30      	ldr	r2, [pc, #192]	; (8002b48 <huansic_xb_decodeBody+0x2c0>)
 8002a88:	7efb      	ldrb	r3, [r7, #27]
 8002a8a:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < listLength; i++) {
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	77fb      	strb	r3, [r7, #31]
 8002a90:	e042      	b.n	8002b18 <huansic_xb_decodeBody+0x290>
			allyBeacons[i].x = (uint16_t) hxb->buffer[index + 1] << 8;
 8002a92:	7f7b      	ldrb	r3, [r7, #29]
 8002a94:	3301      	adds	r3, #1
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	7b9b      	ldrb	r3, [r3, #14]
 8002a9c:	021a      	lsls	r2, r3, #8
 8002a9e:	7ffb      	ldrb	r3, [r7, #31]
 8002aa0:	b211      	sxth	r1, r2
 8002aa2:	4a2a      	ldr	r2, [pc, #168]	; (8002b4c <huansic_xb_decodeBody+0x2c4>)
 8002aa4:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			allyBeacons[i].x |= hxb->buffer[index];
 8002aa8:	7ffb      	ldrb	r3, [r7, #31]
 8002aaa:	4a28      	ldr	r2, [pc, #160]	; (8002b4c <huansic_xb_decodeBody+0x2c4>)
 8002aac:	f932 1023 	ldrsh.w	r1, [r2, r3, lsl #2]
 8002ab0:	7f7b      	ldrb	r3, [r7, #29]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	7b9b      	ldrb	r3, [r3, #14]
 8002ab8:	b21a      	sxth	r2, r3
 8002aba:	7ffb      	ldrb	r3, [r7, #31]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	b211      	sxth	r1, r2
 8002ac0:	4a22      	ldr	r2, [pc, #136]	; (8002b4c <huansic_xb_decodeBody+0x2c4>)
 8002ac2:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8002ac6:	7f7b      	ldrb	r3, [r7, #29]
 8002ac8:	3302      	adds	r3, #2
 8002aca:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].y = (uint16_t) hxb->buffer[index + 1] << 8;
 8002acc:	7f7b      	ldrb	r3, [r7, #29]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	7b9b      	ldrb	r3, [r3, #14]
 8002ad6:	021a      	lsls	r2, r3, #8
 8002ad8:	7ffb      	ldrb	r3, [r7, #31]
 8002ada:	b211      	sxth	r1, r2
 8002adc:	4a1b      	ldr	r2, [pc, #108]	; (8002b4c <huansic_xb_decodeBody+0x2c4>)
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	460a      	mov	r2, r1
 8002ae4:	805a      	strh	r2, [r3, #2]
			allyBeacons[i].y |= hxb->buffer[index];
 8002ae6:	7ffb      	ldrb	r3, [r7, #31]
 8002ae8:	4a18      	ldr	r2, [pc, #96]	; (8002b4c <huansic_xb_decodeBody+0x2c4>)
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8002af2:	7f7b      	ldrb	r3, [r7, #29]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	4413      	add	r3, r2
 8002af8:	7b9b      	ldrb	r3, [r3, #14]
 8002afa:	b21a      	sxth	r2, r3
 8002afc:	7ffb      	ldrb	r3, [r7, #31]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	b211      	sxth	r1, r2
 8002b02:	4a12      	ldr	r2, [pc, #72]	; (8002b4c <huansic_xb_decodeBody+0x2c4>)
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	460a      	mov	r2, r1
 8002b0a:	805a      	strh	r2, [r3, #2]
			index += 2;
 8002b0c:	7f7b      	ldrb	r3, [r7, #29]
 8002b0e:	3302      	adds	r3, #2
 8002b10:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < listLength; i++) {
 8002b12:	7ffb      	ldrb	r3, [r7, #31]
 8002b14:	3301      	adds	r3, #1
 8002b16:	77fb      	strb	r3, [r7, #31]
 8002b18:	7ffa      	ldrb	r2, [r7, #31]
 8002b1a:	7efb      	ldrb	r3, [r7, #27]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d3b8      	bcc.n	8002a92 <huansic_xb_decodeBody+0x20a>
		}

		/* opponent beacons */
		listLength = hxb->buffer[index++];
 8002b20:	7f7b      	ldrb	r3, [r7, #29]
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	777a      	strb	r2, [r7, #29]
 8002b26:	461a      	mov	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	7b9b      	ldrb	r3, [r3, #14]
 8002b2e:	76fb      	strb	r3, [r7, #27]
		oppoBeacons_num = listLength;
 8002b30:	4a07      	ldr	r2, [pc, #28]	; (8002b50 <huansic_xb_decodeBody+0x2c8>)
 8002b32:	7efb      	ldrb	r3, [r7, #27]
 8002b34:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < listLength; i++) {
 8002b36:	2300      	movs	r3, #0
 8002b38:	77fb      	strb	r3, [r7, #31]
 8002b3a:	e04e      	b.n	8002bda <huansic_xb_decodeBody+0x352>
 8002b3c:	20000fcc 	.word	0x20000fcc
 8002b40:	20000fd8 	.word	0x20000fd8
 8002b44:	20000fd0 	.word	0x20000fd0
 8002b48:	20001065 	.word	0x20001065
 8002b4c:	20001000 	.word	0x20001000
 8002b50:	20001066 	.word	0x20001066
			oppoBeacons[i].x = (uint16_t) hxb->buffer[index + 1] << 8;
 8002b54:	7f7b      	ldrb	r3, [r7, #29]
 8002b56:	3301      	adds	r3, #1
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	7b9b      	ldrb	r3, [r3, #14]
 8002b5e:	021a      	lsls	r2, r3, #8
 8002b60:	7ffb      	ldrb	r3, [r7, #31]
 8002b62:	b211      	sxth	r1, r2
 8002b64:	4a83      	ldr	r2, [pc, #524]	; (8002d74 <huansic_xb_decodeBody+0x4ec>)
 8002b66:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			oppoBeacons[i].x |= hxb->buffer[index];
 8002b6a:	7ffb      	ldrb	r3, [r7, #31]
 8002b6c:	4a81      	ldr	r2, [pc, #516]	; (8002d74 <huansic_xb_decodeBody+0x4ec>)
 8002b6e:	f932 1023 	ldrsh.w	r1, [r2, r3, lsl #2]
 8002b72:	7f7b      	ldrb	r3, [r7, #29]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	4413      	add	r3, r2
 8002b78:	7b9b      	ldrb	r3, [r3, #14]
 8002b7a:	b21a      	sxth	r2, r3
 8002b7c:	7ffb      	ldrb	r3, [r7, #31]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	b211      	sxth	r1, r2
 8002b82:	4a7c      	ldr	r2, [pc, #496]	; (8002d74 <huansic_xb_decodeBody+0x4ec>)
 8002b84:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8002b88:	7f7b      	ldrb	r3, [r7, #29]
 8002b8a:	3302      	adds	r3, #2
 8002b8c:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].y = (uint16_t) hxb->buffer[index + 1] << 8;
 8002b8e:	7f7b      	ldrb	r3, [r7, #29]
 8002b90:	3301      	adds	r3, #1
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	4413      	add	r3, r2
 8002b96:	7b9b      	ldrb	r3, [r3, #14]
 8002b98:	021a      	lsls	r2, r3, #8
 8002b9a:	7ffb      	ldrb	r3, [r7, #31]
 8002b9c:	b211      	sxth	r1, r2
 8002b9e:	4a75      	ldr	r2, [pc, #468]	; (8002d74 <huansic_xb_decodeBody+0x4ec>)
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	460a      	mov	r2, r1
 8002ba6:	805a      	strh	r2, [r3, #2]
			oppoBeacons[i].y |= hxb->buffer[index];
 8002ba8:	7ffb      	ldrb	r3, [r7, #31]
 8002baa:	4a72      	ldr	r2, [pc, #456]	; (8002d74 <huansic_xb_decodeBody+0x4ec>)
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8002bb4:	7f7b      	ldrb	r3, [r7, #29]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	4413      	add	r3, r2
 8002bba:	7b9b      	ldrb	r3, [r3, #14]
 8002bbc:	b21a      	sxth	r2, r3
 8002bbe:	7ffb      	ldrb	r3, [r7, #31]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	b211      	sxth	r1, r2
 8002bc4:	4a6b      	ldr	r2, [pc, #428]	; (8002d74 <huansic_xb_decodeBody+0x4ec>)
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	460a      	mov	r2, r1
 8002bcc:	805a      	strh	r2, [r3, #2]
			index += 2;
 8002bce:	7f7b      	ldrb	r3, [r7, #29]
 8002bd0:	3302      	adds	r3, #2
 8002bd2:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < listLength; i++) {
 8002bd4:	7ffb      	ldrb	r3, [r7, #31]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	77fb      	strb	r3, [r7, #31]
 8002bda:	7ffa      	ldrb	r2, [r7, #31]
 8002bdc:	7efb      	ldrb	r3, [r7, #27]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d3b8      	bcc.n	8002b54 <huansic_xb_decodeBody+0x2cc>
 8002be2:	e347      	b.n	8003274 <huansic_xb_decodeBody+0x9ec>
		}
	} else if (hxb->nextPackageID == 0x05) {		// game status
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	7b1b      	ldrb	r3, [r3, #12]
 8002be8:	2b05      	cmp	r3, #5
 8002bea:	f040 832e 	bne.w	800324a <huansic_xb_decodeBody+0x9c2>
		/* game status */
		gameStatus = hxb->buffer[index++];		//1
 8002bee:	7f7b      	ldrb	r3, [r7, #29]
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	777a      	strb	r2, [r7, #29]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	7b9a      	ldrb	r2, [r3, #14]
 8002bfc:	4b5e      	ldr	r3, [pc, #376]	; (8002d78 <huansic_xb_decodeBody+0x4f0>)
 8002bfe:	701a      	strb	r2, [r3, #0]

		/* time since round started */
		gameStageTimeSinceStart = hxb->buffer[index + 3];
 8002c00:	7f7b      	ldrb	r3, [r7, #29]
 8002c02:	3303      	adds	r3, #3
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	4413      	add	r3, r2
 8002c08:	7b9b      	ldrb	r3, [r3, #14]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	4b5b      	ldr	r3, [pc, #364]	; (8002d7c <huansic_xb_decodeBody+0x4f4>)
 8002c0e:	601a      	str	r2, [r3, #0]
		gameStageTimeSinceStart <<= 8;
 8002c10:	4b5a      	ldr	r3, [pc, #360]	; (8002d7c <huansic_xb_decodeBody+0x4f4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	021b      	lsls	r3, r3, #8
 8002c16:	4a59      	ldr	r2, [pc, #356]	; (8002d7c <huansic_xb_decodeBody+0x4f4>)
 8002c18:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index + 2];
 8002c1a:	7f7b      	ldrb	r3, [r7, #29]
 8002c1c:	3302      	adds	r3, #2
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4413      	add	r3, r2
 8002c22:	7b9b      	ldrb	r3, [r3, #14]
 8002c24:	461a      	mov	r2, r3
 8002c26:	4b55      	ldr	r3, [pc, #340]	; (8002d7c <huansic_xb_decodeBody+0x4f4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	4a53      	ldr	r2, [pc, #332]	; (8002d7c <huansic_xb_decodeBody+0x4f4>)
 8002c2e:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 8002c30:	4b52      	ldr	r3, [pc, #328]	; (8002d7c <huansic_xb_decodeBody+0x4f4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	021b      	lsls	r3, r3, #8
 8002c36:	4a51      	ldr	r2, [pc, #324]	; (8002d7c <huansic_xb_decodeBody+0x4f4>)
 8002c38:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index + 1];
 8002c3a:	7f7b      	ldrb	r3, [r7, #29]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	4413      	add	r3, r2
 8002c42:	7b9b      	ldrb	r3, [r3, #14]
 8002c44:	461a      	mov	r2, r3
 8002c46:	4b4d      	ldr	r3, [pc, #308]	; (8002d7c <huansic_xb_decodeBody+0x4f4>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	4a4b      	ldr	r2, [pc, #300]	; (8002d7c <huansic_xb_decodeBody+0x4f4>)
 8002c4e:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 8002c50:	4b4a      	ldr	r3, [pc, #296]	; (8002d7c <huansic_xb_decodeBody+0x4f4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	021b      	lsls	r3, r3, #8
 8002c56:	4a49      	ldr	r2, [pc, #292]	; (8002d7c <huansic_xb_decodeBody+0x4f4>)
 8002c58:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index];		//index = 1
 8002c5a:	7f7b      	ldrb	r3, [r7, #29]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	4413      	add	r3, r2
 8002c60:	7b9b      	ldrb	r3, [r3, #14]
 8002c62:	461a      	mov	r2, r3
 8002c64:	4b45      	ldr	r3, [pc, #276]	; (8002d7c <huansic_xb_decodeBody+0x4f4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	4a44      	ldr	r2, [pc, #272]	; (8002d7c <huansic_xb_decodeBody+0x4f4>)
 8002c6c:	6013      	str	r3, [r2, #0]
		gameStageTimeLeft = gameStageTimeLimit - gameStageTimeSinceStart;
 8002c6e:	4b44      	ldr	r3, [pc, #272]	; (8002d80 <huansic_xb_decodeBody+0x4f8>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	4b42      	ldr	r3, [pc, #264]	; (8002d7c <huansic_xb_decodeBody+0x4f4>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	4a42      	ldr	r2, [pc, #264]	; (8002d84 <huansic_xb_decodeBody+0x4fc>)
 8002c7a:	6013      	str	r3, [r2, #0]
		index += 4;		//5
 8002c7c:	7f7b      	ldrb	r3, [r7, #29]
 8002c7e:	3304      	adds	r3, #4
 8002c80:	777b      	strb	r3, [r7, #29]

		/* fetch score */
		temp = hxb->buffer[index + 3];
 8002c82:	7f7b      	ldrb	r3, [r7, #29]
 8002c84:	3303      	adds	r3, #3
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	4413      	add	r3, r2
 8002c8a:	7b9b      	ldrb	r3, [r3, #14]
 8002c8c:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	021b      	lsls	r3, r3, #8
 8002c92:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 2];
 8002c94:	7f7b      	ldrb	r3, [r7, #29]
 8002c96:	3302      	adds	r3, #2
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	7b9b      	ldrb	r3, [r3, #14]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	021b      	lsls	r3, r3, #8
 8002caa:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 1];
 8002cac:	7f7b      	ldrb	r3, [r7, #29]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	7b9b      	ldrb	r3, [r3, #14]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index];
 8002cc4:	7f7b      	ldrb	r3, [r7, #29]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	4413      	add	r3, r2
 8002cca:	7b9b      	ldrb	r3, [r3, #14]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
		myScore = *(float*) &temp;			// decode float from uint32
 8002cd4:	f107 0310 	add.w	r3, r7, #16
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a2b      	ldr	r2, [pc, #172]	; (8002d88 <huansic_xb_decodeBody+0x500>)
 8002cdc:	6013      	str	r3, [r2, #0]
		index += 4;			//9
 8002cde:	7f7b      	ldrb	r3, [r7, #29]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	777b      	strb	r3, [r7, #29]

		/* my position */
		myCoord.x = hxb->buffer[index + 1];
 8002ce4:	7f7b      	ldrb	r3, [r7, #29]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	4413      	add	r3, r2
 8002cec:	7b9b      	ldrb	r3, [r3, #14]
 8002cee:	b21a      	sxth	r2, r3
 8002cf0:	4b26      	ldr	r3, [pc, #152]	; (8002d8c <huansic_xb_decodeBody+0x504>)
 8002cf2:	801a      	strh	r2, [r3, #0]
		if (myCoord.x == 255) {
 8002cf4:	4b25      	ldr	r3, [pc, #148]	; (8002d8c <huansic_xb_decodeBody+0x504>)
 8002cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cfa:	2bff      	cmp	r3, #255	; 0xff
 8002cfc:	d10b      	bne.n	8002d16 <huansic_xb_decodeBody+0x48e>
			myCoord.x = hxb->buffer[index] - 256;
 8002cfe:	7f7b      	ldrb	r3, [r7, #29]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	4413      	add	r3, r2
 8002d04:	7b9b      	ldrb	r3, [r3, #14]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	b21a      	sxth	r2, r3
 8002d10:	4b1e      	ldr	r3, [pc, #120]	; (8002d8c <huansic_xb_decodeBody+0x504>)
 8002d12:	801a      	strh	r2, [r3, #0]
 8002d14:	e012      	b.n	8002d3c <huansic_xb_decodeBody+0x4b4>
		}
		else {
			myCoord.x = myCoord.x << 8;
 8002d16:	4b1d      	ldr	r3, [pc, #116]	; (8002d8c <huansic_xb_decodeBody+0x504>)
 8002d18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d1c:	021b      	lsls	r3, r3, #8
 8002d1e:	b21a      	sxth	r2, r3
 8002d20:	4b1a      	ldr	r3, [pc, #104]	; (8002d8c <huansic_xb_decodeBody+0x504>)
 8002d22:	801a      	strh	r2, [r3, #0]
			myCoord.x |= hxb->buffer[index];
 8002d24:	4b19      	ldr	r3, [pc, #100]	; (8002d8c <huansic_xb_decodeBody+0x504>)
 8002d26:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002d2a:	7f7b      	ldrb	r3, [r7, #29]
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	440b      	add	r3, r1
 8002d30:	7b9b      	ldrb	r3, [r3, #14]
 8002d32:	b21b      	sxth	r3, r3
 8002d34:	4313      	orrs	r3, r2
 8002d36:	b21a      	sxth	r2, r3
 8002d38:	4b14      	ldr	r3, [pc, #80]	; (8002d8c <huansic_xb_decodeBody+0x504>)
 8002d3a:	801a      	strh	r2, [r3, #0]
		}
		index += 2;			//11
 8002d3c:	7f7b      	ldrb	r3, [r7, #29]
 8002d3e:	3302      	adds	r3, #2
 8002d40:	777b      	strb	r3, [r7, #29]
		myCoord.y = hxb->buffer[index + 1];
 8002d42:	7f7b      	ldrb	r3, [r7, #29]
 8002d44:	3301      	adds	r3, #1
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	7b9b      	ldrb	r3, [r3, #14]
 8002d4c:	b21a      	sxth	r2, r3
 8002d4e:	4b0f      	ldr	r3, [pc, #60]	; (8002d8c <huansic_xb_decodeBody+0x504>)
 8002d50:	805a      	strh	r2, [r3, #2]
		if (myCoord.y == 255) {
 8002d52:	4b0e      	ldr	r3, [pc, #56]	; (8002d8c <huansic_xb_decodeBody+0x504>)
 8002d54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d58:	2bff      	cmp	r3, #255	; 0xff
 8002d5a:	d119      	bne.n	8002d90 <huansic_xb_decodeBody+0x508>
			myCoord.y = hxb->buffer[index] - 256;
 8002d5c:	7f7b      	ldrb	r3, [r7, #29]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	4413      	add	r3, r2
 8002d62:	7b9b      	ldrb	r3, [r3, #14]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	b21a      	sxth	r2, r3
 8002d6e:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <huansic_xb_decodeBody+0x504>)
 8002d70:	805a      	strh	r2, [r3, #2]
 8002d72:	e020      	b.n	8002db6 <huansic_xb_decodeBody+0x52e>
 8002d74:	2000100c 	.word	0x2000100c
 8002d78:	20000fcd 	.word	0x20000fcd
 8002d7c:	20000fd4 	.word	0x20000fd4
 8002d80:	20000fd0 	.word	0x20000fd0
 8002d84:	20001084 	.word	0x20001084
 8002d88:	2000107c 	.word	0x2000107c
 8002d8c:	20001068 	.word	0x20001068
		}
		else {
			myCoord.y = myCoord.y << 8;
 8002d90:	4b44      	ldr	r3, [pc, #272]	; (8002ea4 <huansic_xb_decodeBody+0x61c>)
 8002d92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d96:	021b      	lsls	r3, r3, #8
 8002d98:	b21a      	sxth	r2, r3
 8002d9a:	4b42      	ldr	r3, [pc, #264]	; (8002ea4 <huansic_xb_decodeBody+0x61c>)
 8002d9c:	805a      	strh	r2, [r3, #2]
			myCoord.y |= hxb->buffer[index];
 8002d9e:	4b41      	ldr	r3, [pc, #260]	; (8002ea4 <huansic_xb_decodeBody+0x61c>)
 8002da0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002da4:	7f7b      	ldrb	r3, [r7, #29]
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	440b      	add	r3, r1
 8002daa:	7b9b      	ldrb	r3, [r3, #14]
 8002dac:	b21b      	sxth	r3, r3
 8002dae:	4313      	orrs	r3, r2
 8002db0:	b21a      	sxth	r2, r3
 8002db2:	4b3c      	ldr	r3, [pc, #240]	; (8002ea4 <huansic_xb_decodeBody+0x61c>)
 8002db4:	805a      	strh	r2, [r3, #2]
		}
		index += 2;			//13
 8002db6:	7f7b      	ldrb	r3, [r7, #29]
 8002db8:	3302      	adds	r3, #2
 8002dba:	777b      	strb	r3, [r7, #29]
		CoordinateUpdate = 1;
 8002dbc:	4b3a      	ldr	r3, [pc, #232]	; (8002ea8 <huansic_xb_decodeBody+0x620>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	701a      	strb	r2, [r3, #0]

		/* fetch battery */
		temp = hxb->buffer[index + 3];
 8002dc2:	7f7b      	ldrb	r3, [r7, #29]
 8002dc4:	3303      	adds	r3, #3
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	4413      	add	r3, r2
 8002dca:	7b9b      	ldrb	r3, [r3, #14]
 8002dcc:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 2];
 8002dd4:	7f7b      	ldrb	r3, [r7, #29]
 8002dd6:	3302      	adds	r3, #2
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	4413      	add	r3, r2
 8002ddc:	7b9b      	ldrb	r3, [r3, #14]
 8002dde:	461a      	mov	r2, r3
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	021b      	lsls	r3, r3, #8
 8002dea:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 1];
 8002dec:	7f7b      	ldrb	r3, [r7, #29]
 8002dee:	3301      	adds	r3, #1
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	4413      	add	r3, r2
 8002df4:	7b9b      	ldrb	r3, [r3, #14]
 8002df6:	461a      	mov	r2, r3
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	021b      	lsls	r3, r3, #8
 8002e02:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index];
 8002e04:	7f7b      	ldrb	r3, [r7, #29]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	7b9b      	ldrb	r3, [r3, #14]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
		myCharge = *(float*) &temp;			// decode float from uint32
 8002e14:	f107 0310 	add.w	r3, r7, #16
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a24      	ldr	r2, [pc, #144]	; (8002eac <huansic_xb_decodeBody+0x624>)
 8002e1c:	6013      	str	r3, [r2, #0]
		index += 4;			//17
 8002e1e:	7f7b      	ldrb	r3, [r7, #29]
 8002e20:	3304      	adds	r3, #4
 8002e22:	777b      	strb	r3, [r7, #29]

		/* my orders */
		int8_t updatedOrder[] = { -1, -1, -1, -1, -1 };
 8002e24:	4a22      	ldr	r2, [pc, #136]	; (8002eb0 <huansic_xb_decodeBody+0x628>)
 8002e26:	f107 0308 	add.w	r3, r7, #8
 8002e2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e2e:	6018      	str	r0, [r3, #0]
 8002e30:	3304      	adds	r3, #4
 8002e32:	7019      	strb	r1, [r3, #0]
		uint8_t updatedOrderIndex = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	773b      	strb	r3, [r7, #28]
		Order *tempOrder;
		listLength = hxb->buffer[index++];			//after_update : 18
 8002e38:	7f7b      	ldrb	r3, [r7, #29]
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	777a      	strb	r2, [r7, #29]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4413      	add	r3, r2
 8002e44:	7b9b      	ldrb	r3, [r3, #14]
 8002e46:	76fb      	strb	r3, [r7, #27]
		delivering_num = listLength;
 8002e48:	4a1a      	ldr	r2, [pc, #104]	; (8002eb4 <huansic_xb_decodeBody+0x62c>)
 8002e4a:	7efb      	ldrb	r3, [r7, #27]
 8002e4c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < listLength; i++) {
 8002e4e:	2300      	movs	r3, #0
 8002e50:	77fb      	strb	r3, [r7, #31]
 8002e52:	e0ee      	b.n	8003032 <huansic_xb_decodeBody+0x7aa>
			temp |= hxb->buffer[index + 17];
 8002e54:	7f7b      	ldrb	r3, [r7, #29]
 8002e56:	3311      	adds	r3, #17
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	7b9b      	ldrb	r3, [r3, #14]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	021b      	lsls	r3, r3, #8
 8002e6a:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 16];
 8002e6c:	7f7b      	ldrb	r3, [r7, #29]
 8002e6e:	3310      	adds	r3, #16
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	4413      	add	r3, r2
 8002e74:	7b9b      	ldrb	r3, [r3, #14]
 8002e76:	461a      	mov	r2, r3
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
			tempOrder = huansic_order_new(temp);
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	b25b      	sxtb	r3, r3
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff f984 	bl	8002190 <huansic_order_new>
 8002e88:	6178      	str	r0, [r7, #20]
			if (!tempOrder) {
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d113      	bne.n	8002eb8 <huansic_xb_decodeBody+0x630>
				index += 18;
 8002e90:	7f7b      	ldrb	r3, [r7, #29]
 8002e92:	3312      	adds	r3, #18
 8002e94:	777b      	strb	r3, [r7, #29]
				custom_order_new_failed(temp);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fc08 	bl	80026b0 <custom_order_new_failed>
				continue;
 8002ea0:	e0c4      	b.n	800302c <huansic_xb_decodeBody+0x7a4>
 8002ea2:	bf00      	nop
 8002ea4:	20001068 	.word	0x20001068
 8002ea8:	20001074 	.word	0x20001074
 8002eac:	20001080 	.word	0x20001080
 8002eb0:	0800d0f0 	.word	0x0800d0f0
 8002eb4:	20001064 	.word	0x20001064
			}
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 1] << 8)
 8002eb8:	7f7b      	ldrb	r3, [r7, #29]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	7b9b      	ldrb	r3, [r3, #14]
 8002ec2:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index];
 8002ec4:	b21a      	sxth	r2, r3
 8002ec6:	7f7b      	ldrb	r3, [r7, #29]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	440b      	add	r3, r1
 8002ecc:	7b9b      	ldrb	r3, [r3, #14]
 8002ece:	b21b      	sxth	r3, r3
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 1] << 8)
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 3] << 8)
 8002ed8:	7f7b      	ldrb	r3, [r7, #29]
 8002eda:	3303      	adds	r3, #3
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	4413      	add	r3, r2
 8002ee0:	7b9b      	ldrb	r3, [r3, #14]
 8002ee2:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 2];
 8002ee4:	b21a      	sxth	r2, r3
 8002ee6:	7f7b      	ldrb	r3, [r7, #29]
 8002ee8:	3302      	adds	r3, #2
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	440b      	add	r3, r1
 8002eee:	7b9b      	ldrb	r3, [r3, #14]
 8002ef0:	b21b      	sxth	r3, r3
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 3] << 8)
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	805a      	strh	r2, [r3, #2]
			// destination
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 5] << 8)
 8002efa:	7f7b      	ldrb	r3, [r7, #29]
 8002efc:	3305      	adds	r3, #5
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	4413      	add	r3, r2
 8002f02:	7b9b      	ldrb	r3, [r3, #14]
 8002f04:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 4];
 8002f06:	b21a      	sxth	r2, r3
 8002f08:	7f7b      	ldrb	r3, [r7, #29]
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	440b      	add	r3, r1
 8002f10:	7b9b      	ldrb	r3, [r3, #14]
 8002f12:	b21b      	sxth	r3, r3
 8002f14:	4313      	orrs	r3, r2
 8002f16:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 5] << 8)
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 7] << 8)
 8002f1c:	7f7b      	ldrb	r3, [r7, #29]
 8002f1e:	3307      	adds	r3, #7
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	4413      	add	r3, r2
 8002f24:	7b9b      	ldrb	r3, [r3, #14]
 8002f26:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 6];
 8002f28:	b21a      	sxth	r2, r3
 8002f2a:	7f7b      	ldrb	r3, [r7, #29]
 8002f2c:	3306      	adds	r3, #6
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	440b      	add	r3, r1
 8002f32:	7b9b      	ldrb	r3, [r3, #14]
 8002f34:	b21b      	sxth	r3, r3
 8002f36:	4313      	orrs	r3, r2
 8002f38:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 7] << 8)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 11];
 8002f3e:	7f7b      	ldrb	r3, [r7, #29]
 8002f40:	330b      	adds	r3, #11
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	7b9b      	ldrb	r3, [r3, #14]
 8002f48:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	021b      	lsls	r3, r3, #8
 8002f4e:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 10];
 8002f50:	7f7b      	ldrb	r3, [r7, #29]
 8002f52:	330a      	adds	r3, #10
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	4413      	add	r3, r2
 8002f58:	7b9b      	ldrb	r3, [r3, #14]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	021b      	lsls	r3, r3, #8
 8002f66:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 9];
 8002f68:	7f7b      	ldrb	r3, [r7, #29]
 8002f6a:	3309      	adds	r3, #9
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	4413      	add	r3, r2
 8002f70:	7b9b      	ldrb	r3, [r3, #14]
 8002f72:	461a      	mov	r2, r3
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	021b      	lsls	r3, r3, #8
 8002f7e:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 8];
 8002f80:	7f7b      	ldrb	r3, [r7, #29]
 8002f82:	3308      	adds	r3, #8
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	4413      	add	r3, r2
 8002f88:	7b9b      	ldrb	r3, [r3, #14]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	609a      	str	r2, [r3, #8]
			//start time
			if (tempOrder->startTime == 0)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d104      	bne.n	8002faa <huansic_xb_decodeBody+0x722>
				tempOrder->startTime = HAL_GetTick();
 8002fa0:	f003 fb0e 	bl	80065c0 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	60da      	str	r2, [r3, #12]

			// reward
			temp = hxb->buffer[index + 15];
 8002faa:	7f7b      	ldrb	r3, [r7, #29]
 8002fac:	330f      	adds	r3, #15
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	7b9b      	ldrb	r3, [r3, #14]
 8002fb4:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 14];
 8002fbc:	7f7b      	ldrb	r3, [r7, #29]
 8002fbe:	330e      	adds	r3, #14
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	7b9b      	ldrb	r3, [r3, #14]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	021b      	lsls	r3, r3, #8
 8002fd2:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 13];
 8002fd4:	7f7b      	ldrb	r3, [r7, #29]
 8002fd6:	330d      	adds	r3, #13
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	4413      	add	r3, r2
 8002fdc:	7b9b      	ldrb	r3, [r3, #14]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	021b      	lsls	r3, r3, #8
 8002fea:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 12];
 8002fec:	7f7b      	ldrb	r3, [r7, #29]
 8002fee:	330c      	adds	r3, #12
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	7b9b      	ldrb	r3, [r3, #14]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 8002ffe:	f107 0310 	add.w	r3, r7, #16
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	615a      	str	r2, [r3, #20]

			delivering[i] = tempOrder;
 8003008:	7ffb      	ldrb	r3, [r7, #31]
 800300a:	4999      	ldr	r1, [pc, #612]	; (8003270 <huansic_xb_decodeBody+0x9e8>)
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			// increment index and record id
			index += 18;			//18+listLength*18
 8003012:	7f7b      	ldrb	r3, [r7, #29]
 8003014:	3312      	adds	r3, #18
 8003016:	777b      	strb	r3, [r7, #29]
			updatedOrder[updatedOrderIndex++] = tempOrder->id;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	7f3b      	ldrb	r3, [r7, #28]
 800301e:	1c59      	adds	r1, r3, #1
 8003020:	7739      	strb	r1, [r7, #28]
 8003022:	b252      	sxtb	r2, r2
 8003024:	3320      	adds	r3, #32
 8003026:	443b      	add	r3, r7
 8003028:	f803 2c18 	strb.w	r2, [r3, #-24]
		for (i = 0; i < listLength; i++) {
 800302c:	7ffb      	ldrb	r3, [r7, #31]
 800302e:	3301      	adds	r3, #1
 8003030:	77fb      	strb	r3, [r7, #31]
 8003032:	7ffa      	ldrb	r2, [r7, #31]
 8003034:	7efb      	ldrb	r3, [r7, #27]
 8003036:	429a      	cmp	r2, r3
 8003038:	f4ff af0c 	bcc.w	8002e54 <huansic_xb_decodeBody+0x5cc>
		}

		/* order management */
		for (i = 0; i < 8; i++) {
 800303c:	2300      	movs	r3, #0
 800303e:	77fb      	strb	r3, [r7, #31]
 8003040:	e036      	b.n	80030b0 <huansic_xb_decodeBody+0x828>
			if (delivering[i] != 0 && delivering[i]->id != -1) {
 8003042:	7ffb      	ldrb	r3, [r7, #31]
 8003044:	4a8a      	ldr	r2, [pc, #552]	; (8003270 <huansic_xb_decodeBody+0x9e8>)
 8003046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d02d      	beq.n	80030aa <huansic_xb_decodeBody+0x822>
 800304e:	7ffb      	ldrb	r3, [r7, #31]
 8003050:	4a87      	ldr	r2, [pc, #540]	; (8003270 <huansic_xb_decodeBody+0x9e8>)
 8003052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305c:	d025      	beq.n	80030aa <huansic_xb_decodeBody+0x822>
				for (j = 0; j < updatedOrderIndex; j++)
 800305e:	2300      	movs	r3, #0
 8003060:	77bb      	strb	r3, [r7, #30]
 8003062:	e011      	b.n	8003088 <huansic_xb_decodeBody+0x800>
					if (delivering[i]->id == updatedOrder[j]) {		// pulled from remote
 8003064:	7ffb      	ldrb	r3, [r7, #31]
 8003066:	4a82      	ldr	r2, [pc, #520]	; (8003270 <huansic_xb_decodeBody+0x9e8>)
 8003068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	7fba      	ldrb	r2, [r7, #30]
 8003070:	3220      	adds	r2, #32
 8003072:	443a      	add	r2, r7
 8003074:	f912 2c18 	ldrsb.w	r2, [r2, #-24]
 8003078:	4293      	cmp	r3, r2
 800307a:	d102      	bne.n	8003082 <huansic_xb_decodeBody+0x7fa>
						j = 255;
 800307c:	23ff      	movs	r3, #255	; 0xff
 800307e:	77bb      	strb	r3, [r7, #30]
						break;
 8003080:	e006      	b.n	8003090 <huansic_xb_decodeBody+0x808>
				for (j = 0; j < updatedOrderIndex; j++)
 8003082:	7fbb      	ldrb	r3, [r7, #30]
 8003084:	3301      	adds	r3, #1
 8003086:	77bb      	strb	r3, [r7, #30]
 8003088:	7fba      	ldrb	r2, [r7, #30]
 800308a:	7f3b      	ldrb	r3, [r7, #28]
 800308c:	429a      	cmp	r2, r3
 800308e:	d3e9      	bcc.n	8003064 <huansic_xb_decodeBody+0x7dc>
					}
				if (j != 255 && j != 0)
 8003090:	7fbb      	ldrb	r3, [r7, #30]
 8003092:	2bff      	cmp	r3, #255	; 0xff
 8003094:	d009      	beq.n	80030aa <huansic_xb_decodeBody+0x822>
 8003096:	7fbb      	ldrb	r3, [r7, #30]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d006      	beq.n	80030aa <huansic_xb_decodeBody+0x822>
					huansic_order_delete(delivering[i]);// delete the order if the order is no longer in the delivery list
 800309c:	7ffb      	ldrb	r3, [r7, #31]
 800309e:	4a74      	ldr	r2, [pc, #464]	; (8003270 <huansic_xb_decodeBody+0x9e8>)
 80030a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff f8cd 	bl	8002244 <huansic_order_delete>
		for (i = 0; i < 8; i++) {
 80030aa:	7ffb      	ldrb	r3, [r7, #31]
 80030ac:	3301      	adds	r3, #1
 80030ae:	77fb      	strb	r3, [r7, #31]
 80030b0:	7ffb      	ldrb	r3, [r7, #31]
 80030b2:	2b07      	cmp	r3, #7
 80030b4:	d9c5      	bls.n	8003042 <huansic_xb_decodeBody+0x7ba>
			}
		}
		/* record latest order */
		temp |= hxb->buffer[index + 17];
 80030b6:	7f7b      	ldrb	r3, [r7, #29]
 80030b8:	3311      	adds	r3, #17
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	4413      	add	r3, r2
 80030be:	7b9b      	ldrb	r3, [r3, #14]
 80030c0:	461a      	mov	r2, r3
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	021b      	lsls	r3, r3, #8
 80030cc:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 16];
 80030ce:	7f7b      	ldrb	r3, [r7, #29]
 80030d0:	3310      	adds	r3, #16
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	4413      	add	r3, r2
 80030d6:	7b9b      	ldrb	r3, [r3, #14]
 80030d8:	461a      	mov	r2, r3
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
		tempOrder = huansic_order_new(temp);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	b25b      	sxtb	r3, r3
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff f853 	bl	8002190 <huansic_order_new>
 80030ea:	6178      	str	r0, [r7, #20]
		if (!tempOrder) {
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d108      	bne.n	8003104 <huansic_xb_decodeBody+0x87c>
			index += 18;
 80030f2:	7f7b      	ldrb	r3, [r7, #29]
 80030f4:	3312      	adds	r3, #18
 80030f6:	777b      	strb	r3, [r7, #29]
			custom_order_new_failed(temp);
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff fad7 	bl	80026b0 <custom_order_new_failed>
 8003102:	e0b7      	b.n	8003274 <huansic_xb_decodeBody+0x9ec>
		} else {
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 1] << 8)
 8003104:	7f7b      	ldrb	r3, [r7, #29]
 8003106:	3301      	adds	r3, #1
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	4413      	add	r3, r2
 800310c:	7b9b      	ldrb	r3, [r3, #14]
 800310e:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index];
 8003110:	b21a      	sxth	r2, r3
 8003112:	7f7b      	ldrb	r3, [r7, #29]
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	440b      	add	r3, r1
 8003118:	7b9b      	ldrb	r3, [r3, #14]
 800311a:	b21b      	sxth	r3, r3
 800311c:	4313      	orrs	r3, r2
 800311e:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 1] << 8)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 3] << 8)
 8003124:	7f7b      	ldrb	r3, [r7, #29]
 8003126:	3303      	adds	r3, #3
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	4413      	add	r3, r2
 800312c:	7b9b      	ldrb	r3, [r3, #14]
 800312e:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 2];
 8003130:	b21a      	sxth	r2, r3
 8003132:	7f7b      	ldrb	r3, [r7, #29]
 8003134:	3302      	adds	r3, #2
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	440b      	add	r3, r1
 800313a:	7b9b      	ldrb	r3, [r3, #14]
 800313c:	b21b      	sxth	r3, r3
 800313e:	4313      	orrs	r3, r2
 8003140:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 3] << 8)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	805a      	strh	r2, [r3, #2]
			order_append(tempOrder);
 8003146:	6978      	ldr	r0, [r7, #20]
 8003148:	f001 fbb6 	bl	80048b8 <order_append>
			// end coordinate
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 5] << 8)
 800314c:	7f7b      	ldrb	r3, [r7, #29]
 800314e:	3305      	adds	r3, #5
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4413      	add	r3, r2
 8003154:	7b9b      	ldrb	r3, [r3, #14]
 8003156:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 4];
 8003158:	b21a      	sxth	r2, r3
 800315a:	7f7b      	ldrb	r3, [r7, #29]
 800315c:	3304      	adds	r3, #4
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	440b      	add	r3, r1
 8003162:	7b9b      	ldrb	r3, [r3, #14]
 8003164:	b21b      	sxth	r3, r3
 8003166:	4313      	orrs	r3, r2
 8003168:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 5] << 8)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 7] << 8)
 800316e:	7f7b      	ldrb	r3, [r7, #29]
 8003170:	3307      	adds	r3, #7
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	4413      	add	r3, r2
 8003176:	7b9b      	ldrb	r3, [r3, #14]
 8003178:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 6];
 800317a:	b21a      	sxth	r2, r3
 800317c:	7f7b      	ldrb	r3, [r7, #29]
 800317e:	3306      	adds	r3, #6
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	440b      	add	r3, r1
 8003184:	7b9b      	ldrb	r3, [r3, #14]
 8003186:	b21b      	sxth	r3, r3
 8003188:	4313      	orrs	r3, r2
 800318a:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 7] << 8)
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 11];
 8003190:	7f7b      	ldrb	r3, [r7, #29]
 8003192:	330b      	adds	r3, #11
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	4413      	add	r3, r2
 8003198:	7b9b      	ldrb	r3, [r3, #14]
 800319a:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	021b      	lsls	r3, r3, #8
 80031a0:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 10];
 80031a2:	7f7b      	ldrb	r3, [r7, #29]
 80031a4:	330a      	adds	r3, #10
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	4413      	add	r3, r2
 80031aa:	7b9b      	ldrb	r3, [r3, #14]
 80031ac:	461a      	mov	r2, r3
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	021b      	lsls	r3, r3, #8
 80031b8:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 9];
 80031ba:	7f7b      	ldrb	r3, [r7, #29]
 80031bc:	3309      	adds	r3, #9
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	4413      	add	r3, r2
 80031c2:	7b9b      	ldrb	r3, [r3, #14]
 80031c4:	461a      	mov	r2, r3
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 8];
 80031d2:	7f7b      	ldrb	r3, [r7, #29]
 80031d4:	3308      	adds	r3, #8
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	4413      	add	r3, r2
 80031da:	7b9b      	ldrb	r3, [r3, #14]
 80031dc:	461a      	mov	r2, r3
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 15];
 80031ea:	7f7b      	ldrb	r3, [r7, #29]
 80031ec:	330f      	adds	r3, #15
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	7b9b      	ldrb	r3, [r3, #14]
 80031f4:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	021b      	lsls	r3, r3, #8
 80031fa:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 14];
 80031fc:	7f7b      	ldrb	r3, [r7, #29]
 80031fe:	330e      	adds	r3, #14
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	4413      	add	r3, r2
 8003204:	7b9b      	ldrb	r3, [r3, #14]
 8003206:	461a      	mov	r2, r3
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 13];
 8003214:	7f7b      	ldrb	r3, [r7, #29]
 8003216:	330d      	adds	r3, #13
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	4413      	add	r3, r2
 800321c:	7b9b      	ldrb	r3, [r3, #14]
 800321e:	461a      	mov	r2, r3
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	021b      	lsls	r3, r3, #8
 800322a:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 12];
 800322c:	7f7b      	ldrb	r3, [r7, #29]
 800322e:	330c      	adds	r3, #12
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	4413      	add	r3, r2
 8003234:	7b9b      	ldrb	r3, [r3, #14]
 8003236:	461a      	mov	r2, r3
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 800323e:	f107 0310 	add.w	r3, r7, #16
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	615a      	str	r2, [r3, #20]
 8003248:	e014      	b.n	8003274 <huansic_xb_decodeBody+0x9ec>
		}
	} else {
		hxb->pending_alignment = 1;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
		hxb->lastByte = 0x00;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
		HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);		// check next byte
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	330e      	adds	r3, #14
 8003262:	2201      	movs	r2, #1
 8003264:	4619      	mov	r1, r3
 8003266:	f006 fd68 	bl	8009d3a <HAL_UART_Receive_IT>
		return XB_ID_ERROR;
 800326a:	2306      	movs	r3, #6
 800326c:	e082      	b.n	8003374 <huansic_xb_decodeBody+0xaec>
 800326e:	bf00      	nop
 8003270:	20001044 	.word	0x20001044
	}

	// set up next DMA
	hxb->lastUpdated = HAL_GetTick();		// update last updated time stamp
 8003274:	f003 f9a4 	bl	80065c0 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	609a      	str	r2, [r3, #8]
	hxb->nextPackageLength = 6;		// header length
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2206      	movs	r2, #6
 8003282:	735a      	strb	r2, [r3, #13]
	hxb->nextPackageID = 0x00;		// the next one is header
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	731a      	strb	r2, [r3, #12]

	// check if overrun occurred
	if (__HAL_UART_GET_FLAG(hxb->huart, UART_FLAG_ORE)) {
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b08      	cmp	r3, #8
 8003298:	d131      	bne.n	80032fe <huansic_xb_decodeBody+0xa76>
		// perform the clear flag sequence and read the overrun data
		i = hxb->huart->Instance->SR;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	77fb      	strb	r3, [r7, #31]
		hxb->buffer[0] = hxb->huart->Instance->DR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	739a      	strb	r2, [r3, #14]
		while (!__HAL_UART_GET_FLAG(hxb->huart, UART_FLAG_RXNE))
 80032b2:	bf00      	nop
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0320 	and.w	r3, r3, #32
 80032c0:	2b20      	cmp	r3, #32
 80032c2:	d1f7      	bne.n	80032b4 <huansic_xb_decodeBody+0xa2c>
			;		// wait for the data in shift register to move into data register
		hxb->buffer[1] = hxb->huart->Instance->DR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	73da      	strb	r2, [r3, #15]
		HAL_UART_Receive_DMA(hxb->huart, &hxb->buffer[2],
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f103 0110 	add.w	r1, r3, #16
				hxb->nextPackageLength < 2 ? hxb->nextPackageLength : (hxb->nextPackageLength - 2));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	7b5b      	ldrb	r3, [r3, #13]
		HAL_UART_Receive_DMA(hxb->huart, &hxb->buffer[2],
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d803      	bhi.n	80032ec <huansic_xb_decodeBody+0xa64>
				hxb->nextPackageLength < 2 ? hxb->nextPackageLength : (hxb->nextPackageLength - 2));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	7b5b      	ldrb	r3, [r3, #13]
		HAL_UART_Receive_DMA(hxb->huart, &hxb->buffer[2],
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	e004      	b.n	80032f6 <huansic_xb_decodeBody+0xa6e>
				hxb->nextPackageLength < 2 ? hxb->nextPackageLength : (hxb->nextPackageLength - 2));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	7b5b      	ldrb	r3, [r3, #13]
 80032f0:	b29b      	uxth	r3, r3
		HAL_UART_Receive_DMA(hxb->huart, &hxb->buffer[2],
 80032f2:	3b02      	subs	r3, #2
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	461a      	mov	r2, r3
 80032f8:	f006 fd4f 	bl	8009d9a <HAL_UART_Receive_DMA>
 80032fc:	e02f      	b.n	800335e <huansic_xb_decodeBody+0xad6>
	}

	// check if RX buffer is empty
	else if (__HAL_UART_GET_FLAG(hxb->huart, UART_FLAG_RXNE)) {
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b20      	cmp	r3, #32
 800330c:	d11c      	bne.n	8003348 <huansic_xb_decodeBody+0xac0>
		hxb->buffer[0] = hxb->huart->Instance->DR;		// read data
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	b2da      	uxtb	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	739a      	strb	r2, [r3, #14]
		HAL_UART_Receive_DMA(hxb->huart, &hxb->buffer[1],
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6818      	ldr	r0, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f103 010f 	add.w	r1, r3, #15
				hxb->nextPackageLength < 1 ? hxb->nextPackageLength : (hxb->nextPackageLength - 1));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	7b5b      	ldrb	r3, [r3, #13]
		HAL_UART_Receive_DMA(hxb->huart, &hxb->buffer[1],
 800332a:	2b00      	cmp	r3, #0
 800332c:	d103      	bne.n	8003336 <huansic_xb_decodeBody+0xaae>
				hxb->nextPackageLength < 1 ? hxb->nextPackageLength : (hxb->nextPackageLength - 1));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	7b5b      	ldrb	r3, [r3, #13]
		HAL_UART_Receive_DMA(hxb->huart, &hxb->buffer[1],
 8003332:	b29b      	uxth	r3, r3
 8003334:	e004      	b.n	8003340 <huansic_xb_decodeBody+0xab8>
				hxb->nextPackageLength < 1 ? hxb->nextPackageLength : (hxb->nextPackageLength - 1));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	7b5b      	ldrb	r3, [r3, #13]
 800333a:	b29b      	uxth	r3, r3
		HAL_UART_Receive_DMA(hxb->huart, &hxb->buffer[1],
 800333c:	3b01      	subs	r3, #1
 800333e:	b29b      	uxth	r3, r3
 8003340:	461a      	mov	r2, r3
 8003342:	f006 fd2a 	bl	8009d9a <HAL_UART_Receive_DMA>
 8003346:	e00a      	b.n	800335e <huansic_xb_decodeBody+0xad6>
	}

	// otherwise, receive normally
	else {
		HAL_UART_Receive_DMA(hxb->huart, &hxb->buffer[0], hxb->nextPackageLength);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6818      	ldr	r0, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f103 010e 	add.w	r1, r3, #14
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	7b5b      	ldrb	r3, [r3, #13]
 8003356:	b29b      	uxth	r3, r3
 8003358:	461a      	mov	r2, r3
 800335a:	f006 fd1e 	bl	8009d9a <HAL_UART_Receive_DMA>
	}

	__HAL_DMA_DISABLE_IT(hxb->hdma, DMA_IT_HT);		// disable half transfer interrupt
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 0204 	bic.w	r2, r2, #4
 8003370:	601a      	str	r2, [r3, #0]

	return XB_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3720      	adds	r7, #32
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <huansic_xb_requestGameInfo>:

void huansic_xb_requestGameInfo(XB_HandleTypeDef *hxb) {
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
	zigbeeSend[2] = 0x00;
 8003384:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <huansic_xb_requestGameInfo+0x24>)
 8003386:	2200      	movs	r2, #0
 8003388:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(hxb->huart, zigbeeSend, 6, 10);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	230a      	movs	r3, #10
 8003390:	2206      	movs	r2, #6
 8003392:	4903      	ldr	r1, [pc, #12]	; (80033a0 <huansic_xb_requestGameInfo+0x24>)
 8003394:	f006 fc3f 	bl	8009c16 <HAL_UART_Transmit>
}
 8003398:	bf00      	nop
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	20000008 	.word	0x20000008

080033a4 <huansic_xb_setBeacon>:

void huansic_xb_setBeacon(XB_HandleTypeDef *hxb) {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
	zigbeeSend[2] = 0x02;
 80033ac:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <huansic_xb_setBeacon+0x24>)
 80033ae:	2202      	movs	r2, #2
 80033b0:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(hxb->huart, zigbeeSend, 6, 10);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	230a      	movs	r3, #10
 80033b8:	2206      	movs	r2, #6
 80033ba:	4903      	ldr	r1, [pc, #12]	; (80033c8 <huansic_xb_setBeacon+0x24>)
 80033bc:	f006 fc2b 	bl	8009c16 <HAL_UART_Transmit>
}
 80033c0:	bf00      	nop
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	20000008 	.word	0x20000008

080033cc <huansic_xb_dma_error>:

void huansic_xb_dma_error(XB_HandleTypeDef *hxb) {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	hxb->pending_alignment = 1;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	hxb->lastByte = 0x00;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6818      	ldr	r0, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	330e      	adds	r3, #14
 80033ec:	2201      	movs	r2, #1
 80033ee:	4619      	mov	r1, r3
 80033f0:	f006 fca3 	bl	8009d3a <HAL_UART_Receive_IT>
}
 80033f4:	bf00      	nop
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <huansic_xb_it_error>:

void huansic_xb_it_error(XB_HandleTypeDef *hxb) {
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	hxb->pending_alignment = 1;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	hxb->lastByte = 0x00;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	330e      	adds	r3, #14
 800341c:	2201      	movs	r2, #1
 800341e:	4619      	mov	r1, r3
 8003420:	f006 fc8b 	bl	8009d3a <HAL_UART_Receive_IT>
}
 8003424:	bf00      	nop
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <huansic_xb_isr>:

enum XB_STATUS huansic_xb_isr(XB_HandleTypeDef *hxb) {
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
	if (!hxb)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <huansic_xb_isr+0x12>
		return XB_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e038      	b.n	80034b0 <huansic_xb_isr+0x84>

	if (hxb->buffer[0] == 0xAA && hxb->lastByte == 0x55) {		// if aligned (look for header)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	7b9b      	ldrb	r3, [r3, #14]
 8003442:	2baa      	cmp	r3, #170	; 0xaa
 8003444:	d122      	bne.n	800348c <huansic_xb_isr+0x60>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 800344c:	2b55      	cmp	r3, #85	; 0x55
 800344e:	d11d      	bne.n	800348c <huansic_xb_isr+0x60>
		hxb->pending_alignment = 0;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
		hxb->nextPackageID = 0x00;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	731a      	strb	r2, [r3, #12]
		hxb->buffer[1] = 0x55;		// for further processing
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2255      	movs	r2, #85	; 0x55
 8003462:	73da      	strb	r2, [r3, #15]
		HAL_UART_Receive_DMA(hxb->huart, &(hxb->buffer[2]), 4);		// receive the rest of header
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3310      	adds	r3, #16
 800346c:	2204      	movs	r2, #4
 800346e:	4619      	mov	r1, r3
 8003470:	f006 fc93 	bl	8009d9a <HAL_UART_Receive_DMA>
		__HAL_DMA_DISABLE_IT(hxb->hdma, DMA_IT_HT);		// disable half transfer interrupt
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0204 	bic.w	r2, r2, #4
 8003486:	601a      	str	r2, [r3, #0]
		return XB_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	e011      	b.n	80034b0 <huansic_xb_isr+0x84>
	} else {
		hxb->pending_alignment = 1;		// enter aligning mode if not already
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
		hxb->lastByte = hxb->buffer[0];
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	7b9a      	ldrb	r2, [r3, #14]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
		HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);		// check next byte
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	330e      	adds	r3, #14
 80034a6:	2201      	movs	r2, #1
 80034a8:	4619      	mov	r1, r3
 80034aa:	f006 fc46 	bl	8009d3a <HAL_UART_Receive_IT>
		return IMU_HEADER_ERROR;
 80034ae:	2305      	movs	r3, #5
	}
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <huansic_xb_dma_isr>:

enum XB_STATUS huansic_xb_dma_isr(XB_HandleTypeDef *hxb) {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	if (!hxb)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <huansic_xb_dma_isr+0x12>
		return XB_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e00c      	b.n	80034e4 <huansic_xb_dma_isr+0x2c>

	if (hxb->nextPackageID == 0x00)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	7b1b      	ldrb	r3, [r3, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d104      	bne.n	80034dc <huansic_xb_dma_isr+0x24>
		return huansic_xb_decodeHeader(hxb);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff f92c 	bl	8002730 <huansic_xb_decodeHeader>
 80034d8:	4603      	mov	r3, r0
 80034da:	e003      	b.n	80034e4 <huansic_xb_dma_isr+0x2c>
	else
		return huansic_xb_decodeBody(hxb);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff f9d3 	bl	8002888 <huansic_xb_decodeBody>
 80034e2:	4603      	mov	r3, r0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80034ec:	b590      	push	{r4, r7, lr}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80034f2:	f003 f80d 	bl	8006510 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80034f6:	f000 fadb 	bl	8003ab0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80034fa:	f000 ff0b 	bl	8004314 <MX_GPIO_Init>
	MX_DMA_Init();
 80034fe:	f000 fee3 	bl	80042c8 <MX_DMA_Init>
	MX_I2C1_Init();
 8003502:	f000 fb1b 	bl	8003b3c <MX_I2C1_Init>
	MX_TIM1_Init();
 8003506:	f000 fb47 	bl	8003b98 <MX_TIM1_Init>
	MX_TIM2_Init();
 800350a:	f000 fc09 	bl	8003d20 <MX_TIM2_Init>
	MX_TIM3_Init();
 800350e:	f000 fc5b 	bl	8003dc8 <MX_TIM3_Init>
	MX_TIM4_Init();
 8003512:	f000 fcad 	bl	8003e70 <MX_TIM4_Init>
	MX_TIM5_Init();
 8003516:	f000 fcff 	bl	8003f18 <MX_TIM5_Init>
	MX_TIM8_Init();
 800351a:	f000 fdbd 	bl	8004098 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 800351e:	f000 fe7f 	bl	8004220 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8003522:	f000 fea7 	bl	8004274 <MX_USART3_UART_Init>
	MX_TIM6_Init();
 8003526:	f000 fd4b 	bl	8003fc0 <MX_TIM6_Init>
	MX_TIM7_Init();
 800352a:	f000 fd7f 	bl	800402c <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */
	//Motor initialization part
	cmotor_lf.encoderInverted = 1;
 800352e:	4b99      	ldr	r3, [pc, #612]	; (8003794 <main+0x2a8>)
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lb.encoderInverted = 1;
 8003536:	4b98      	ldr	r3, [pc, #608]	; (8003798 <main+0x2ac>)
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	HUAN_MOTOR1_Init();
 800353e:	f000 ff3f 	bl	80043c0 <HUAN_MOTOR1_Init>
	HUAN_MOTOR2_Init();
 8003542:	f000 ff71 	bl	8004428 <HUAN_MOTOR2_Init>
	HUAN_MOTOR3_Init();
 8003546:	f000 ffa3 	bl	8004490 <HUAN_MOTOR3_Init>
	HUAN_MOTOR4_Init();
 800354a:	f000 ffd5 	bl	80044f8 <HUAN_MOTOR4_Init>
	HUAN_IMU_Init();
 800354e:	f001 f807 	bl	8004560 <HUAN_IMU_Init>
	HUAN_ZIGBEE_Init();
 8003552:	f001 f819 	bl	8004588 <HUAN_ZIGBEE_Init>
	ssd1306_Init();
 8003556:	f001 ff97 	bl	8005488 <ssd1306_Init>
	huansic_order_init();
 800355a:	f7fe fdd9 	bl	8002110 <huansic_order_init>
	order_list_init();
 800355e:	f001 f99d 	bl	800489c <order_list_init>
	exitpoints_init();
 8003562:	f001 fa3d 	bl	80049e0 <exitpoints_init>
	// tick per motor rev = 1080 (measured)
	// tick per rotor rev = 54 (calculated)
	// reduction ratio = 20 (given)

	//Set PID timer after data stables
	HAL_Delay(20);
 8003566:	2014      	movs	r0, #20
 8003568:	f003 f834 	bl	80065d4 <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim6);
 800356c:	488b      	ldr	r0, [pc, #556]	; (800379c <main+0x2b0>)
 800356e:	f005 f9cd 	bl	800890c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8003572:	488b      	ldr	r0, [pc, #556]	; (80037a0 <main+0x2b4>)
 8003574:	f005 f9ca 	bl	800890c <HAL_TIM_Base_Start_IT>

	jy62_DMA_ErrorCount = 0;
 8003578:	4b8a      	ldr	r3, [pc, #552]	; (80037a4 <main+0x2b8>)
 800357a:	2200      	movs	r2, #0
 800357c:	701a      	strb	r2, [r3, #0]
	jy62_IT_SuccessCount = 0;
 800357e:	4b8a      	ldr	r3, [pc, #552]	; (80037a8 <main+0x2bc>)
 8003580:	2200      	movs	r2, #0
 8003582:	701a      	strb	r2, [r3, #0]
	xb_DMA_SW_ErrorCount = 0;
 8003584:	4b89      	ldr	r3, [pc, #548]	; (80037ac <main+0x2c0>)
 8003586:	2200      	movs	r2, #0
 8003588:	701a      	strb	r2, [r3, #0]
	xb_DMA_HW_ErrorCount = 0;
 800358a:	4b89      	ldr	r3, [pc, #548]	; (80037b0 <main+0x2c4>)
 800358c:	2200      	movs	r2, #0
 800358e:	701a      	strb	r2, [r3, #0]
	xb_IT_SuccessCount = 0;
 8003590:	4b88      	ldr	r3, [pc, #544]	; (80037b4 <main+0x2c8>)
 8003592:	2200      	movs	r2, #0
 8003594:	701a      	strb	r2, [r3, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	sprintf(firstLine, "    ERR   SUC");
 8003596:	4988      	ldr	r1, [pc, #544]	; (80037b8 <main+0x2cc>)
 8003598:	4888      	ldr	r0, [pc, #544]	; (80037bc <main+0x2d0>)
 800359a:	f007 fcdf 	bl	800af5c <siprintf>
	sprintf(secondLine, "XB");
 800359e:	4988      	ldr	r1, [pc, #544]	; (80037c0 <main+0x2d4>)
 80035a0:	4888      	ldr	r0, [pc, #544]	; (80037c4 <main+0x2d8>)
 80035a2:	f007 fcdb 	bl	800af5c <siprintf>
	sprintf(thirdLine, "JY");
 80035a6:	4988      	ldr	r1, [pc, #544]	; (80037c8 <main+0x2dc>)
 80035a8:	4888      	ldr	r0, [pc, #544]	; (80037cc <main+0x2e0>)
 80035aa:	f007 fcd7 	bl	800af5c <siprintf>
	ssd1306_WriteString(firstLine, Font_6x8, White);
 80035ae:	4a88      	ldr	r2, [pc, #544]	; (80037d0 <main+0x2e4>)
 80035b0:	2301      	movs	r3, #1
 80035b2:	ca06      	ldmia	r2, {r1, r2}
 80035b4:	4881      	ldr	r0, [pc, #516]	; (80037bc <main+0x2d0>)
 80035b6:	f002 f8f5 	bl	80057a4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 8);
 80035ba:	2108      	movs	r1, #8
 80035bc:	2000      	movs	r0, #0
 80035be:	f002 f917 	bl	80057f0 <ssd1306_SetCursor>
	ssd1306_WriteString(secondLine, Font_6x8, White);
 80035c2:	4a83      	ldr	r2, [pc, #524]	; (80037d0 <main+0x2e4>)
 80035c4:	2301      	movs	r3, #1
 80035c6:	ca06      	ldmia	r2, {r1, r2}
 80035c8:	487e      	ldr	r0, [pc, #504]	; (80037c4 <main+0x2d8>)
 80035ca:	f002 f8eb 	bl	80057a4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 16);
 80035ce:	2110      	movs	r1, #16
 80035d0:	2000      	movs	r0, #0
 80035d2:	f002 f90d 	bl	80057f0 <ssd1306_SetCursor>
	ssd1306_WriteString(thirdLine, Font_6x8, White);
 80035d6:	4a7e      	ldr	r2, [pc, #504]	; (80037d0 <main+0x2e4>)
 80035d8:	2301      	movs	r3, #1
 80035da:	ca06      	ldmia	r2, {r1, r2}
 80035dc:	487b      	ldr	r0, [pc, #492]	; (80037cc <main+0x2e0>)
 80035de:	f002 f8e1 	bl	80057a4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80035e2:	f001 ffdd 	bl	80055a0 <ssd1306_UpdateScreen>

	CoordinateUpdate = 0;
 80035e6:	4b7b      	ldr	r3, [pc, #492]	; (80037d4 <main+0x2e8>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	701a      	strb	r2, [r3, #0]
	int8_t merchant_index = -1;
 80035ec:	23ff      	movs	r3, #255	; 0xff
 80035ee:	71fb      	strb	r3, [r7, #7]
//		HAL_Delay(1000);
//		chao_move_angle(180, 2000);
//		HAL_Delay(1000);
//		chao_move_angle(270, 2000);

		if (gameStatus == 0) {		// if the game is not running
 80035f0:	4b79      	ldr	r3, [pc, #484]	; (80037d8 <main+0x2ec>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0fb      	beq.n	80035f0 <main+0x104>
//	    	HAL_Delay(1000);
//	    	LED1_OFF;
		}
		else
		{
			while (gameStage == 0) {		// pre-match
 80035f8:	e00d      	b.n	8003616 <main+0x12a>
				chao_move_angle(0, 0);
 80035fa:	f04f 0100 	mov.w	r1, #0
 80035fe:	f04f 0000 	mov.w	r0, #0
 8003602:	f7fd fdf9 	bl	80011f8 <chao_move_angle>
				// find angle offset
				//initangleZ = -himu.theta[2];
				// do some initialization
				Cal_Battery_Coord();
 8003606:	f002 fe39 	bl	800627c <Cal_Battery_Coord>
				// get obstacle list
				huansic_xb_requestGameInfo(&hxb);
 800360a:	4874      	ldr	r0, [pc, #464]	; (80037dc <main+0x2f0>)
 800360c:	f7ff feb6 	bl	800337c <huansic_xb_requestGameInfo>
				task_mode = 0;
 8003610:	4b73      	ldr	r3, [pc, #460]	; (80037e0 <main+0x2f4>)
 8003612:	2200      	movs	r2, #0
 8003614:	701a      	strb	r2, [r3, #0]
			while (gameStage == 0) {		// pre-match
 8003616:	4b73      	ldr	r3, [pc, #460]	; (80037e4 <main+0x2f8>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0ed      	beq.n	80035fa <main+0x10e>
			}

			while (gameStage == 1) {			// first-half
 800361e:	e12a      	b.n	8003876 <main+0x38a>
				if (task_mode == 0) {
 8003620:	4b6f      	ldr	r3, [pc, #444]	; (80037e0 <main+0x2f4>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d110      	bne.n	800364a <main+0x15e>
					//setChargingPile
					set_Beacons();
 8003628:	f002 fe00 	bl	800622c <set_Beacons>
					while (orders.length == 0)
 800362c:	e005      	b.n	800363a <main+0x14e>
					{
						chao_move_angle(0, 0);
 800362e:	f04f 0100 	mov.w	r1, #0
 8003632:	f04f 0000 	mov.w	r0, #0
 8003636:	f7fd fddf 	bl	80011f8 <chao_move_angle>
					while (orders.length == 0)
 800363a:	4b6b      	ldr	r3, [pc, #428]	; (80037e8 <main+0x2fc>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f5      	beq.n	800362e <main+0x142>
					}
					task_mode = 4;
 8003642:	4b67      	ldr	r3, [pc, #412]	; (80037e0 <main+0x2f4>)
 8003644:	2204      	movs	r2, #4
 8003646:	701a      	strb	r2, [r3, #0]
 8003648:	e115      	b.n	8003876 <main+0x38a>
				}
				else if(hxb.lastUpdated + 1000 < HAL_GetTick()) {
 800364a:	4b64      	ldr	r3, [pc, #400]	; (80037dc <main+0x2f0>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f503 747a 	add.w	r4, r3, #1000	; 0x3e8
 8003652:	f002 ffb5 	bl	80065c0 <HAL_GetTick>
 8003656:	4603      	mov	r3, r0
 8003658:	429c      	cmp	r4, r3
 800365a:	d206      	bcs.n	800366a <main+0x17e>
					chao_move_angle(0, 0);
 800365c:	f04f 0100 	mov.w	r1, #0
 8003660:	f04f 0000 	mov.w	r0, #0
 8003664:	f7fd fdc8 	bl	80011f8 <chao_move_angle>
 8003668:	e105      	b.n	8003876 <main+0x38a>
				}
				else {
					if (task_mode == 1) {
 800366a:	4b5d      	ldr	r3, [pc, #372]	; (80037e0 <main+0x2f4>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d129      	bne.n	80036c6 <main+0x1da>
						for (uint8_t i = merchant_index + 1; i < orders.length; i++)
 8003672:	79fb      	ldrb	r3, [r7, #7]
 8003674:	3301      	adds	r3, #1
 8003676:	71bb      	strb	r3, [r7, #6]
 8003678:	e00f      	b.n	800369a <main+0x1ae>
								{
							orders.buffer[i - 1] = orders.buffer[i];
 800367a:	79bb      	ldrb	r3, [r7, #6]
 800367c:	79ba      	ldrb	r2, [r7, #6]
 800367e:	3a01      	subs	r2, #1
 8003680:	4959      	ldr	r1, [pc, #356]	; (80037e8 <main+0x2fc>)
 8003682:	0092      	lsls	r2, r2, #2
 8003684:	440a      	add	r2, r1
 8003686:	4958      	ldr	r1, [pc, #352]	; (80037e8 <main+0x2fc>)
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	3202      	adds	r2, #2
 800368e:	3302      	adds	r3, #2
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6013      	str	r3, [r2, #0]
						for (uint8_t i = merchant_index + 1; i < orders.length; i++)
 8003694:	79bb      	ldrb	r3, [r7, #6]
 8003696:	3301      	adds	r3, #1
 8003698:	71bb      	strb	r3, [r7, #6]
 800369a:	4b53      	ldr	r3, [pc, #332]	; (80037e8 <main+0x2fc>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	79ba      	ldrb	r2, [r7, #6]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d3ea      	bcc.n	800367a <main+0x18e>
						}
						orders.length -= 1;
 80036a4:	4b50      	ldr	r3, [pc, #320]	; (80037e8 <main+0x2fc>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	4b4e      	ldr	r3, [pc, #312]	; (80037e8 <main+0x2fc>)
 80036ae:	701a      	strb	r2, [r3, #0]
						Get_packet(merchant);
 80036b0:	4b4e      	ldr	r3, [pc, #312]	; (80037ec <main+0x300>)
 80036b2:	6818      	ldr	r0, [r3, #0]
 80036b4:	f002 fe18 	bl	80062e8 <Get_packet>
						task_mode = 4;
 80036b8:	4b49      	ldr	r3, [pc, #292]	; (80037e0 <main+0x2f4>)
 80036ba:	2204      	movs	r2, #4
 80036bc:	701a      	strb	r2, [r3, #0]
						HAL_Delay(100);
 80036be:	2064      	movs	r0, #100	; 0x64
 80036c0:	f002 ff88 	bl	80065d4 <HAL_Delay>
 80036c4:	e0d7      	b.n	8003876 <main+0x38a>
					} else if (task_mode == 2) {
 80036c6:	4b46      	ldr	r3, [pc, #280]	; (80037e0 <main+0x2f4>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d107      	bne.n	80036de <main+0x1f2>
						Send_packet(consumer);
 80036ce:	4b48      	ldr	r3, [pc, #288]	; (80037f0 <main+0x304>)
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	f002 fe15 	bl	8006300 <Send_packet>
						task_mode = 4;
 80036d6:	4b42      	ldr	r3, [pc, #264]	; (80037e0 <main+0x2f4>)
 80036d8:	2204      	movs	r2, #4
 80036da:	701a      	strb	r2, [r3, #0]
 80036dc:	e0cb      	b.n	8003876 <main+0x38a>
					}
					else if (task_mode == 4)			// if task_mode == 4
 80036de:	4b40      	ldr	r3, [pc, #256]	; (80037e0 <main+0x2f4>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	f040 80c7 	bne.w	8003876 <main+0x38a>
					{
						merchant_index = Get_nearest_order();
 80036e8:	f001 f92a 	bl	8004940 <Get_nearest_order>
 80036ec:	4603      	mov	r3, r0
 80036ee:	71fb      	strb	r3, [r7, #7]
						if (merchant_index == -1)
 80036f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f8:	d104      	bne.n	8003704 <main+0x218>
							merchant = myCoord;
 80036fa:	4a3c      	ldr	r2, [pc, #240]	; (80037ec <main+0x300>)
 80036fc:	4b3d      	ldr	r3, [pc, #244]	; (80037f4 <main+0x308>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	e009      	b.n	8003718 <main+0x22c>
						else
							merchant = orders.buffer[merchant_index];
 8003704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003708:	4938      	ldr	r1, [pc, #224]	; (80037ec <main+0x300>)
 800370a:	4a37      	ldr	r2, [pc, #220]	; (80037e8 <main+0x2fc>)
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	460a      	mov	r2, r1
 8003712:	3302      	adds	r3, #2
 8003714:	6818      	ldr	r0, [r3, #0]
 8003716:	6010      	str	r0, [r2, #0]
						consumer = Get_nearest_consumer();
 8003718:	f002 fdfe 	bl	8006318 <Get_nearest_consumer>
 800371c:	4603      	mov	r3, r0
 800371e:	4a34      	ldr	r2, [pc, #208]	; (80037f0 <main+0x304>)
 8003720:	6013      	str	r3, [r2, #0]

						if (delivering_num > 4) {
 8003722:	4b35      	ldr	r3, [pc, #212]	; (80037f8 <main+0x30c>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b04      	cmp	r3, #4
 8003728:	d903      	bls.n	8003732 <main+0x246>
							task_mode = 2;
 800372a:	4b2d      	ldr	r3, [pc, #180]	; (80037e0 <main+0x2f4>)
 800372c:	2202      	movs	r2, #2
 800372e:	701a      	strb	r2, [r3, #0]
 8003730:	e0a1      	b.n	8003876 <main+0x38a>
						}
						else if (merchant_index == -1)
 8003732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373a:	d10a      	bne.n	8003752 <main+0x266>
						{
							if (delivering_num == 0) {
 800373c:	4b2e      	ldr	r3, [pc, #184]	; (80037f8 <main+0x30c>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d102      	bne.n	800374a <main+0x25e>
								move_random();
 8003744:	f7fe f842 	bl	80017cc <move_random>
 8003748:	e095      	b.n	8003876 <main+0x38a>
							}
							else {
								task_mode = 2;
 800374a:	4b25      	ldr	r3, [pc, #148]	; (80037e0 <main+0x2f4>)
 800374c:	2202      	movs	r2, #2
 800374e:	701a      	strb	r2, [r3, #0]
 8003750:	e091      	b.n	8003876 <main+0x38a>
							}
						}
						else if (delivering_num == 0) {
 8003752:	4b29      	ldr	r3, [pc, #164]	; (80037f8 <main+0x30c>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d103      	bne.n	8003762 <main+0x276>
							task_mode = 1;
 800375a:	4b21      	ldr	r3, [pc, #132]	; (80037e0 <main+0x2f4>)
 800375c:	2201      	movs	r2, #1
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	e089      	b.n	8003876 <main+0x38a>
						}
						else if (overtime == 1) {
 8003762:	4b26      	ldr	r3, [pc, #152]	; (80037fc <main+0x310>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d106      	bne.n	8003778 <main+0x28c>
							task_mode = 2;
 800376a:	4b1d      	ldr	r3, [pc, #116]	; (80037e0 <main+0x2f4>)
 800376c:	2202      	movs	r2, #2
 800376e:	701a      	strb	r2, [r3, #0]
							overtime = 0;
 8003770:	4b22      	ldr	r3, [pc, #136]	; (80037fc <main+0x310>)
 8003772:	2200      	movs	r2, #0
 8003774:	701a      	strb	r2, [r3, #0]
 8003776:	e07e      	b.n	8003876 <main+0x38a>
						}
						else if (gameStageTimeLeft < 7000 && delivering_num > 0) {
 8003778:	4b21      	ldr	r3, [pc, #132]	; (8003800 <main+0x314>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f641 3257 	movw	r2, #6999	; 0x1b57
 8003780:	4293      	cmp	r3, r2
 8003782:	d83f      	bhi.n	8003804 <main+0x318>
 8003784:	4b1c      	ldr	r3, [pc, #112]	; (80037f8 <main+0x30c>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d03b      	beq.n	8003804 <main+0x318>
							task_mode = 2;
 800378c:	4b14      	ldr	r3, [pc, #80]	; (80037e0 <main+0x2f4>)
 800378e:	2202      	movs	r2, #2
 8003790:	701a      	strb	r2, [r3, #0]
 8003792:	e070      	b.n	8003876 <main+0x38a>
 8003794:	20000da8 	.word	0x20000da8
 8003798:	20000e20 	.word	0x20000e20
 800379c:	20000bc0 	.word	0x20000bc0
 80037a0:	20000c08 	.word	0x20000c08
 80037a4:	200010dc 	.word	0x200010dc
 80037a8:	200010dd 	.word	0x200010dd
 80037ac:	200010de 	.word	0x200010de
 80037b0:	200010df 	.word	0x200010df
 80037b4:	200010e0 	.word	0x200010e0
 80037b8:	0800d0f8 	.word	0x0800d0f8
 80037bc:	20001088 	.word	0x20001088
 80037c0:	0800d108 	.word	0x0800d108
 80037c4:	200010a0 	.word	0x200010a0
 80037c8:	0800d10c 	.word	0x0800d10c
 80037cc:	200010b8 	.word	0x200010b8
 80037d0:	20000010 	.word	0x20000010
 80037d4:	20001074 	.word	0x20001074
 80037d8:	20000fcd 	.word	0x20000fcd
 80037dc:	20000ef0 	.word	0x20000ef0
 80037e0:	20000fce 	.word	0x20000fce
 80037e4:	20000fcc 	.word	0x20000fcc
 80037e8:	200010e4 	.word	0x200010e4
 80037ec:	200010d0 	.word	0x200010d0
 80037f0:	200010d4 	.word	0x200010d4
 80037f4:	20001068 	.word	0x20001068
 80037f8:	20001064 	.word	0x20001064
 80037fc:	20001075 	.word	0x20001075
 8003800:	20001084 	.word	0x20001084
						}
						else if ((abs(merchant.x - myCoord.x) + abs(merchant.y - myCoord.y))
 8003804:	4b9e      	ldr	r3, [pc, #632]	; (8003a80 <main+0x594>)
 8003806:	f9b3 3000 	ldrsh.w	r3, [r3]
 800380a:	461a      	mov	r2, r3
 800380c:	4b9d      	ldr	r3, [pc, #628]	; (8003a84 <main+0x598>)
 800380e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003818:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800381c:	4b98      	ldr	r3, [pc, #608]	; (8003a80 <main+0x594>)
 800381e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003822:	4619      	mov	r1, r3
 8003824:	4b97      	ldr	r3, [pc, #604]	; (8003a84 <main+0x598>)
 8003826:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800382a:	1acb      	subs	r3, r1, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	bfb8      	it	lt
 8003830:	425b      	neglt	r3, r3
 8003832:	441a      	add	r2, r3
								< (abs(consumer.x - myCoord.x) + abs(consumer.y - myCoord.y))) {
 8003834:	4b94      	ldr	r3, [pc, #592]	; (8003a88 <main+0x59c>)
 8003836:	f9b3 3000 	ldrsh.w	r3, [r3]
 800383a:	4619      	mov	r1, r3
 800383c:	4b91      	ldr	r3, [pc, #580]	; (8003a84 <main+0x598>)
 800383e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003842:	1acb      	subs	r3, r1, r3
 8003844:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8003848:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800384c:	4b8e      	ldr	r3, [pc, #568]	; (8003a88 <main+0x59c>)
 800384e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003852:	4618      	mov	r0, r3
 8003854:	4b8b      	ldr	r3, [pc, #556]	; (8003a84 <main+0x598>)
 8003856:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800385a:	1ac3      	subs	r3, r0, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	bfb8      	it	lt
 8003860:	425b      	neglt	r3, r3
 8003862:	440b      	add	r3, r1
						else if ((abs(merchant.x - myCoord.x) + abs(merchant.y - myCoord.y))
 8003864:	429a      	cmp	r2, r3
 8003866:	da03      	bge.n	8003870 <main+0x384>
							task_mode = 1;
 8003868:	4b88      	ldr	r3, [pc, #544]	; (8003a8c <main+0x5a0>)
 800386a:	2201      	movs	r2, #1
 800386c:	701a      	strb	r2, [r3, #0]
 800386e:	e002      	b.n	8003876 <main+0x38a>
						} else {
							task_mode = 2;
 8003870:	4b86      	ldr	r3, [pc, #536]	; (8003a8c <main+0x5a0>)
 8003872:	2202      	movs	r2, #2
 8003874:	701a      	strb	r2, [r3, #0]
			while (gameStage == 1) {			// first-half
 8003876:	4b86      	ldr	r3, [pc, #536]	; (8003a90 <main+0x5a4>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b01      	cmp	r3, #1
 800387c:	f43f aed0 	beq.w	8003620 <main+0x134>
					}
				}

			}

			while (gameStage == 2) {			// second-half
 8003880:	e0f8      	b.n	8003a74 <main+0x588>
				while (myCharge < 500)
				{
//					huansic_xb_requestGameInfo(&hxb);
					charge = Get_nearest_Beacon();
 8003882:	f002 fdc7 	bl	8006414 <Get_nearest_Beacon>
 8003886:	4603      	mov	r3, r0
 8003888:	4a82      	ldr	r2, [pc, #520]	; (8003a94 <main+0x5a8>)
 800388a:	6013      	str	r3, [r2, #0]
					GotoDestination(charge, 0);
 800388c:	4b81      	ldr	r3, [pc, #516]	; (8003a94 <main+0x5a8>)
 800388e:	2100      	movs	r1, #0
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	f001 f8dd 	bl	8004a50 <GotoDestination>
				while (myCharge < 500)
 8003896:	4b80      	ldr	r3, [pc, #512]	; (8003a98 <main+0x5ac>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800389e:	dbf0      	blt.n	8003882 <main+0x396>
				}
				if(hxb.lastUpdated + 2000 < HAL_GetTick()) {
 80038a0:	4b7e      	ldr	r3, [pc, #504]	; (8003a9c <main+0x5b0>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
 80038a8:	f002 fe8a 	bl	80065c0 <HAL_GetTick>
 80038ac:	4603      	mov	r3, r0
 80038ae:	429c      	cmp	r4, r3
 80038b0:	d206      	bcs.n	80038c0 <main+0x3d4>
					chao_move_angle(0, 0);
 80038b2:	f04f 0100 	mov.w	r1, #0
 80038b6:	f04f 0000 	mov.w	r0, #0
 80038ba:	f7fd fc9d 	bl	80011f8 <chao_move_angle>
 80038be:	e0d9      	b.n	8003a74 <main+0x588>
				}
				else if (task_mode == 1) {
 80038c0:	4b72      	ldr	r3, [pc, #456]	; (8003a8c <main+0x5a0>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d129      	bne.n	800391c <main+0x430>
					for (uint8_t i = merchant_index + 1; i < orders.length; i++)
 80038c8:	79fb      	ldrb	r3, [r7, #7]
 80038ca:	3301      	adds	r3, #1
 80038cc:	717b      	strb	r3, [r7, #5]
 80038ce:	e00f      	b.n	80038f0 <main+0x404>
							{
						orders.buffer[i - 1] = orders.buffer[i];
 80038d0:	797b      	ldrb	r3, [r7, #5]
 80038d2:	797a      	ldrb	r2, [r7, #5]
 80038d4:	3a01      	subs	r2, #1
 80038d6:	4972      	ldr	r1, [pc, #456]	; (8003aa0 <main+0x5b4>)
 80038d8:	0092      	lsls	r2, r2, #2
 80038da:	440a      	add	r2, r1
 80038dc:	4970      	ldr	r1, [pc, #448]	; (8003aa0 <main+0x5b4>)
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	3202      	adds	r2, #2
 80038e4:	3302      	adds	r3, #2
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6013      	str	r3, [r2, #0]
					for (uint8_t i = merchant_index + 1; i < orders.length; i++)
 80038ea:	797b      	ldrb	r3, [r7, #5]
 80038ec:	3301      	adds	r3, #1
 80038ee:	717b      	strb	r3, [r7, #5]
 80038f0:	4b6b      	ldr	r3, [pc, #428]	; (8003aa0 <main+0x5b4>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	797a      	ldrb	r2, [r7, #5]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d3ea      	bcc.n	80038d0 <main+0x3e4>
					}
					orders.length -= 1;
 80038fa:	4b69      	ldr	r3, [pc, #420]	; (8003aa0 <main+0x5b4>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	3b01      	subs	r3, #1
 8003900:	b2da      	uxtb	r2, r3
 8003902:	4b67      	ldr	r3, [pc, #412]	; (8003aa0 <main+0x5b4>)
 8003904:	701a      	strb	r2, [r3, #0]
					Get_packet(merchant);
 8003906:	4b5e      	ldr	r3, [pc, #376]	; (8003a80 <main+0x594>)
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	f002 fced 	bl	80062e8 <Get_packet>
					task_mode = 4;
 800390e:	4b5f      	ldr	r3, [pc, #380]	; (8003a8c <main+0x5a0>)
 8003910:	2204      	movs	r2, #4
 8003912:	701a      	strb	r2, [r3, #0]
					HAL_Delay(100);
 8003914:	2064      	movs	r0, #100	; 0x64
 8003916:	f002 fe5d 	bl	80065d4 <HAL_Delay>
 800391a:	e0ab      	b.n	8003a74 <main+0x588>
				} else if (task_mode == 2) {
 800391c:	4b5b      	ldr	r3, [pc, #364]	; (8003a8c <main+0x5a0>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b02      	cmp	r3, #2
 8003922:	d107      	bne.n	8003934 <main+0x448>
					Send_packet(consumer);
 8003924:	4b58      	ldr	r3, [pc, #352]	; (8003a88 <main+0x59c>)
 8003926:	6818      	ldr	r0, [r3, #0]
 8003928:	f002 fcea 	bl	8006300 <Send_packet>
					task_mode = 4;
 800392c:	4b57      	ldr	r3, [pc, #348]	; (8003a8c <main+0x5a0>)
 800392e:	2204      	movs	r2, #4
 8003930:	701a      	strb	r2, [r3, #0]
 8003932:	e09f      	b.n	8003a74 <main+0x588>
				}
				else if (task_mode == 4)			// if task_mode == 4
 8003934:	4b55      	ldr	r3, [pc, #340]	; (8003a8c <main+0x5a0>)
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b04      	cmp	r3, #4
 800393a:	f040 8098 	bne.w	8003a6e <main+0x582>
						{
					merchant_index = Get_nearest_order();
 800393e:	f000 ffff 	bl	8004940 <Get_nearest_order>
 8003942:	4603      	mov	r3, r0
 8003944:	71fb      	strb	r3, [r7, #7]
					if (merchant_index == -1)
 8003946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394e:	d104      	bne.n	800395a <main+0x46e>
						merchant = myCoord;
 8003950:	4a4b      	ldr	r2, [pc, #300]	; (8003a80 <main+0x594>)
 8003952:	4b4c      	ldr	r3, [pc, #304]	; (8003a84 <main+0x598>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	e009      	b.n	800396e <main+0x482>
					else
						merchant = orders.buffer[merchant_index];
 800395a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395e:	4948      	ldr	r1, [pc, #288]	; (8003a80 <main+0x594>)
 8003960:	4a4f      	ldr	r2, [pc, #316]	; (8003aa0 <main+0x5b4>)
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	460a      	mov	r2, r1
 8003968:	3302      	adds	r3, #2
 800396a:	6818      	ldr	r0, [r3, #0]
 800396c:	6010      	str	r0, [r2, #0]
					consumer = Get_nearest_consumer();
 800396e:	f002 fcd3 	bl	8006318 <Get_nearest_consumer>
 8003972:	4603      	mov	r3, r0
 8003974:	4a44      	ldr	r2, [pc, #272]	; (8003a88 <main+0x59c>)
 8003976:	6013      	str	r3, [r2, #0]

					if (delivering_num > 4) {
 8003978:	4b4a      	ldr	r3, [pc, #296]	; (8003aa4 <main+0x5b8>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b04      	cmp	r3, #4
 800397e:	d903      	bls.n	8003988 <main+0x49c>
						task_mode = 2;
 8003980:	4b42      	ldr	r3, [pc, #264]	; (8003a8c <main+0x5a0>)
 8003982:	2202      	movs	r2, #2
 8003984:	701a      	strb	r2, [r3, #0]
 8003986:	e075      	b.n	8003a74 <main+0x588>
					}
					else if (merchant_index == -1)
 8003988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003990:	d112      	bne.n	80039b8 <main+0x4cc>
							{
						if (delivering_num == 0) {
 8003992:	4b44      	ldr	r3, [pc, #272]	; (8003aa4 <main+0x5b8>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10a      	bne.n	80039b0 <main+0x4c4>
							charge = Get_nearest_Beacon();
 800399a:	f002 fd3b 	bl	8006414 <Get_nearest_Beacon>
 800399e:	4603      	mov	r3, r0
 80039a0:	4a3c      	ldr	r2, [pc, #240]	; (8003a94 <main+0x5a8>)
 80039a2:	6013      	str	r3, [r2, #0]
//							if(abs(myCoord.x - charge.x)+abs(myCoord.y-charge.y) < 5)
							GotoDestination(charge, 0);
 80039a4:	4b3b      	ldr	r3, [pc, #236]	; (8003a94 <main+0x5a8>)
 80039a6:	2100      	movs	r1, #0
 80039a8:	6818      	ldr	r0, [r3, #0]
 80039aa:	f001 f851 	bl	8004a50 <GotoDestination>
 80039ae:	e061      	b.n	8003a74 <main+0x588>
						}
						else {
							task_mode = 2;
 80039b0:	4b36      	ldr	r3, [pc, #216]	; (8003a8c <main+0x5a0>)
 80039b2:	2202      	movs	r2, #2
 80039b4:	701a      	strb	r2, [r3, #0]
 80039b6:	e05d      	b.n	8003a74 <main+0x588>
						}
					}
					else if (delivering_num == 0) {
 80039b8:	4b3a      	ldr	r3, [pc, #232]	; (8003aa4 <main+0x5b8>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d103      	bne.n	80039c8 <main+0x4dc>
						task_mode = 1;
 80039c0:	4b32      	ldr	r3, [pc, #200]	; (8003a8c <main+0x5a0>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	701a      	strb	r2, [r3, #0]
 80039c6:	e055      	b.n	8003a74 <main+0x588>
					}
					else if (overtime == 1) {
 80039c8:	4b37      	ldr	r3, [pc, #220]	; (8003aa8 <main+0x5bc>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d106      	bne.n	80039de <main+0x4f2>
						task_mode = 2;
 80039d0:	4b2e      	ldr	r3, [pc, #184]	; (8003a8c <main+0x5a0>)
 80039d2:	2202      	movs	r2, #2
 80039d4:	701a      	strb	r2, [r3, #0]
						overtime = 0;
 80039d6:	4b34      	ldr	r3, [pc, #208]	; (8003aa8 <main+0x5bc>)
 80039d8:	2200      	movs	r2, #0
 80039da:	701a      	strb	r2, [r3, #0]
 80039dc:	e04a      	b.n	8003a74 <main+0x588>
					}
					else if (gameStageTimeLeft < 10000 && delivering_num > 0) {
 80039de:	4b33      	ldr	r3, [pc, #204]	; (8003aac <main+0x5c0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f242 720f 	movw	r2, #9999	; 0x270f
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d807      	bhi.n	80039fa <main+0x50e>
 80039ea:	4b2e      	ldr	r3, [pc, #184]	; (8003aa4 <main+0x5b8>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <main+0x50e>
						task_mode = 2;
 80039f2:	4b26      	ldr	r3, [pc, #152]	; (8003a8c <main+0x5a0>)
 80039f4:	2202      	movs	r2, #2
 80039f6:	701a      	strb	r2, [r3, #0]
 80039f8:	e03c      	b.n	8003a74 <main+0x588>
					}
					else if ((abs(merchant.x - myCoord.x) + abs(merchant.y - myCoord.y))
 80039fa:	4b21      	ldr	r3, [pc, #132]	; (8003a80 <main+0x594>)
 80039fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a00:	461a      	mov	r2, r3
 8003a02:	4b20      	ldr	r3, [pc, #128]	; (8003a84 <main+0x598>)
 8003a04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003a0e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003a12:	4b1b      	ldr	r3, [pc, #108]	; (8003a80 <main+0x594>)
 8003a14:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4b1a      	ldr	r3, [pc, #104]	; (8003a84 <main+0x598>)
 8003a1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003a20:	1acb      	subs	r3, r1, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	bfb8      	it	lt
 8003a26:	425b      	neglt	r3, r3
 8003a28:	441a      	add	r2, r3
							< (abs(consumer.x - myCoord.x) + abs(consumer.y - myCoord.y))) {
 8003a2a:	4b17      	ldr	r3, [pc, #92]	; (8003a88 <main+0x59c>)
 8003a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a30:	4619      	mov	r1, r3
 8003a32:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <main+0x598>)
 8003a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a38:	1acb      	subs	r3, r1, r3
 8003a3a:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8003a3e:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8003a42:	4b11      	ldr	r3, [pc, #68]	; (8003a88 <main+0x59c>)
 8003a44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <main+0x598>)
 8003a4c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003a50:	1ac3      	subs	r3, r0, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	bfb8      	it	lt
 8003a56:	425b      	neglt	r3, r3
 8003a58:	440b      	add	r3, r1
					else if ((abs(merchant.x - myCoord.x) + abs(merchant.y - myCoord.y))
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	da03      	bge.n	8003a66 <main+0x57a>
						task_mode = 1;
 8003a5e:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <main+0x5a0>)
 8003a60:	2201      	movs	r2, #1
 8003a62:	701a      	strb	r2, [r3, #0]
 8003a64:	e006      	b.n	8003a74 <main+0x588>
					} else {
						task_mode = 2;
 8003a66:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <main+0x5a0>)
 8003a68:	2202      	movs	r2, #2
 8003a6a:	701a      	strb	r2, [r3, #0]
 8003a6c:	e002      	b.n	8003a74 <main+0x588>
					}
				}
				else
					task_mode = 4;
 8003a6e:	4b07      	ldr	r3, [pc, #28]	; (8003a8c <main+0x5a0>)
 8003a70:	2204      	movs	r2, #4
 8003a72:	701a      	strb	r2, [r3, #0]
			while (gameStage == 2) {			// second-half
 8003a74:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <main+0x5a4>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	f43f af0c 	beq.w	8003896 <main+0x3aa>
		if (gameStatus == 0) {		// if the game is not running
 8003a7e:	e5b7      	b.n	80035f0 <main+0x104>
 8003a80:	200010d0 	.word	0x200010d0
 8003a84:	20001068 	.word	0x20001068
 8003a88:	200010d4 	.word	0x200010d4
 8003a8c:	20000fce 	.word	0x20000fce
 8003a90:	20000fcc 	.word	0x20000fcc
 8003a94:	200010d8 	.word	0x200010d8
 8003a98:	20001080 	.word	0x20001080
 8003a9c:	20000ef0 	.word	0x20000ef0
 8003aa0:	200010e4 	.word	0x200010e4
 8003aa4:	20001064 	.word	0x20001064
 8003aa8:	20001075 	.word	0x20001075
 8003aac:	20001084 	.word	0x20001084

08003ab0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b090      	sub	sp, #64	; 0x40
 8003ab4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003ab6:	f107 0318 	add.w	r3, r7, #24
 8003aba:	2228      	movs	r2, #40	; 0x28
 8003abc:	2100      	movs	r1, #0
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f006 ff56 	bl	800a970 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003ac4:	1d3b      	adds	r3, r7, #4
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]
 8003aca:	605a      	str	r2, [r3, #4]
 8003acc:	609a      	str	r2, [r3, #8]
 8003ace:	60da      	str	r2, [r3, #12]
 8003ad0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ad6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ada:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8003adc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ae0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003aea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003aee:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003af0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003af4:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003af6:	f107 0318 	add.w	r3, r7, #24
 8003afa:	4618      	mov	r0, r3
 8003afc:	f004 fa9a 	bl	8008034 <HAL_RCC_OscConfig>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <SystemClock_Config+0x5a>
			{
		Error_Handler();
 8003b06:	f000 fec3 	bl	8004890 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003b0a:	230f      	movs	r3, #15
 8003b0c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b1a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003b20:	1d3b      	adds	r3, r7, #4
 8003b22:	2102      	movs	r1, #2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f004 fd07 	bl	8008538 <HAL_RCC_ClockConfig>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <SystemClock_Config+0x84>
			{
		Error_Handler();
 8003b30:	f000 feae 	bl	8004890 <Error_Handler>
	}
}
 8003b34:	bf00      	nop
 8003b36:	3740      	adds	r7, #64	; 0x40
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003b40:	4b12      	ldr	r3, [pc, #72]	; (8003b8c <MX_I2C1_Init+0x50>)
 8003b42:	4a13      	ldr	r2, [pc, #76]	; (8003b90 <MX_I2C1_Init+0x54>)
 8003b44:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8003b46:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <MX_I2C1_Init+0x50>)
 8003b48:	4a12      	ldr	r2, [pc, #72]	; (8003b94 <MX_I2C1_Init+0x58>)
 8003b4a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b4c:	4b0f      	ldr	r3, [pc, #60]	; (8003b8c <MX_I2C1_Init+0x50>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8003b52:	4b0e      	ldr	r3, [pc, #56]	; (8003b8c <MX_I2C1_Init+0x50>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b58:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <MX_I2C1_Init+0x50>)
 8003b5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b5e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b60:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <MX_I2C1_Init+0x50>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8003b66:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <MX_I2C1_Init+0x50>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b6c:	4b07      	ldr	r3, [pc, #28]	; (8003b8c <MX_I2C1_Init+0x50>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b72:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <MX_I2C1_Init+0x50>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003b78:	4804      	ldr	r0, [pc, #16]	; (8003b8c <MX_I2C1_Init+0x50>)
 8003b7a:	f003 fe01 	bl	8007780 <HAL_I2C_Init>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <MX_I2C1_Init+0x4c>
			{
		Error_Handler();
 8003b84:	f000 fe84 	bl	8004890 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8003b88:	bf00      	nop
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	20000a04 	.word	0x20000a04
 8003b90:	40005400 	.word	0x40005400
 8003b94:	000186a0 	.word	0x000186a0

08003b98 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b096      	sub	sp, #88	; 0x58
 8003b9c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003b9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	605a      	str	r2, [r3, #4]
 8003ba8:	609a      	str	r2, [r3, #8]
 8003baa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003bac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	605a      	str	r2, [r3, #4]
 8003bc0:	609a      	str	r2, [r3, #8]
 8003bc2:	60da      	str	r2, [r3, #12]
 8003bc4:	611a      	str	r2, [r3, #16]
 8003bc6:	615a      	str	r2, [r3, #20]
 8003bc8:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003bca:	1d3b      	adds	r3, r7, #4
 8003bcc:	2220      	movs	r2, #32
 8003bce:	2100      	movs	r1, #0
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f006 fecd 	bl	800a970 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8003bd6:	4b50      	ldr	r3, [pc, #320]	; (8003d18 <MX_TIM1_Init+0x180>)
 8003bd8:	4a50      	ldr	r2, [pc, #320]	; (8003d1c <MX_TIM1_Init+0x184>)
 8003bda:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8003bdc:	4b4e      	ldr	r3, [pc, #312]	; (8003d18 <MX_TIM1_Init+0x180>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003be2:	4b4d      	ldr	r3, [pc, #308]	; (8003d18 <MX_TIM1_Init+0x180>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8003be8:	4b4b      	ldr	r3, [pc, #300]	; (8003d18 <MX_TIM1_Init+0x180>)
 8003bea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bee:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bf0:	4b49      	ldr	r3, [pc, #292]	; (8003d18 <MX_TIM1_Init+0x180>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003bf6:	4b48      	ldr	r3, [pc, #288]	; (8003d18 <MX_TIM1_Init+0x180>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bfc:	4b46      	ldr	r3, [pc, #280]	; (8003d18 <MX_TIM1_Init+0x180>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003c02:	4845      	ldr	r0, [pc, #276]	; (8003d18 <MX_TIM1_Init+0x180>)
 8003c04:	f004 fe32 	bl	800886c <HAL_TIM_Base_Init>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <MX_TIM1_Init+0x7a>
			{
		Error_Handler();
 8003c0e:	f000 fe3f 	bl	8004890 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c16:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003c18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	483e      	ldr	r0, [pc, #248]	; (8003d18 <MX_TIM1_Init+0x180>)
 8003c20:	f005 fadc 	bl	80091dc <HAL_TIM_ConfigClockSource>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <MX_TIM1_Init+0x96>
			{
		Error_Handler();
 8003c2a:	f000 fe31 	bl	8004890 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003c2e:	483a      	ldr	r0, [pc, #232]	; (8003d18 <MX_TIM1_Init+0x180>)
 8003c30:	f004 fecc 	bl	80089cc <HAL_TIM_PWM_Init>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <MX_TIM1_Init+0xa6>
			{
		Error_Handler();
 8003c3a:	f000 fe29 	bl	8004890 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c42:	2300      	movs	r3, #0
 8003c44:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003c46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4832      	ldr	r0, [pc, #200]	; (8003d18 <MX_TIM1_Init+0x180>)
 8003c4e:	f005 fe97 	bl	8009980 <HAL_TIMEx_MasterConfigSynchronization>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <MX_TIM1_Init+0xc4>
			{
		Error_Handler();
 8003c58:	f000 fe1a 	bl	8004890 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c5c:	2360      	movs	r3, #96	; 0x60
 8003c5e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c64:	2300      	movs	r3, #0
 8003c66:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003c70:	2300      	movs	r3, #0
 8003c72:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003c74:	2300      	movs	r3, #0
 8003c76:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	4619      	mov	r1, r3
 8003c80:	4825      	ldr	r0, [pc, #148]	; (8003d18 <MX_TIM1_Init+0x180>)
 8003c82:	f005 f9ed 	bl	8009060 <HAL_TIM_PWM_ConfigChannel>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <MX_TIM1_Init+0xf8>
			{
		Error_Handler();
 8003c8c:	f000 fe00 	bl	8004890 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c94:	2204      	movs	r2, #4
 8003c96:	4619      	mov	r1, r3
 8003c98:	481f      	ldr	r0, [pc, #124]	; (8003d18 <MX_TIM1_Init+0x180>)
 8003c9a:	f005 f9e1 	bl	8009060 <HAL_TIM_PWM_ConfigChannel>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <MX_TIM1_Init+0x110>
			{
		Error_Handler();
 8003ca4:	f000 fdf4 	bl	8004890 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cac:	2208      	movs	r2, #8
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4819      	ldr	r0, [pc, #100]	; (8003d18 <MX_TIM1_Init+0x180>)
 8003cb2:	f005 f9d5 	bl	8009060 <HAL_TIM_PWM_ConfigChannel>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <MX_TIM1_Init+0x128>
			{
		Error_Handler();
 8003cbc:	f000 fde8 	bl	8004890 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cc4:	220c      	movs	r2, #12
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4813      	ldr	r0, [pc, #76]	; (8003d18 <MX_TIM1_Init+0x180>)
 8003cca:	f005 f9c9 	bl	8009060 <HAL_TIM_PWM_ConfigChannel>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <MX_TIM1_Init+0x140>
			{
		Error_Handler();
 8003cd4:	f000 fddc 	bl	8004890 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003cec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cf0:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003cf6:	1d3b      	adds	r3, r7, #4
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4807      	ldr	r0, [pc, #28]	; (8003d18 <MX_TIM1_Init+0x180>)
 8003cfc:	f005 feac 	bl	8009a58 <HAL_TIMEx_ConfigBreakDeadTime>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <MX_TIM1_Init+0x172>
			{
		Error_Handler();
 8003d06:	f000 fdc3 	bl	8004890 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8003d0a:	4803      	ldr	r0, [pc, #12]	; (8003d18 <MX_TIM1_Init+0x180>)
 8003d0c:	f001 ff96 	bl	8005c3c <HAL_TIM_MspPostInit>

}
 8003d10:	bf00      	nop
 8003d12:	3758      	adds	r7, #88	; 0x58
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	20000a58 	.word	0x20000a58
 8003d1c:	40012c00 	.word	0x40012c00

08003d20 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08c      	sub	sp, #48	; 0x30
 8003d24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003d26:	f107 030c 	add.w	r3, r7, #12
 8003d2a:	2224      	movs	r2, #36	; 0x24
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f006 fe1e 	bl	800a970 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003d34:	1d3b      	adds	r3, r7, #4
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003d3c:	4b21      	ldr	r3, [pc, #132]	; (8003dc4 <MX_TIM2_Init+0xa4>)
 8003d3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d42:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8003d44:	4b1f      	ldr	r3, [pc, #124]	; (8003dc4 <MX_TIM2_Init+0xa4>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d4a:	4b1e      	ldr	r3, [pc, #120]	; (8003dc4 <MX_TIM2_Init+0xa4>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8003d50:	4b1c      	ldr	r3, [pc, #112]	; (8003dc4 <MX_TIM2_Init+0xa4>)
 8003d52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d56:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d58:	4b1a      	ldr	r3, [pc, #104]	; (8003dc4 <MX_TIM2_Init+0xa4>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d5e:	4b19      	ldr	r3, [pc, #100]	; (8003dc4 <MX_TIM2_Init+0xa4>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003d64:	2301      	movs	r3, #1
 8003d66:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003d74:	2300      	movs	r3, #0
 8003d76:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d80:	2300      	movs	r3, #0
 8003d82:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003d84:	2300      	movs	r3, #0
 8003d86:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003d88:	f107 030c 	add.w	r3, r7, #12
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	480d      	ldr	r0, [pc, #52]	; (8003dc4 <MX_TIM2_Init+0xa4>)
 8003d90:	f004 ff2e 	bl	8008bf0 <HAL_TIM_Encoder_Init>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <MX_TIM2_Init+0x7e>
			{
		Error_Handler();
 8003d9a:	f000 fd79 	bl	8004890 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003da2:	2300      	movs	r3, #0
 8003da4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003da6:	1d3b      	adds	r3, r7, #4
 8003da8:	4619      	mov	r1, r3
 8003daa:	4806      	ldr	r0, [pc, #24]	; (8003dc4 <MX_TIM2_Init+0xa4>)
 8003dac:	f005 fde8 	bl	8009980 <HAL_TIMEx_MasterConfigSynchronization>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <MX_TIM2_Init+0x9a>
			{
		Error_Handler();
 8003db6:	f000 fd6b 	bl	8004890 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8003dba:	bf00      	nop
 8003dbc:	3730      	adds	r7, #48	; 0x30
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20000aa0 	.word	0x20000aa0

08003dc8 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08c      	sub	sp, #48	; 0x30
 8003dcc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003dce:	f107 030c 	add.w	r3, r7, #12
 8003dd2:	2224      	movs	r2, #36	; 0x24
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f006 fdca 	bl	800a970 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003ddc:	1d3b      	adds	r3, r7, #4
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003de4:	4b20      	ldr	r3, [pc, #128]	; (8003e68 <MX_TIM3_Init+0xa0>)
 8003de6:	4a21      	ldr	r2, [pc, #132]	; (8003e6c <MX_TIM3_Init+0xa4>)
 8003de8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003dea:	4b1f      	ldr	r3, [pc, #124]	; (8003e68 <MX_TIM3_Init+0xa0>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003df0:	4b1d      	ldr	r3, [pc, #116]	; (8003e68 <MX_TIM3_Init+0xa0>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8003df6:	4b1c      	ldr	r3, [pc, #112]	; (8003e68 <MX_TIM3_Init+0xa0>)
 8003df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dfc:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dfe:	4b1a      	ldr	r3, [pc, #104]	; (8003e68 <MX_TIM3_Init+0xa0>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e04:	4b18      	ldr	r3, [pc, #96]	; (8003e68 <MX_TIM3_Init+0xa0>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003e12:	2301      	movs	r3, #1
 8003e14:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003e16:	2300      	movs	r3, #0
 8003e18:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003e22:	2301      	movs	r3, #1
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003e26:	2300      	movs	r3, #0
 8003e28:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003e2e:	f107 030c 	add.w	r3, r7, #12
 8003e32:	4619      	mov	r1, r3
 8003e34:	480c      	ldr	r0, [pc, #48]	; (8003e68 <MX_TIM3_Init+0xa0>)
 8003e36:	f004 fedb 	bl	8008bf0 <HAL_TIM_Encoder_Init>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <MX_TIM3_Init+0x7c>
			{
		Error_Handler();
 8003e40:	f000 fd26 	bl	8004890 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e44:	2300      	movs	r3, #0
 8003e46:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003e4c:	1d3b      	adds	r3, r7, #4
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4805      	ldr	r0, [pc, #20]	; (8003e68 <MX_TIM3_Init+0xa0>)
 8003e52:	f005 fd95 	bl	8009980 <HAL_TIMEx_MasterConfigSynchronization>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <MX_TIM3_Init+0x98>
			{
		Error_Handler();
 8003e5c:	f000 fd18 	bl	8004890 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8003e60:	bf00      	nop
 8003e62:	3730      	adds	r7, #48	; 0x30
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	20000ae8 	.word	0x20000ae8
 8003e6c:	40000400 	.word	0x40000400

08003e70 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08c      	sub	sp, #48	; 0x30
 8003e74:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003e76:	f107 030c 	add.w	r3, r7, #12
 8003e7a:	2224      	movs	r2, #36	; 0x24
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f006 fd76 	bl	800a970 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003e84:	1d3b      	adds	r3, r7, #4
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8003e8c:	4b20      	ldr	r3, [pc, #128]	; (8003f10 <MX_TIM4_Init+0xa0>)
 8003e8e:	4a21      	ldr	r2, [pc, #132]	; (8003f14 <MX_TIM4_Init+0xa4>)
 8003e90:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8003e92:	4b1f      	ldr	r3, [pc, #124]	; (8003f10 <MX_TIM4_Init+0xa0>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e98:	4b1d      	ldr	r3, [pc, #116]	; (8003f10 <MX_TIM4_Init+0xa0>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8003e9e:	4b1c      	ldr	r3, [pc, #112]	; (8003f10 <MX_TIM4_Init+0xa0>)
 8003ea0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ea4:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ea6:	4b1a      	ldr	r3, [pc, #104]	; (8003f10 <MX_TIM4_Init+0xa0>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003eac:	4b18      	ldr	r3, [pc, #96]	; (8003f10 <MX_TIM4_Init+0xa0>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003ed6:	f107 030c 	add.w	r3, r7, #12
 8003eda:	4619      	mov	r1, r3
 8003edc:	480c      	ldr	r0, [pc, #48]	; (8003f10 <MX_TIM4_Init+0xa0>)
 8003ede:	f004 fe87 	bl	8008bf0 <HAL_TIM_Encoder_Init>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <MX_TIM4_Init+0x7c>
			{
		Error_Handler();
 8003ee8:	f000 fcd2 	bl	8004890 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eec:	2300      	movs	r3, #0
 8003eee:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003ef4:	1d3b      	adds	r3, r7, #4
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4805      	ldr	r0, [pc, #20]	; (8003f10 <MX_TIM4_Init+0xa0>)
 8003efa:	f005 fd41 	bl	8009980 <HAL_TIMEx_MasterConfigSynchronization>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <MX_TIM4_Init+0x98>
			{
		Error_Handler();
 8003f04:	f000 fcc4 	bl	8004890 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8003f08:	bf00      	nop
 8003f0a:	3730      	adds	r7, #48	; 0x30
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20000b30 	.word	0x20000b30
 8003f14:	40000800 	.word	0x40000800

08003f18 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08c      	sub	sp, #48	; 0x30
 8003f1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003f1e:	f107 030c 	add.w	r3, r7, #12
 8003f22:	2224      	movs	r2, #36	; 0x24
 8003f24:	2100      	movs	r1, #0
 8003f26:	4618      	mov	r0, r3
 8003f28:	f006 fd22 	bl	800a970 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003f2c:	1d3b      	adds	r3, r7, #4
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8003f34:	4b20      	ldr	r3, [pc, #128]	; (8003fb8 <MX_TIM5_Init+0xa0>)
 8003f36:	4a21      	ldr	r2, [pc, #132]	; (8003fbc <MX_TIM5_Init+0xa4>)
 8003f38:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8003f3a:	4b1f      	ldr	r3, [pc, #124]	; (8003fb8 <MX_TIM5_Init+0xa0>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f40:	4b1d      	ldr	r3, [pc, #116]	; (8003fb8 <MX_TIM5_Init+0xa0>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 65535;
 8003f46:	4b1c      	ldr	r3, [pc, #112]	; (8003fb8 <MX_TIM5_Init+0xa0>)
 8003f48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f4c:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f4e:	4b1a      	ldr	r3, [pc, #104]	; (8003fb8 <MX_TIM5_Init+0xa0>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f54:	4b18      	ldr	r3, [pc, #96]	; (8003fb8 <MX_TIM5_Init+0xa0>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f62:	2301      	movs	r3, #1
 8003f64:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f66:	2300      	movs	r3, #0
 8003f68:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f72:	2301      	movs	r3, #1
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f76:	2300      	movs	r3, #0
 8003f78:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003f7e:	f107 030c 	add.w	r3, r7, #12
 8003f82:	4619      	mov	r1, r3
 8003f84:	480c      	ldr	r0, [pc, #48]	; (8003fb8 <MX_TIM5_Init+0xa0>)
 8003f86:	f004 fe33 	bl	8008bf0 <HAL_TIM_Encoder_Init>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <MX_TIM5_Init+0x7c>
			{
		Error_Handler();
 8003f90:	f000 fc7e 	bl	8004890 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f94:	2300      	movs	r3, #0
 8003f96:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003f9c:	1d3b      	adds	r3, r7, #4
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4805      	ldr	r0, [pc, #20]	; (8003fb8 <MX_TIM5_Init+0xa0>)
 8003fa2:	f005 fced 	bl	8009980 <HAL_TIMEx_MasterConfigSynchronization>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <MX_TIM5_Init+0x98>
			{
		Error_Handler();
 8003fac:	f000 fc70 	bl	8004890 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8003fb0:	bf00      	nop
 8003fb2:	3730      	adds	r7, #48	; 0x30
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	20000b78 	.word	0x20000b78
 8003fbc:	40000c00 	.word	0x40000c00

08003fc0 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003fc6:	463b      	mov	r3, r7
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8003fce:	4b15      	ldr	r3, [pc, #84]	; (8004024 <MX_TIM6_Init+0x64>)
 8003fd0:	4a15      	ldr	r2, [pc, #84]	; (8004028 <MX_TIM6_Init+0x68>)
 8003fd2:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 72 - 1;
 8003fd4:	4b13      	ldr	r3, [pc, #76]	; (8004024 <MX_TIM6_Init+0x64>)
 8003fd6:	2247      	movs	r2, #71	; 0x47
 8003fd8:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fda:	4b12      	ldr	r3, [pc, #72]	; (8004024 <MX_TIM6_Init+0x64>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 50000;
 8003fe0:	4b10      	ldr	r3, [pc, #64]	; (8004024 <MX_TIM6_Init+0x64>)
 8003fe2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003fe6:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fe8:	4b0e      	ldr	r3, [pc, #56]	; (8004024 <MX_TIM6_Init+0x64>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003fee:	480d      	ldr	r0, [pc, #52]	; (8004024 <MX_TIM6_Init+0x64>)
 8003ff0:	f004 fc3c 	bl	800886c <HAL_TIM_Base_Init>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <MX_TIM6_Init+0x3e>
			{
		Error_Handler();
 8003ffa:	f000 fc49 	bl	8004890 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ffe:	2300      	movs	r3, #0
 8004000:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004002:	2300      	movs	r3, #0
 8004004:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004006:	463b      	mov	r3, r7
 8004008:	4619      	mov	r1, r3
 800400a:	4806      	ldr	r0, [pc, #24]	; (8004024 <MX_TIM6_Init+0x64>)
 800400c:	f005 fcb8 	bl	8009980 <HAL_TIMEx_MasterConfigSynchronization>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <MX_TIM6_Init+0x5a>
			{
		Error_Handler();
 8004016:	f000 fc3b 	bl	8004890 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 800401a:	bf00      	nop
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20000bc0 	.word	0x20000bc0
 8004028:	40001000 	.word	0x40001000

0800402c <MX_TIM7_Init>:
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004032:	463b      	mov	r3, r7
 8004034:	2200      	movs	r2, #0
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 800403a:	4b15      	ldr	r3, [pc, #84]	; (8004090 <MX_TIM7_Init+0x64>)
 800403c:	4a15      	ldr	r2, [pc, #84]	; (8004094 <MX_TIM7_Init+0x68>)
 800403e:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 7200 - 1;
 8004040:	4b13      	ldr	r3, [pc, #76]	; (8004090 <MX_TIM7_Init+0x64>)
 8004042:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8004046:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004048:	4b11      	ldr	r3, [pc, #68]	; (8004090 <MX_TIM7_Init+0x64>)
 800404a:	2200      	movs	r2, #0
 800404c:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 10000 - 1;
 800404e:	4b10      	ldr	r3, [pc, #64]	; (8004090 <MX_TIM7_Init+0x64>)
 8004050:	f242 720f 	movw	r2, #9999	; 0x270f
 8004054:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004056:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <MX_TIM7_Init+0x64>)
 8004058:	2200      	movs	r2, #0
 800405a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800405c:	480c      	ldr	r0, [pc, #48]	; (8004090 <MX_TIM7_Init+0x64>)
 800405e:	f004 fc05 	bl	800886c <HAL_TIM_Base_Init>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <MX_TIM7_Init+0x40>
			{
		Error_Handler();
 8004068:	f000 fc12 	bl	8004890 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800406c:	2300      	movs	r3, #0
 800406e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004070:	2300      	movs	r3, #0
 8004072:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004074:	463b      	mov	r3, r7
 8004076:	4619      	mov	r1, r3
 8004078:	4805      	ldr	r0, [pc, #20]	; (8004090 <MX_TIM7_Init+0x64>)
 800407a:	f005 fc81 	bl	8009980 <HAL_TIMEx_MasterConfigSynchronization>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <MX_TIM7_Init+0x5c>
			{
		Error_Handler();
 8004084:	f000 fc04 	bl	8004890 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8004088:	bf00      	nop
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	20000c08 	.word	0x20000c08
 8004094:	40001400 	.word	0x40001400

08004098 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b096      	sub	sp, #88	; 0x58
 800409c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800409e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	605a      	str	r2, [r3, #4]
 80040a8:	609a      	str	r2, [r3, #8]
 80040aa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80040ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80040b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	605a      	str	r2, [r3, #4]
 80040c0:	609a      	str	r2, [r3, #8]
 80040c2:	60da      	str	r2, [r3, #12]
 80040c4:	611a      	str	r2, [r3, #16]
 80040c6:	615a      	str	r2, [r3, #20]
 80040c8:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80040ca:	1d3b      	adds	r3, r7, #4
 80040cc:	2220      	movs	r2, #32
 80040ce:	2100      	movs	r1, #0
 80040d0:	4618      	mov	r0, r3
 80040d2:	f006 fc4d 	bl	800a970 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 80040d6:	4b50      	ldr	r3, [pc, #320]	; (8004218 <MX_TIM8_Init+0x180>)
 80040d8:	4a50      	ldr	r2, [pc, #320]	; (800421c <MX_TIM8_Init+0x184>)
 80040da:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 80040dc:	4b4e      	ldr	r3, [pc, #312]	; (8004218 <MX_TIM8_Init+0x180>)
 80040de:	2200      	movs	r2, #0
 80040e0:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040e2:	4b4d      	ldr	r3, [pc, #308]	; (8004218 <MX_TIM8_Init+0x180>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 80040e8:	4b4b      	ldr	r3, [pc, #300]	; (8004218 <MX_TIM8_Init+0x180>)
 80040ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040ee:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040f0:	4b49      	ldr	r3, [pc, #292]	; (8004218 <MX_TIM8_Init+0x180>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 80040f6:	4b48      	ldr	r3, [pc, #288]	; (8004218 <MX_TIM8_Init+0x180>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040fc:	4b46      	ldr	r3, [pc, #280]	; (8004218 <MX_TIM8_Init+0x180>)
 80040fe:	2200      	movs	r2, #0
 8004100:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004102:	4845      	ldr	r0, [pc, #276]	; (8004218 <MX_TIM8_Init+0x180>)
 8004104:	f004 fbb2 	bl	800886c <HAL_TIM_Base_Init>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <MX_TIM8_Init+0x7a>
			{
		Error_Handler();
 800410e:	f000 fbbf 	bl	8004890 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004116:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004118:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800411c:	4619      	mov	r1, r3
 800411e:	483e      	ldr	r0, [pc, #248]	; (8004218 <MX_TIM8_Init+0x180>)
 8004120:	f005 f85c 	bl	80091dc <HAL_TIM_ConfigClockSource>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <MX_TIM8_Init+0x96>
			{
		Error_Handler();
 800412a:	f000 fbb1 	bl	8004890 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800412e:	483a      	ldr	r0, [pc, #232]	; (8004218 <MX_TIM8_Init+0x180>)
 8004130:	f004 fc4c 	bl	80089cc <HAL_TIM_PWM_Init>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <MX_TIM8_Init+0xa6>
			{
		Error_Handler();
 800413a:	f000 fba9 	bl	8004890 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800413e:	2300      	movs	r3, #0
 8004140:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004142:	2300      	movs	r3, #0
 8004144:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004146:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800414a:	4619      	mov	r1, r3
 800414c:	4832      	ldr	r0, [pc, #200]	; (8004218 <MX_TIM8_Init+0x180>)
 800414e:	f005 fc17 	bl	8009980 <HAL_TIMEx_MasterConfigSynchronization>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <MX_TIM8_Init+0xc4>
			{
		Error_Handler();
 8004158:	f000 fb9a 	bl	8004890 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800415c:	2360      	movs	r3, #96	; 0x60
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8004160:	2300      	movs	r3, #0
 8004162:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004164:	2300      	movs	r3, #0
 8004166:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004168:	2300      	movs	r3, #0
 800416a:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800416c:	2300      	movs	r3, #0
 800416e:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004170:	2300      	movs	r3, #0
 8004172:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004174:	2300      	movs	r3, #0
 8004176:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800417c:	2200      	movs	r2, #0
 800417e:	4619      	mov	r1, r3
 8004180:	4825      	ldr	r0, [pc, #148]	; (8004218 <MX_TIM8_Init+0x180>)
 8004182:	f004 ff6d 	bl	8009060 <HAL_TIM_PWM_ConfigChannel>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <MX_TIM8_Init+0xf8>
			{
		Error_Handler();
 800418c:	f000 fb80 	bl	8004890 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004194:	2204      	movs	r2, #4
 8004196:	4619      	mov	r1, r3
 8004198:	481f      	ldr	r0, [pc, #124]	; (8004218 <MX_TIM8_Init+0x180>)
 800419a:	f004 ff61 	bl	8009060 <HAL_TIM_PWM_ConfigChannel>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <MX_TIM8_Init+0x110>
			{
		Error_Handler();
 80041a4:	f000 fb74 	bl	8004890 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80041a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041ac:	2208      	movs	r2, #8
 80041ae:	4619      	mov	r1, r3
 80041b0:	4819      	ldr	r0, [pc, #100]	; (8004218 <MX_TIM8_Init+0x180>)
 80041b2:	f004 ff55 	bl	8009060 <HAL_TIM_PWM_ConfigChannel>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <MX_TIM8_Init+0x128>
			{
		Error_Handler();
 80041bc:	f000 fb68 	bl	8004890 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80041c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041c4:	220c      	movs	r2, #12
 80041c6:	4619      	mov	r1, r3
 80041c8:	4813      	ldr	r0, [pc, #76]	; (8004218 <MX_TIM8_Init+0x180>)
 80041ca:	f004 ff49 	bl	8009060 <HAL_TIM_PWM_ConfigChannel>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <MX_TIM8_Init+0x140>
			{
		Error_Handler();
 80041d4:	f000 fb5c 	bl	8004890 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80041d8:	2300      	movs	r3, #0
 80041da:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80041dc:	2300      	movs	r3, #0
 80041de:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80041e0:	2300      	movs	r3, #0
 80041e2:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80041ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041f0:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80041f6:	1d3b      	adds	r3, r7, #4
 80041f8:	4619      	mov	r1, r3
 80041fa:	4807      	ldr	r0, [pc, #28]	; (8004218 <MX_TIM8_Init+0x180>)
 80041fc:	f005 fc2c 	bl	8009a58 <HAL_TIMEx_ConfigBreakDeadTime>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <MX_TIM8_Init+0x172>
			{
		Error_Handler();
 8004206:	f000 fb43 	bl	8004890 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 800420a:	4803      	ldr	r0, [pc, #12]	; (8004218 <MX_TIM8_Init+0x180>)
 800420c:	f001 fd16 	bl	8005c3c <HAL_TIM_MspPostInit>

}
 8004210:	bf00      	nop
 8004212:	3758      	adds	r7, #88	; 0x58
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	20000c50 	.word	0x20000c50
 800421c:	40013400 	.word	0x40013400

08004220 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8004224:	4b11      	ldr	r3, [pc, #68]	; (800426c <MX_USART2_UART_Init+0x4c>)
 8004226:	4a12      	ldr	r2, [pc, #72]	; (8004270 <MX_USART2_UART_Init+0x50>)
 8004228:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800422a:	4b10      	ldr	r3, [pc, #64]	; (800426c <MX_USART2_UART_Init+0x4c>)
 800422c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004230:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004232:	4b0e      	ldr	r3, [pc, #56]	; (800426c <MX_USART2_UART_Init+0x4c>)
 8004234:	2200      	movs	r2, #0
 8004236:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8004238:	4b0c      	ldr	r3, [pc, #48]	; (800426c <MX_USART2_UART_Init+0x4c>)
 800423a:	2200      	movs	r2, #0
 800423c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800423e:	4b0b      	ldr	r3, [pc, #44]	; (800426c <MX_USART2_UART_Init+0x4c>)
 8004240:	2200      	movs	r2, #0
 8004242:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004244:	4b09      	ldr	r3, [pc, #36]	; (800426c <MX_USART2_UART_Init+0x4c>)
 8004246:	220c      	movs	r2, #12
 8004248:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800424a:	4b08      	ldr	r3, [pc, #32]	; (800426c <MX_USART2_UART_Init+0x4c>)
 800424c:	2200      	movs	r2, #0
 800424e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004250:	4b06      	ldr	r3, [pc, #24]	; (800426c <MX_USART2_UART_Init+0x4c>)
 8004252:	2200      	movs	r2, #0
 8004254:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8004256:	4805      	ldr	r0, [pc, #20]	; (800426c <MX_USART2_UART_Init+0x4c>)
 8004258:	f005 fc61 	bl	8009b1e <HAL_UART_Init>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <MX_USART2_UART_Init+0x46>
			{
		Error_Handler();
 8004262:	f000 fb15 	bl	8004890 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8004266:	bf00      	nop
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	20000c98 	.word	0x20000c98
 8004270:	40004400 	.word	0x40004400

08004274 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8004278:	4b11      	ldr	r3, [pc, #68]	; (80042c0 <MX_USART3_UART_Init+0x4c>)
 800427a:	4a12      	ldr	r2, [pc, #72]	; (80042c4 <MX_USART3_UART_Init+0x50>)
 800427c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800427e:	4b10      	ldr	r3, [pc, #64]	; (80042c0 <MX_USART3_UART_Init+0x4c>)
 8004280:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004284:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004286:	4b0e      	ldr	r3, [pc, #56]	; (80042c0 <MX_USART3_UART_Init+0x4c>)
 8004288:	2200      	movs	r2, #0
 800428a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800428c:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <MX_USART3_UART_Init+0x4c>)
 800428e:	2200      	movs	r2, #0
 8004290:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8004292:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <MX_USART3_UART_Init+0x4c>)
 8004294:	2200      	movs	r2, #0
 8004296:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8004298:	4b09      	ldr	r3, [pc, #36]	; (80042c0 <MX_USART3_UART_Init+0x4c>)
 800429a:	220c      	movs	r2, #12
 800429c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800429e:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <MX_USART3_UART_Init+0x4c>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80042a4:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <MX_USART3_UART_Init+0x4c>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80042aa:	4805      	ldr	r0, [pc, #20]	; (80042c0 <MX_USART3_UART_Init+0x4c>)
 80042ac:	f005 fc37 	bl	8009b1e <HAL_UART_Init>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <MX_USART3_UART_Init+0x46>
			{
		Error_Handler();
 80042b6:	f000 faeb 	bl	8004890 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80042ba:	bf00      	nop
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20000cdc 	.word	0x20000cdc
 80042c4:	40004800 	.word	0x40004800

080042c8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80042ce:	4b10      	ldr	r3, [pc, #64]	; (8004310 <MX_DMA_Init+0x48>)
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	4a0f      	ldr	r2, [pc, #60]	; (8004310 <MX_DMA_Init+0x48>)
 80042d4:	f043 0301 	orr.w	r3, r3, #1
 80042d8:	6153      	str	r3, [r2, #20]
 80042da:	4b0d      	ldr	r3, [pc, #52]	; (8004310 <MX_DMA_Init+0x48>)
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	607b      	str	r3, [r7, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 3, 0);
 80042e6:	2200      	movs	r2, #0
 80042e8:	2103      	movs	r1, #3
 80042ea:	200d      	movs	r0, #13
 80042ec:	f002 fa91 	bl	8006812 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80042f0:	200d      	movs	r0, #13
 80042f2:	f002 faaa 	bl	800684a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 4, 0);
 80042f6:	2200      	movs	r2, #0
 80042f8:	2104      	movs	r1, #4
 80042fa:	2010      	movs	r0, #16
 80042fc:	f002 fa89 	bl	8006812 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8004300:	2010      	movs	r0, #16
 8004302:	f002 faa2 	bl	800684a <HAL_NVIC_EnableIRQ>

}
 8004306:	bf00      	nop
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	40021000 	.word	0x40021000

08004314 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b088      	sub	sp, #32
 8004318:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800431a:	f107 0310 	add.w	r3, r7, #16
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	605a      	str	r2, [r3, #4]
 8004324:	609a      	str	r2, [r3, #8]
 8004326:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8004328:	4b23      	ldr	r3, [pc, #140]	; (80043b8 <MX_GPIO_Init+0xa4>)
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	4a22      	ldr	r2, [pc, #136]	; (80043b8 <MX_GPIO_Init+0xa4>)
 800432e:	f043 0320 	orr.w	r3, r3, #32
 8004332:	6193      	str	r3, [r2, #24]
 8004334:	4b20      	ldr	r3, [pc, #128]	; (80043b8 <MX_GPIO_Init+0xa4>)
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	f003 0320 	and.w	r3, r3, #32
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004340:	4b1d      	ldr	r3, [pc, #116]	; (80043b8 <MX_GPIO_Init+0xa4>)
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	4a1c      	ldr	r2, [pc, #112]	; (80043b8 <MX_GPIO_Init+0xa4>)
 8004346:	f043 0304 	orr.w	r3, r3, #4
 800434a:	6193      	str	r3, [r2, #24]
 800434c:	4b1a      	ldr	r3, [pc, #104]	; (80043b8 <MX_GPIO_Init+0xa4>)
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004358:	4b17      	ldr	r3, [pc, #92]	; (80043b8 <MX_GPIO_Init+0xa4>)
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	4a16      	ldr	r2, [pc, #88]	; (80043b8 <MX_GPIO_Init+0xa4>)
 800435e:	f043 0308 	orr.w	r3, r3, #8
 8004362:	6193      	str	r3, [r2, #24]
 8004364:	4b14      	ldr	r3, [pc, #80]	; (80043b8 <MX_GPIO_Init+0xa4>)
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	f003 0308 	and.w	r3, r3, #8
 800436c:	607b      	str	r3, [r7, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004370:	4b11      	ldr	r3, [pc, #68]	; (80043b8 <MX_GPIO_Init+0xa4>)
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	4a10      	ldr	r2, [pc, #64]	; (80043b8 <MX_GPIO_Init+0xa4>)
 8004376:	f043 0310 	orr.w	r3, r3, #16
 800437a:	6193      	str	r3, [r2, #24]
 800437c:	4b0e      	ldr	r3, [pc, #56]	; (80043b8 <MX_GPIO_Init+0xa4>)
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	603b      	str	r3, [r7, #0]
 8004386:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_RESET);
 8004388:	2200      	movs	r2, #0
 800438a:	2107      	movs	r1, #7
 800438c:	480b      	ldr	r0, [pc, #44]	; (80043bc <MX_GPIO_Init+0xa8>)
 800438e:	f003 f9df 	bl	8007750 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin;
 8004392:	2307      	movs	r3, #7
 8004394:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004396:	2301      	movs	r3, #1
 8004398:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439a:	2300      	movs	r3, #0
 800439c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800439e:	2302      	movs	r3, #2
 80043a0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043a2:	f107 0310 	add.w	r3, r7, #16
 80043a6:	4619      	mov	r1, r3
 80043a8:	4804      	ldr	r0, [pc, #16]	; (80043bc <MX_GPIO_Init+0xa8>)
 80043aa:	f002 ff71 	bl	8007290 <HAL_GPIO_Init>

}
 80043ae:	bf00      	nop
 80043b0:	3720      	adds	r7, #32
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40021000 	.word	0x40021000
 80043bc:	40010c00 	.word	0x40010c00

080043c0 <HUAN_MOTOR1_Init>:

/* USER CODE BEGIN 4 */

static void HUAN_MOTOR1_Init(void) {
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
	cmotor_lf.counter = &htim2;
 80043c4:	4b11      	ldr	r3, [pc, #68]	; (800440c <HUAN_MOTOR1_Init+0x4c>)
 80043c6:	4a12      	ldr	r2, [pc, #72]	; (8004410 <HUAN_MOTOR1_Init+0x50>)
 80043c8:	601a      	str	r2, [r3, #0]
	cmotor_lf.dt = 0.05;
 80043ca:	4b10      	ldr	r3, [pc, #64]	; (800440c <HUAN_MOTOR1_Init+0x4c>)
 80043cc:	4a11      	ldr	r2, [pc, #68]	; (8004414 <HUAN_MOTOR1_Init+0x54>)
 80043ce:	621a      	str	r2, [r3, #32]
	cmotor_lf.posTimer = &htim1;
 80043d0:	4b0e      	ldr	r3, [pc, #56]	; (800440c <HUAN_MOTOR1_Init+0x4c>)
 80043d2:	4a11      	ldr	r2, [pc, #68]	; (8004418 <HUAN_MOTOR1_Init+0x58>)
 80043d4:	605a      	str	r2, [r3, #4]
	cmotor_lf.pos_channel = TIM_CHANNEL_4;
 80043d6:	4b0d      	ldr	r3, [pc, #52]	; (800440c <HUAN_MOTOR1_Init+0x4c>)
 80043d8:	220c      	movs	r2, #12
 80043da:	60da      	str	r2, [r3, #12]
//	cmotor_lf.pos_channel = TIM_CHANNEL_3;
	cmotor_lf.negTimer = &htim1;
 80043dc:	4b0b      	ldr	r3, [pc, #44]	; (800440c <HUAN_MOTOR1_Init+0x4c>)
 80043de:	4a0e      	ldr	r2, [pc, #56]	; (8004418 <HUAN_MOTOR1_Init+0x58>)
 80043e0:	609a      	str	r2, [r3, #8]
	cmotor_lf.neg_channel = TIM_CHANNEL_3;
 80043e2:	4b0a      	ldr	r3, [pc, #40]	; (800440c <HUAN_MOTOR1_Init+0x4c>)
 80043e4:	2208      	movs	r2, #8
 80043e6:	611a      	str	r2, [r3, #16]
//	cmotor_lf.neg_channel = TIM_CHANNEL_4;
	cmotor_lf.encoderInverted = 1;
 80043e8:	4b08      	ldr	r3, [pc, #32]	; (800440c <HUAN_MOTOR1_Init+0x4c>)
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lf.kp = 0.0005;
 80043f0:	4b06      	ldr	r3, [pc, #24]	; (800440c <HUAN_MOTOR1_Init+0x4c>)
 80043f2:	4a0a      	ldr	r2, [pc, #40]	; (800441c <HUAN_MOTOR1_Init+0x5c>)
 80043f4:	615a      	str	r2, [r3, #20]
	cmotor_lf.ki = 0.000015;
 80043f6:	4b05      	ldr	r3, [pc, #20]	; (800440c <HUAN_MOTOR1_Init+0x4c>)
 80043f8:	4a09      	ldr	r2, [pc, #36]	; (8004420 <HUAN_MOTOR1_Init+0x60>)
 80043fa:	619a      	str	r2, [r3, #24]
	cmotor_lf.kd = 0.00003;
 80043fc:	4b03      	ldr	r3, [pc, #12]	; (800440c <HUAN_MOTOR1_Init+0x4c>)
 80043fe:	4a09      	ldr	r2, [pc, #36]	; (8004424 <HUAN_MOTOR1_Init+0x64>)
 8004400:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lf);
 8004402:	4802      	ldr	r0, [pc, #8]	; (800440c <HUAN_MOTOR1_Init+0x4c>)
 8004404:	f7fd ff36 	bl	8002274 <huansic_motor_init>
}
 8004408:	bf00      	nop
 800440a:	bd80      	pop	{r7, pc}
 800440c:	20000da8 	.word	0x20000da8
 8004410:	20000aa0 	.word	0x20000aa0
 8004414:	3d4ccccd 	.word	0x3d4ccccd
 8004418:	20000a58 	.word	0x20000a58
 800441c:	3a03126f 	.word	0x3a03126f
 8004420:	377ba882 	.word	0x377ba882
 8004424:	37fba882 	.word	0x37fba882

08004428 <HUAN_MOTOR2_Init>:

static void HUAN_MOTOR2_Init(void) {
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
	cmotor_rf.counter = &htim4;
 800442c:	4b11      	ldr	r3, [pc, #68]	; (8004474 <HUAN_MOTOR2_Init+0x4c>)
 800442e:	4a12      	ldr	r2, [pc, #72]	; (8004478 <HUAN_MOTOR2_Init+0x50>)
 8004430:	601a      	str	r2, [r3, #0]
	cmotor_rf.dt = 0.05;
 8004432:	4b10      	ldr	r3, [pc, #64]	; (8004474 <HUAN_MOTOR2_Init+0x4c>)
 8004434:	4a11      	ldr	r2, [pc, #68]	; (800447c <HUAN_MOTOR2_Init+0x54>)
 8004436:	621a      	str	r2, [r3, #32]
	cmotor_rf.posTimer = &htim1;
 8004438:	4b0e      	ldr	r3, [pc, #56]	; (8004474 <HUAN_MOTOR2_Init+0x4c>)
 800443a:	4a11      	ldr	r2, [pc, #68]	; (8004480 <HUAN_MOTOR2_Init+0x58>)
 800443c:	605a      	str	r2, [r3, #4]
	cmotor_rf.pos_channel = TIM_CHANNEL_1;
 800443e:	4b0d      	ldr	r3, [pc, #52]	; (8004474 <HUAN_MOTOR2_Init+0x4c>)
 8004440:	2200      	movs	r2, #0
 8004442:	60da      	str	r2, [r3, #12]
	cmotor_rf.negTimer = &htim1;
 8004444:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <HUAN_MOTOR2_Init+0x4c>)
 8004446:	4a0e      	ldr	r2, [pc, #56]	; (8004480 <HUAN_MOTOR2_Init+0x58>)
 8004448:	609a      	str	r2, [r3, #8]
	cmotor_rf.neg_channel = TIM_CHANNEL_2;
 800444a:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <HUAN_MOTOR2_Init+0x4c>)
 800444c:	2204      	movs	r2, #4
 800444e:	611a      	str	r2, [r3, #16]
	cmotor_rf.encoderInverted = 0;
 8004450:	4b08      	ldr	r3, [pc, #32]	; (8004474 <HUAN_MOTOR2_Init+0x4c>)
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_rf.kp = 0.0005;
 8004458:	4b06      	ldr	r3, [pc, #24]	; (8004474 <HUAN_MOTOR2_Init+0x4c>)
 800445a:	4a0a      	ldr	r2, [pc, #40]	; (8004484 <HUAN_MOTOR2_Init+0x5c>)
 800445c:	615a      	str	r2, [r3, #20]
	cmotor_rf.ki = 0.000015;
 800445e:	4b05      	ldr	r3, [pc, #20]	; (8004474 <HUAN_MOTOR2_Init+0x4c>)
 8004460:	4a09      	ldr	r2, [pc, #36]	; (8004488 <HUAN_MOTOR2_Init+0x60>)
 8004462:	619a      	str	r2, [r3, #24]
	cmotor_rf.kd = 0.00003;
 8004464:	4b03      	ldr	r3, [pc, #12]	; (8004474 <HUAN_MOTOR2_Init+0x4c>)
 8004466:	4a09      	ldr	r2, [pc, #36]	; (800448c <HUAN_MOTOR2_Init+0x64>)
 8004468:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rf);
 800446a:	4802      	ldr	r0, [pc, #8]	; (8004474 <HUAN_MOTOR2_Init+0x4c>)
 800446c:	f7fd ff02 	bl	8002274 <huansic_motor_init>
}
 8004470:	bf00      	nop
 8004472:	bd80      	pop	{r7, pc}
 8004474:	20000de4 	.word	0x20000de4
 8004478:	20000b30 	.word	0x20000b30
 800447c:	3d4ccccd 	.word	0x3d4ccccd
 8004480:	20000a58 	.word	0x20000a58
 8004484:	3a03126f 	.word	0x3a03126f
 8004488:	377ba882 	.word	0x377ba882
 800448c:	37fba882 	.word	0x37fba882

08004490 <HUAN_MOTOR3_Init>:

static void HUAN_MOTOR3_Init(void) {
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
	cmotor_lb.counter = &htim3;
 8004494:	4b11      	ldr	r3, [pc, #68]	; (80044dc <HUAN_MOTOR3_Init+0x4c>)
 8004496:	4a12      	ldr	r2, [pc, #72]	; (80044e0 <HUAN_MOTOR3_Init+0x50>)
 8004498:	601a      	str	r2, [r3, #0]
	cmotor_lb.dt = 0.05;
 800449a:	4b10      	ldr	r3, [pc, #64]	; (80044dc <HUAN_MOTOR3_Init+0x4c>)
 800449c:	4a11      	ldr	r2, [pc, #68]	; (80044e4 <HUAN_MOTOR3_Init+0x54>)
 800449e:	621a      	str	r2, [r3, #32]
	cmotor_lb.posTimer = &htim8;
 80044a0:	4b0e      	ldr	r3, [pc, #56]	; (80044dc <HUAN_MOTOR3_Init+0x4c>)
 80044a2:	4a11      	ldr	r2, [pc, #68]	; (80044e8 <HUAN_MOTOR3_Init+0x58>)
 80044a4:	605a      	str	r2, [r3, #4]
	cmotor_lb.pos_channel = TIM_CHANNEL_4;
 80044a6:	4b0d      	ldr	r3, [pc, #52]	; (80044dc <HUAN_MOTOR3_Init+0x4c>)
 80044a8:	220c      	movs	r2, #12
 80044aa:	60da      	str	r2, [r3, #12]
//	cmotor_lb.pos_channel = TIM_CHANNEL_3;
	cmotor_lb.negTimer = &htim8;
 80044ac:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <HUAN_MOTOR3_Init+0x4c>)
 80044ae:	4a0e      	ldr	r2, [pc, #56]	; (80044e8 <HUAN_MOTOR3_Init+0x58>)
 80044b0:	609a      	str	r2, [r3, #8]
	cmotor_lb.neg_channel = TIM_CHANNEL_3;
 80044b2:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <HUAN_MOTOR3_Init+0x4c>)
 80044b4:	2208      	movs	r2, #8
 80044b6:	611a      	str	r2, [r3, #16]
//	cmotor_lb.neg_channel = TIM_CHANNEL_4;
	cmotor_lb.encoderInverted = 1;
 80044b8:	4b08      	ldr	r3, [pc, #32]	; (80044dc <HUAN_MOTOR3_Init+0x4c>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lb.kp = 0.0005;
 80044c0:	4b06      	ldr	r3, [pc, #24]	; (80044dc <HUAN_MOTOR3_Init+0x4c>)
 80044c2:	4a0a      	ldr	r2, [pc, #40]	; (80044ec <HUAN_MOTOR3_Init+0x5c>)
 80044c4:	615a      	str	r2, [r3, #20]
	cmotor_lb.ki = 0.000015;
 80044c6:	4b05      	ldr	r3, [pc, #20]	; (80044dc <HUAN_MOTOR3_Init+0x4c>)
 80044c8:	4a09      	ldr	r2, [pc, #36]	; (80044f0 <HUAN_MOTOR3_Init+0x60>)
 80044ca:	619a      	str	r2, [r3, #24]
	cmotor_lb.kd = 0.00003;
 80044cc:	4b03      	ldr	r3, [pc, #12]	; (80044dc <HUAN_MOTOR3_Init+0x4c>)
 80044ce:	4a09      	ldr	r2, [pc, #36]	; (80044f4 <HUAN_MOTOR3_Init+0x64>)
 80044d0:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lb);
 80044d2:	4802      	ldr	r0, [pc, #8]	; (80044dc <HUAN_MOTOR3_Init+0x4c>)
 80044d4:	f7fd fece 	bl	8002274 <huansic_motor_init>
}
 80044d8:	bf00      	nop
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	20000e20 	.word	0x20000e20
 80044e0:	20000ae8 	.word	0x20000ae8
 80044e4:	3d4ccccd 	.word	0x3d4ccccd
 80044e8:	20000c50 	.word	0x20000c50
 80044ec:	3a03126f 	.word	0x3a03126f
 80044f0:	377ba882 	.word	0x377ba882
 80044f4:	37fba882 	.word	0x37fba882

080044f8 <HUAN_MOTOR4_Init>:

static void HUAN_MOTOR4_Init(void) {
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
	cmotor_rb.counter = &htim5;
 80044fc:	4b11      	ldr	r3, [pc, #68]	; (8004544 <HUAN_MOTOR4_Init+0x4c>)
 80044fe:	4a12      	ldr	r2, [pc, #72]	; (8004548 <HUAN_MOTOR4_Init+0x50>)
 8004500:	601a      	str	r2, [r3, #0]
	cmotor_rb.dt = 0.05;
 8004502:	4b10      	ldr	r3, [pc, #64]	; (8004544 <HUAN_MOTOR4_Init+0x4c>)
 8004504:	4a11      	ldr	r2, [pc, #68]	; (800454c <HUAN_MOTOR4_Init+0x54>)
 8004506:	621a      	str	r2, [r3, #32]
	cmotor_rb.posTimer = &htim8;
 8004508:	4b0e      	ldr	r3, [pc, #56]	; (8004544 <HUAN_MOTOR4_Init+0x4c>)
 800450a:	4a11      	ldr	r2, [pc, #68]	; (8004550 <HUAN_MOTOR4_Init+0x58>)
 800450c:	605a      	str	r2, [r3, #4]
	cmotor_rb.pos_channel = TIM_CHANNEL_1;
 800450e:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <HUAN_MOTOR4_Init+0x4c>)
 8004510:	2200      	movs	r2, #0
 8004512:	60da      	str	r2, [r3, #12]
	cmotor_rb.negTimer = &htim8;
 8004514:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <HUAN_MOTOR4_Init+0x4c>)
 8004516:	4a0e      	ldr	r2, [pc, #56]	; (8004550 <HUAN_MOTOR4_Init+0x58>)
 8004518:	609a      	str	r2, [r3, #8]
	cmotor_rb.neg_channel = TIM_CHANNEL_2;
 800451a:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <HUAN_MOTOR4_Init+0x4c>)
 800451c:	2204      	movs	r2, #4
 800451e:	611a      	str	r2, [r3, #16]
	cmotor_rb.encoderInverted = 0;
 8004520:	4b08      	ldr	r3, [pc, #32]	; (8004544 <HUAN_MOTOR4_Init+0x4c>)
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_rb.kp = 0.0005;
 8004528:	4b06      	ldr	r3, [pc, #24]	; (8004544 <HUAN_MOTOR4_Init+0x4c>)
 800452a:	4a0a      	ldr	r2, [pc, #40]	; (8004554 <HUAN_MOTOR4_Init+0x5c>)
 800452c:	615a      	str	r2, [r3, #20]
	cmotor_rb.ki = 0.000015;
 800452e:	4b05      	ldr	r3, [pc, #20]	; (8004544 <HUAN_MOTOR4_Init+0x4c>)
 8004530:	4a09      	ldr	r2, [pc, #36]	; (8004558 <HUAN_MOTOR4_Init+0x60>)
 8004532:	619a      	str	r2, [r3, #24]
	cmotor_rb.kd = 0.00003;
 8004534:	4b03      	ldr	r3, [pc, #12]	; (8004544 <HUAN_MOTOR4_Init+0x4c>)
 8004536:	4a09      	ldr	r2, [pc, #36]	; (800455c <HUAN_MOTOR4_Init+0x64>)
 8004538:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rb);
 800453a:	4802      	ldr	r0, [pc, #8]	; (8004544 <HUAN_MOTOR4_Init+0x4c>)
 800453c:	f7fd fe9a 	bl	8002274 <huansic_motor_init>
}
 8004540:	bf00      	nop
 8004542:	bd80      	pop	{r7, pc}
 8004544:	20000e5c 	.word	0x20000e5c
 8004548:	20000b78 	.word	0x20000b78
 800454c:	3d4ccccd 	.word	0x3d4ccccd
 8004550:	20000c50 	.word	0x20000c50
 8004554:	3a03126f 	.word	0x3a03126f
 8004558:	377ba882 	.word	0x377ba882
 800455c:	37fba882 	.word	0x37fba882

08004560 <HUAN_IMU_Init>:

static void HUAN_IMU_Init(void) {
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
	himu.huart = &huart3;
 8004564:	4b05      	ldr	r3, [pc, #20]	; (800457c <HUAN_IMU_Init+0x1c>)
 8004566:	4a06      	ldr	r2, [pc, #24]	; (8004580 <HUAN_IMU_Init+0x20>)
 8004568:	601a      	str	r2, [r3, #0]
	himu.hdma = &hdma_usart3_rx;
 800456a:	4b04      	ldr	r3, [pc, #16]	; (800457c <HUAN_IMU_Init+0x1c>)
 800456c:	4a05      	ldr	r2, [pc, #20]	; (8004584 <HUAN_IMU_Init+0x24>)
 800456e:	605a      	str	r2, [r3, #4]
	huansic_jy62_init(&himu);
 8004570:	4802      	ldr	r0, [pc, #8]	; (800457c <HUAN_IMU_Init+0x1c>)
 8004572:	f7fd fa7b 	bl	8001a6c <huansic_jy62_init>
}
 8004576:	bf00      	nop
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20000e98 	.word	0x20000e98
 8004580:	20000cdc 	.word	0x20000cdc
 8004584:	20000d64 	.word	0x20000d64

08004588 <HUAN_ZIGBEE_Init>:

static void HUAN_ZIGBEE_Init(void) {
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
	hxb.huart = &huart2;
 800458c:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <HUAN_ZIGBEE_Init+0x1c>)
 800458e:	4a06      	ldr	r2, [pc, #24]	; (80045a8 <HUAN_ZIGBEE_Init+0x20>)
 8004590:	601a      	str	r2, [r3, #0]
	hxb.hdma = &hdma_usart2_rx;
 8004592:	4b04      	ldr	r3, [pc, #16]	; (80045a4 <HUAN_ZIGBEE_Init+0x1c>)
 8004594:	4a05      	ldr	r2, [pc, #20]	; (80045ac <HUAN_ZIGBEE_Init+0x24>)
 8004596:	605a      	str	r2, [r3, #4]
	huansic_xb_init(&hxb);
 8004598:	4802      	ldr	r0, [pc, #8]	; (80045a4 <HUAN_ZIGBEE_Init+0x1c>)
 800459a:	f7fe f893 	bl	80026c4 <huansic_xb_init>
}
 800459e:	bf00      	nop
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20000ef0 	.word	0x20000ef0
 80045a8:	20000c98 	.word	0x20000c98
 80045ac:	20000d20 	.word	0x20000d20

080045b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
	if (himu.huart == huart) {
 80045b8:	4b28      	ldr	r3, [pc, #160]	; (800465c <HAL_UART_RxCpltCallback+0xac>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d121      	bne.n	8004606 <HAL_UART_RxCpltCallback+0x56>
		jy62_uart_normal = 1;
 80045c2:	4b27      	ldr	r3, [pc, #156]	; (8004660 <HAL_UART_RxCpltCallback+0xb0>)
 80045c4:	2201      	movs	r2, #1
 80045c6:	701a      	strb	r2, [r3, #0]
		if (himu.pending_alignment) {
 80045c8:	4b24      	ldr	r3, [pc, #144]	; (800465c <HAL_UART_RxCpltCallback+0xac>)
 80045ca:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00c      	beq.n	80045ec <HAL_UART_RxCpltCallback+0x3c>
			if (!huansic_jy62_isr(&himu))
 80045d2:	4822      	ldr	r0, [pc, #136]	; (800465c <HAL_UART_RxCpltCallback+0xac>)
 80045d4:	f7fd fbce 	bl	8001d74 <huansic_jy62_isr>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d139      	bne.n	8004652 <HAL_UART_RxCpltCallback+0xa2>
				jy62_IT_SuccessCount++;
 80045de:	4b21      	ldr	r3, [pc, #132]	; (8004664 <HAL_UART_RxCpltCallback+0xb4>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	3301      	adds	r3, #1
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	4b1f      	ldr	r3, [pc, #124]	; (8004664 <HAL_UART_RxCpltCallback+0xb4>)
 80045e8:	701a      	strb	r2, [r3, #0]
		} else {
			if (huansic_xb_dma_isr(&hxb))
				xb_DMA_SW_ErrorCount++;
		}
	}
}
 80045ea:	e032      	b.n	8004652 <HAL_UART_RxCpltCallback+0xa2>
			if (huansic_jy62_dma_isr(&himu))
 80045ec:	481b      	ldr	r0, [pc, #108]	; (800465c <HAL_UART_RxCpltCallback+0xac>)
 80045ee:	f7fd faa1 	bl	8001b34 <huansic_jy62_dma_isr>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d02c      	beq.n	8004652 <HAL_UART_RxCpltCallback+0xa2>
				jy62_DMA_ErrorCount++;
 80045f8:	4b1b      	ldr	r3, [pc, #108]	; (8004668 <HAL_UART_RxCpltCallback+0xb8>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	3301      	adds	r3, #1
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	4b19      	ldr	r3, [pc, #100]	; (8004668 <HAL_UART_RxCpltCallback+0xb8>)
 8004602:	701a      	strb	r2, [r3, #0]
}
 8004604:	e025      	b.n	8004652 <HAL_UART_RxCpltCallback+0xa2>
	} else if (hxb.huart == huart) {
 8004606:	4b19      	ldr	r3, [pc, #100]	; (800466c <HAL_UART_RxCpltCallback+0xbc>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	429a      	cmp	r2, r3
 800460e:	d120      	bne.n	8004652 <HAL_UART_RxCpltCallback+0xa2>
		xb_uart_normal = 1;
 8004610:	4b17      	ldr	r3, [pc, #92]	; (8004670 <HAL_UART_RxCpltCallback+0xc0>)
 8004612:	2201      	movs	r2, #1
 8004614:	701a      	strb	r2, [r3, #0]
		if (hxb.pending_alignment) {
 8004616:	4b15      	ldr	r3, [pc, #84]	; (800466c <HAL_UART_RxCpltCallback+0xbc>)
 8004618:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00c      	beq.n	800463a <HAL_UART_RxCpltCallback+0x8a>
			if (!huansic_xb_isr(&hxb))
 8004620:	4812      	ldr	r0, [pc, #72]	; (800466c <HAL_UART_RxCpltCallback+0xbc>)
 8004622:	f7fe ff03 	bl	800342c <huansic_xb_isr>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d112      	bne.n	8004652 <HAL_UART_RxCpltCallback+0xa2>
				xb_IT_SuccessCount++;
 800462c:	4b11      	ldr	r3, [pc, #68]	; (8004674 <HAL_UART_RxCpltCallback+0xc4>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	3301      	adds	r3, #1
 8004632:	b2da      	uxtb	r2, r3
 8004634:	4b0f      	ldr	r3, [pc, #60]	; (8004674 <HAL_UART_RxCpltCallback+0xc4>)
 8004636:	701a      	strb	r2, [r3, #0]
}
 8004638:	e00b      	b.n	8004652 <HAL_UART_RxCpltCallback+0xa2>
			if (huansic_xb_dma_isr(&hxb))
 800463a:	480c      	ldr	r0, [pc, #48]	; (800466c <HAL_UART_RxCpltCallback+0xbc>)
 800463c:	f7fe ff3c 	bl	80034b8 <huansic_xb_dma_isr>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d005      	beq.n	8004652 <HAL_UART_RxCpltCallback+0xa2>
				xb_DMA_SW_ErrorCount++;
 8004646:	4b0c      	ldr	r3, [pc, #48]	; (8004678 <HAL_UART_RxCpltCallback+0xc8>)
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	3301      	adds	r3, #1
 800464c:	b2da      	uxtb	r2, r3
 800464e:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <HAL_UART_RxCpltCallback+0xc8>)
 8004650:	701a      	strb	r2, [r3, #0]
}
 8004652:	bf00      	nop
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000e98 	.word	0x20000e98
 8004660:	200010e1 	.word	0x200010e1
 8004664:	200010dd 	.word	0x200010dd
 8004668:	200010dc 	.word	0x200010dc
 800466c:	20000ef0 	.word	0x20000ef0
 8004670:	200010e2 	.word	0x200010e2
 8004674:	200010e0 	.word	0x200010e0
 8004678:	200010de 	.word	0x200010de

0800467c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
	if (himu.huart == huart) {
 8004684:	4b41      	ldr	r3, [pc, #260]	; (800478c <HAL_UART_ErrorCallback+0x110>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	429a      	cmp	r2, r3
 800468c:	d138      	bne.n	8004700 <HAL_UART_ErrorCallback+0x84>
		jy62_uart_normal = 1;
 800468e:	4b40      	ldr	r3, [pc, #256]	; (8004790 <HAL_UART_ErrorCallback+0x114>)
 8004690:	2201      	movs	r2, #1
 8004692:	701a      	strb	r2, [r3, #0]
		if (huart->ErrorCode & HAL_UART_ERROR_DMA) {
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	2b00      	cmp	r3, #0
 800469e:	d017      	beq.n	80046d0 <HAL_UART_ErrorCallback+0x54>
			__HAL_DMA_CLEAR_FLAG(himu.hdma, DMA_FLAG_TE2 | DMA_FLAG_HT2 | DMA_FLAG_TC2 | DMA_FLAG_GL2);
 80046a0:	4b3a      	ldr	r3, [pc, #232]	; (800478c <HAL_UART_ErrorCallback+0x110>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	4b3a      	ldr	r3, [pc, #232]	; (8004794 <HAL_UART_ErrorCallback+0x118>)
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d903      	bls.n	80046b6 <HAL_UART_ErrorCallback+0x3a>
 80046ae:	4b3a      	ldr	r3, [pc, #232]	; (8004798 <HAL_UART_ErrorCallback+0x11c>)
 80046b0:	22f0      	movs	r2, #240	; 0xf0
 80046b2:	605a      	str	r2, [r3, #4]
 80046b4:	e002      	b.n	80046bc <HAL_UART_ErrorCallback+0x40>
 80046b6:	4b39      	ldr	r3, [pc, #228]	; (800479c <HAL_UART_ErrorCallback+0x120>)
 80046b8:	22f0      	movs	r2, #240	; 0xf0
 80046ba:	605a      	str	r2, [r3, #4]
			huansic_jy62_dma_error(&himu);
 80046bc:	4833      	ldr	r0, [pc, #204]	; (800478c <HAL_UART_ErrorCallback+0x110>)
 80046be:	f7fd fb90 	bl	8001de2 <huansic_jy62_dma_error>
			jy62_DMA_ErrorCount++;
 80046c2:	4b37      	ldr	r3, [pc, #220]	; (80047a0 <HAL_UART_ErrorCallback+0x124>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	3301      	adds	r3, #1
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	4b35      	ldr	r3, [pc, #212]	; (80047a0 <HAL_UART_ErrorCallback+0x124>)
 80046cc:	701a      	strb	r2, [r3, #0]
 80046ce:	e056      	b.n	800477e <HAL_UART_ErrorCallback+0x102>
		} else {
			if (himu.huart->ErrorCode & HAL_UART_ERROR_ORE) {
 80046d0:	4b2e      	ldr	r3, [pc, #184]	; (800478c <HAL_UART_ErrorCallback+0x110>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00c      	beq.n	80046f8 <HAL_UART_ErrorCallback+0x7c>
				__HAL_UART_CLEAR_OREFLAG(himu.huart);
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	4b2a      	ldr	r3, [pc, #168]	; (800478c <HAL_UART_ErrorCallback+0x110>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	4b27      	ldr	r3, [pc, #156]	; (800478c <HAL_UART_ErrorCallback+0x110>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	68fb      	ldr	r3, [r7, #12]
			}
			huansic_jy62_it_error(&himu);
 80046f8:	4824      	ldr	r0, [pc, #144]	; (800478c <HAL_UART_ErrorCallback+0x110>)
 80046fa:	f7fd fb86 	bl	8001e0a <huansic_jy62_it_error>
 80046fe:	e03e      	b.n	800477e <HAL_UART_ErrorCallback+0x102>
		}
	} else if (hxb.huart == huart) {
 8004700:	4b28      	ldr	r3, [pc, #160]	; (80047a4 <HAL_UART_ErrorCallback+0x128>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	429a      	cmp	r2, r3
 8004708:	d139      	bne.n	800477e <HAL_UART_ErrorCallback+0x102>
		xb_uart_normal = 1;
 800470a:	4b27      	ldr	r3, [pc, #156]	; (80047a8 <HAL_UART_ErrorCallback+0x12c>)
 800470c:	2201      	movs	r2, #1
 800470e:	701a      	strb	r2, [r3, #0]
		if (huart->ErrorCode & HAL_UART_ERROR_DMA) {
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	f003 0310 	and.w	r3, r3, #16
 8004718:	2b00      	cmp	r3, #0
 800471a:	d019      	beq.n	8004750 <HAL_UART_ErrorCallback+0xd4>
//			HAL_UART_DeInit(&huart2);
//			MX_USART2_UART_Init();
			__HAL_DMA_CLEAR_FLAG(hxb.hdma, DMA_FLAG_TE6 | DMA_FLAG_HT6 | DMA_FLAG_TC6 | DMA_FLAG_GL6);
 800471c:	4b21      	ldr	r3, [pc, #132]	; (80047a4 <HAL_UART_ErrorCallback+0x128>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	461a      	mov	r2, r3
 8004724:	4b1b      	ldr	r3, [pc, #108]	; (8004794 <HAL_UART_ErrorCallback+0x118>)
 8004726:	429a      	cmp	r2, r3
 8004728:	d904      	bls.n	8004734 <HAL_UART_ErrorCallback+0xb8>
 800472a:	4b1b      	ldr	r3, [pc, #108]	; (8004798 <HAL_UART_ErrorCallback+0x11c>)
 800472c:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 8004730:	605a      	str	r2, [r3, #4]
 8004732:	e003      	b.n	800473c <HAL_UART_ErrorCallback+0xc0>
 8004734:	4b19      	ldr	r3, [pc, #100]	; (800479c <HAL_UART_ErrorCallback+0x120>)
 8004736:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 800473a:	605a      	str	r2, [r3, #4]
			huansic_xb_dma_error(&hxb);
 800473c:	4819      	ldr	r0, [pc, #100]	; (80047a4 <HAL_UART_ErrorCallback+0x128>)
 800473e:	f7fe fe45 	bl	80033cc <huansic_xb_dma_error>
			xb_DMA_HW_ErrorCount++;
 8004742:	4b1a      	ldr	r3, [pc, #104]	; (80047ac <HAL_UART_ErrorCallback+0x130>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	3301      	adds	r3, #1
 8004748:	b2da      	uxtb	r2, r3
 800474a:	4b18      	ldr	r3, [pc, #96]	; (80047ac <HAL_UART_ErrorCallback+0x130>)
 800474c:	701a      	strb	r2, [r3, #0]
 800474e:	e016      	b.n	800477e <HAL_UART_ErrorCallback+0x102>
		} else {
			if (hxb.huart->ErrorCode & HAL_UART_ERROR_ORE) {
 8004750:	4b14      	ldr	r3, [pc, #80]	; (80047a4 <HAL_UART_ErrorCallback+0x128>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00c      	beq.n	8004778 <HAL_UART_ErrorCallback+0xfc>
				__HAL_UART_CLEAR_OREFLAG(hxb.huart);
 800475e:	2300      	movs	r3, #0
 8004760:	60bb      	str	r3, [r7, #8]
 8004762:	4b10      	ldr	r3, [pc, #64]	; (80047a4 <HAL_UART_ErrorCallback+0x128>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	60bb      	str	r3, [r7, #8]
 800476c:	4b0d      	ldr	r3, [pc, #52]	; (80047a4 <HAL_UART_ErrorCallback+0x128>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	60bb      	str	r3, [r7, #8]
 8004776:	68bb      	ldr	r3, [r7, #8]
			}
//			HAL_UART_DeInit(&huart2);
//			MX_USART2_UART_Init()
			huansic_xb_it_error(&hxb);
 8004778:	480a      	ldr	r0, [pc, #40]	; (80047a4 <HAL_UART_ErrorCallback+0x128>)
 800477a:	f7fe fe3f 	bl	80033fc <huansic_xb_it_error>
		}
	}
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004784:	bf00      	nop
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	20000e98 	.word	0x20000e98
 8004790:	200010e1 	.word	0x200010e1
 8004794:	40020080 	.word	0x40020080
 8004798:	40020400 	.word	0x40020400
 800479c:	40020000 	.word	0x40020000
 80047a0:	200010dc 	.word	0x200010dc
 80047a4:	20000ef0 	.word	0x20000ef0
 80047a8:	200010e2 	.word	0x200010e2
 80047ac:	200010df 	.word	0x200010df

080047b0 <HUAN_PeriodicInt1000ms_ISR>:

void HUAN_PeriodicInt1000ms_ISR(void) {
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
	sprintf(firstLine, "    ERR   SUC");
 80047b4:	4927      	ldr	r1, [pc, #156]	; (8004854 <HUAN_PeriodicInt1000ms_ISR+0xa4>)
 80047b6:	4828      	ldr	r0, [pc, #160]	; (8004858 <HUAN_PeriodicInt1000ms_ISR+0xa8>)
 80047b8:	f006 fbd0 	bl	800af5c <siprintf>
	sprintf(secondLine, "XB  %02X    %02X", xb_DMA_HW_ErrorCount, xb_IT_SuccessCount);
 80047bc:	4b27      	ldr	r3, [pc, #156]	; (800485c <HUAN_PeriodicInt1000ms_ISR+0xac>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	4b27      	ldr	r3, [pc, #156]	; (8004860 <HUAN_PeriodicInt1000ms_ISR+0xb0>)
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	4927      	ldr	r1, [pc, #156]	; (8004864 <HUAN_PeriodicInt1000ms_ISR+0xb4>)
 80047c8:	4827      	ldr	r0, [pc, #156]	; (8004868 <HUAN_PeriodicInt1000ms_ISR+0xb8>)
 80047ca:	f006 fbc7 	bl	800af5c <siprintf>
	sprintf(thirdLine, "JY  %02X    %02X", jy62_DMA_ErrorCount, jy62_IT_SuccessCount);
 80047ce:	4b27      	ldr	r3, [pc, #156]	; (800486c <HUAN_PeriodicInt1000ms_ISR+0xbc>)
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	4b26      	ldr	r3, [pc, #152]	; (8004870 <HUAN_PeriodicInt1000ms_ISR+0xc0>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	4926      	ldr	r1, [pc, #152]	; (8004874 <HUAN_PeriodicInt1000ms_ISR+0xc4>)
 80047da:	4827      	ldr	r0, [pc, #156]	; (8004878 <HUAN_PeriodicInt1000ms_ISR+0xc8>)
 80047dc:	f006 fbbe 	bl	800af5c <siprintf>
	ssd1306_WriteString(firstLine, Font_6x8, White);
 80047e0:	4a26      	ldr	r2, [pc, #152]	; (800487c <HUAN_PeriodicInt1000ms_ISR+0xcc>)
 80047e2:	2301      	movs	r3, #1
 80047e4:	ca06      	ldmia	r2, {r1, r2}
 80047e6:	481c      	ldr	r0, [pc, #112]	; (8004858 <HUAN_PeriodicInt1000ms_ISR+0xa8>)
 80047e8:	f000 ffdc 	bl	80057a4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 8);
 80047ec:	2108      	movs	r1, #8
 80047ee:	2000      	movs	r0, #0
 80047f0:	f000 fffe 	bl	80057f0 <ssd1306_SetCursor>
	ssd1306_WriteString(secondLine, Font_6x8, White);
 80047f4:	4a21      	ldr	r2, [pc, #132]	; (800487c <HUAN_PeriodicInt1000ms_ISR+0xcc>)
 80047f6:	2301      	movs	r3, #1
 80047f8:	ca06      	ldmia	r2, {r1, r2}
 80047fa:	481b      	ldr	r0, [pc, #108]	; (8004868 <HUAN_PeriodicInt1000ms_ISR+0xb8>)
 80047fc:	f000 ffd2 	bl	80057a4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 16);
 8004800:	2110      	movs	r1, #16
 8004802:	2000      	movs	r0, #0
 8004804:	f000 fff4 	bl	80057f0 <ssd1306_SetCursor>
	ssd1306_WriteString(thirdLine, Font_6x8, White);
 8004808:	4a1c      	ldr	r2, [pc, #112]	; (800487c <HUAN_PeriodicInt1000ms_ISR+0xcc>)
 800480a:	2301      	movs	r3, #1
 800480c:	ca06      	ldmia	r2, {r1, r2}
 800480e:	481a      	ldr	r0, [pc, #104]	; (8004878 <HUAN_PeriodicInt1000ms_ISR+0xc8>)
 8004810:	f000 ffc8 	bl	80057a4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8004814:	f000 fec4 	bl	80055a0 <ssd1306_UpdateScreen>

	// check status of UART
	if (!jy62_uart_normal) {
 8004818:	4b19      	ldr	r3, [pc, #100]	; (8004880 <HUAN_PeriodicInt1000ms_ISR+0xd0>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d106      	bne.n	800482e <HUAN_PeriodicInt1000ms_ISR+0x7e>
		himu.huart->Instance->DR;		// just read
 8004820:	4b18      	ldr	r3, [pc, #96]	; (8004884 <HUAN_PeriodicInt1000ms_ISR+0xd4>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
		huansic_jy62_it_error(&himu);
 8004828:	4816      	ldr	r0, [pc, #88]	; (8004884 <HUAN_PeriodicInt1000ms_ISR+0xd4>)
 800482a:	f7fd faee 	bl	8001e0a <huansic_jy62_it_error>
	}
	if (!xb_uart_normal) {
 800482e:	4b16      	ldr	r3, [pc, #88]	; (8004888 <HUAN_PeriodicInt1000ms_ISR+0xd8>)
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d106      	bne.n	8004844 <HUAN_PeriodicInt1000ms_ISR+0x94>
		hxb.huart->Instance->DR;		// just read
 8004836:	4b15      	ldr	r3, [pc, #84]	; (800488c <HUAN_PeriodicInt1000ms_ISR+0xdc>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
		huansic_xb_it_error(&hxb);
 800483e:	4813      	ldr	r0, [pc, #76]	; (800488c <HUAN_PeriodicInt1000ms_ISR+0xdc>)
 8004840:	f7fe fddc 	bl	80033fc <huansic_xb_it_error>
	}
	jy62_uart_normal = 0;
 8004844:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <HUAN_PeriodicInt1000ms_ISR+0xd0>)
 8004846:	2200      	movs	r2, #0
 8004848:	701a      	strb	r2, [r3, #0]
	xb_uart_normal = 0;
 800484a:	4b0f      	ldr	r3, [pc, #60]	; (8004888 <HUAN_PeriodicInt1000ms_ISR+0xd8>)
 800484c:	2200      	movs	r2, #0
 800484e:	701a      	strb	r2, [r3, #0]
}
 8004850:	bf00      	nop
 8004852:	bd80      	pop	{r7, pc}
 8004854:	0800d0f8 	.word	0x0800d0f8
 8004858:	20001088 	.word	0x20001088
 800485c:	200010df 	.word	0x200010df
 8004860:	200010e0 	.word	0x200010e0
 8004864:	0800d110 	.word	0x0800d110
 8004868:	200010a0 	.word	0x200010a0
 800486c:	200010dc 	.word	0x200010dc
 8004870:	200010dd 	.word	0x200010dd
 8004874:	0800d124 	.word	0x0800d124
 8004878:	200010b8 	.word	0x200010b8
 800487c:	20000010 	.word	0x20000010
 8004880:	200010e1 	.word	0x200010e1
 8004884:	20000e98 	.word	0x20000e98
 8004888:	200010e2 	.word	0x200010e2
 800488c:	20000ef0 	.word	0x20000ef0

08004890 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004894:	b672      	cpsid	i
}
 8004896:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004898:	e7fe      	b.n	8004898 <Error_Handler+0x8>
	...

0800489c <order_list_init>:
	}
	return 1;
}

void order_list_init(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
	orders.length = 0;
 80048a0:	4b04      	ldr	r3, [pc, #16]	; (80048b4 <order_list_init+0x18>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	701a      	strb	r2, [r3, #0]
	orders.new = 0;
 80048a6:	4b03      	ldr	r3, [pc, #12]	; (80048b4 <order_list_init+0x18>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	705a      	strb	r2, [r3, #1]
}
 80048ac:	bf00      	nop
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr
 80048b4:	200010e4 	.word	0x200010e4

080048b8 <order_append>:

void order_append(Order *an_order)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
	if((an_order->startCoord.x != orders.buffer[orders.new].x) || (an_order->startCoord.y != orders.buffer[orders.new].y))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80048c6:	4b1d      	ldr	r3, [pc, #116]	; (800493c <order_append+0x84>)
 80048c8:	785b      	ldrb	r3, [r3, #1]
 80048ca:	491c      	ldr	r1, [pc, #112]	; (800493c <order_append+0x84>)
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	440b      	add	r3, r1
 80048d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d10b      	bne.n	80048f0 <order_append+0x38>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80048de:	4b17      	ldr	r3, [pc, #92]	; (800493c <order_append+0x84>)
 80048e0:	785b      	ldrb	r3, [r3, #1]
 80048e2:	4916      	ldr	r1, [pc, #88]	; (800493c <order_append+0x84>)
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d01f      	beq.n	8004930 <order_append+0x78>
	{
		orders.buffer[orders.length].x = an_order->startCoord.x;
 80048f0:	4b12      	ldr	r3, [pc, #72]	; (800493c <order_append+0x84>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	4618      	mov	r0, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f9b3 1000 	ldrsh.w	r1, [r3]
 80048fc:	4a0f      	ldr	r2, [pc, #60]	; (800493c <order_append+0x84>)
 80048fe:	0083      	lsls	r3, r0, #2
 8004900:	4413      	add	r3, r2
 8004902:	460a      	mov	r2, r1
 8004904:	805a      	strh	r2, [r3, #2]
		orders.buffer[orders.length].y = an_order->startCoord.y;
 8004906:	4b0d      	ldr	r3, [pc, #52]	; (800493c <order_append+0x84>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8004912:	4a0a      	ldr	r2, [pc, #40]	; (800493c <order_append+0x84>)
 8004914:	0083      	lsls	r3, r0, #2
 8004916:	4413      	add	r3, r2
 8004918:	460a      	mov	r2, r1
 800491a:	809a      	strh	r2, [r3, #4]
		orders.new = orders.length;
 800491c:	4b07      	ldr	r3, [pc, #28]	; (800493c <order_append+0x84>)
 800491e:	781a      	ldrb	r2, [r3, #0]
 8004920:	4b06      	ldr	r3, [pc, #24]	; (800493c <order_append+0x84>)
 8004922:	705a      	strb	r2, [r3, #1]
		orders.length = orders.length + 1;
 8004924:	4b05      	ldr	r3, [pc, #20]	; (800493c <order_append+0x84>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	3301      	adds	r3, #1
 800492a:	b2da      	uxtb	r2, r3
 800492c:	4b03      	ldr	r3, [pc, #12]	; (800493c <order_append+0x84>)
 800492e:	701a      	strb	r2, [r3, #0]
	}
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	bc80      	pop	{r7}
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	200010e4 	.word	0x200010e4

08004940 <Get_nearest_order>:

int8_t Get_nearest_order(void)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
	uint8_t i;
	int16_t mindis = 512;
 8004946:	f44f 7300 	mov.w	r3, #512	; 0x200
 800494a:	80bb      	strh	r3, [r7, #4]
	int8_t minindex = -1;
 800494c:	23ff      	movs	r3, #255	; 0xff
 800494e:	70fb      	strb	r3, [r7, #3]
	if(orders.length == 0)
 8004950:	4b21      	ldr	r3, [pc, #132]	; (80049d8 <Get_nearest_order+0x98>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d102      	bne.n	800495e <Get_nearest_order+0x1e>
		return minindex;
 8004958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800495c:	e037      	b.n	80049ce <Get_nearest_order+0x8e>
	for(i=0;i < orders.length; i++)
 800495e:	2300      	movs	r3, #0
 8004960:	71fb      	strb	r3, [r7, #7]
 8004962:	e02d      	b.n	80049c0 <Get_nearest_order+0x80>
	{
		int16_t distance = abs(orders.buffer[i].x - myCoord.x) + abs(orders.buffer[i].y - myCoord.y);
 8004964:	79fb      	ldrb	r3, [r7, #7]
 8004966:	4a1c      	ldr	r2, [pc, #112]	; (80049d8 <Get_nearest_order+0x98>)
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004970:	461a      	mov	r2, r3
 8004972:	4b1a      	ldr	r3, [pc, #104]	; (80049dc <Get_nearest_order+0x9c>)
 8004974:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	bfb8      	it	lt
 800497e:	425b      	neglt	r3, r3
 8004980:	b29a      	uxth	r2, r3
 8004982:	79fb      	ldrb	r3, [r7, #7]
 8004984:	4914      	ldr	r1, [pc, #80]	; (80049d8 <Get_nearest_order+0x98>)
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800498e:	4619      	mov	r1, r3
 8004990:	4b12      	ldr	r3, [pc, #72]	; (80049dc <Get_nearest_order+0x9c>)
 8004992:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004996:	1acb      	subs	r3, r1, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	bfb8      	it	lt
 800499c:	425b      	neglt	r3, r3
 800499e:	b29b      	uxth	r3, r3
 80049a0:	4413      	add	r3, r2
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	803b      	strh	r3, [r7, #0]
		if(distance < mindis)
 80049a6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80049aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	da03      	bge.n	80049ba <Get_nearest_order+0x7a>
		{
			mindis = distance;
 80049b2:	883b      	ldrh	r3, [r7, #0]
 80049b4:	80bb      	strh	r3, [r7, #4]
			minindex = i;
 80049b6:	79fb      	ldrb	r3, [r7, #7]
 80049b8:	70fb      	strb	r3, [r7, #3]
	for(i=0;i < orders.length; i++)
 80049ba:	79fb      	ldrb	r3, [r7, #7]
 80049bc:	3301      	adds	r3, #1
 80049be:	71fb      	strb	r3, [r7, #7]
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <Get_nearest_order+0x98>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	79fa      	ldrb	r2, [r7, #7]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d3cc      	bcc.n	8004964 <Get_nearest_order+0x24>
		}
	}
    return minindex;
 80049ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bc80      	pop	{r7}
 80049d6:	4770      	bx	lr
 80049d8:	200010e4 	.word	0x200010e4
 80049dc:	20001068 	.word	0x20001068

080049e0 <exitpoints_init>:

void exitpoints_init(void){
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
	exitpoints[0].x = 127;
 80049e4:	4b19      	ldr	r3, [pc, #100]	; (8004a4c <exitpoints_init+0x6c>)
 80049e6:	227f      	movs	r2, #127	; 0x7f
 80049e8:	801a      	strh	r2, [r3, #0]
	exitpoints[0].y = 18;
 80049ea:	4b18      	ldr	r3, [pc, #96]	; (8004a4c <exitpoints_init+0x6c>)
 80049ec:	2212      	movs	r2, #18
 80049ee:	805a      	strh	r2, [r3, #2]
	exitpoints[1].x = 127;
 80049f0:	4b16      	ldr	r3, [pc, #88]	; (8004a4c <exitpoints_init+0x6c>)
 80049f2:	227f      	movs	r2, #127	; 0x7f
 80049f4:	809a      	strh	r2, [r3, #4]
	exitpoints[1].y = 60;
 80049f6:	4b15      	ldr	r3, [pc, #84]	; (8004a4c <exitpoints_init+0x6c>)
 80049f8:	223c      	movs	r2, #60	; 0x3c
 80049fa:	80da      	strh	r2, [r3, #6]
	exitpoints[2].x = 236;
 80049fc:	4b13      	ldr	r3, [pc, #76]	; (8004a4c <exitpoints_init+0x6c>)
 80049fe:	22ec      	movs	r2, #236	; 0xec
 8004a00:	811a      	strh	r2, [r3, #8]
	exitpoints[2].y = 127;
 8004a02:	4b12      	ldr	r3, [pc, #72]	; (8004a4c <exitpoints_init+0x6c>)
 8004a04:	227f      	movs	r2, #127	; 0x7f
 8004a06:	815a      	strh	r2, [r3, #10]
	exitpoints[3].x = 194;
 8004a08:	4b10      	ldr	r3, [pc, #64]	; (8004a4c <exitpoints_init+0x6c>)
 8004a0a:	22c2      	movs	r2, #194	; 0xc2
 8004a0c:	819a      	strh	r2, [r3, #12]
	exitpoints[3].y = 127;
 8004a0e:	4b0f      	ldr	r3, [pc, #60]	; (8004a4c <exitpoints_init+0x6c>)
 8004a10:	227f      	movs	r2, #127	; 0x7f
 8004a12:	81da      	strh	r2, [r3, #14]
	exitpoints[4].x = 127;
 8004a14:	4b0d      	ldr	r3, [pc, #52]	; (8004a4c <exitpoints_init+0x6c>)
 8004a16:	227f      	movs	r2, #127	; 0x7f
 8004a18:	821a      	strh	r2, [r3, #16]
	exitpoints[4].y = 236;
 8004a1a:	4b0c      	ldr	r3, [pc, #48]	; (8004a4c <exitpoints_init+0x6c>)
 8004a1c:	22ec      	movs	r2, #236	; 0xec
 8004a1e:	825a      	strh	r2, [r3, #18]
	exitpoints[5].x = 127;
 8004a20:	4b0a      	ldr	r3, [pc, #40]	; (8004a4c <exitpoints_init+0x6c>)
 8004a22:	227f      	movs	r2, #127	; 0x7f
 8004a24:	829a      	strh	r2, [r3, #20]
	exitpoints[5].y = 194;
 8004a26:	4b09      	ldr	r3, [pc, #36]	; (8004a4c <exitpoints_init+0x6c>)
 8004a28:	22c2      	movs	r2, #194	; 0xc2
 8004a2a:	82da      	strh	r2, [r3, #22]
	exitpoints[6].x = 18;
 8004a2c:	4b07      	ldr	r3, [pc, #28]	; (8004a4c <exitpoints_init+0x6c>)
 8004a2e:	2212      	movs	r2, #18
 8004a30:	831a      	strh	r2, [r3, #24]
	exitpoints[6].y = 127;
 8004a32:	4b06      	ldr	r3, [pc, #24]	; (8004a4c <exitpoints_init+0x6c>)
 8004a34:	227f      	movs	r2, #127	; 0x7f
 8004a36:	835a      	strh	r2, [r3, #26]
	exitpoints[7].x = 60;
 8004a38:	4b04      	ldr	r3, [pc, #16]	; (8004a4c <exitpoints_init+0x6c>)
 8004a3a:	223c      	movs	r2, #60	; 0x3c
 8004a3c:	839a      	strh	r2, [r3, #28]
	exitpoints[7].y = 127;
 8004a3e:	4b03      	ldr	r3, [pc, #12]	; (8004a4c <exitpoints_init+0x6c>)
 8004a40:	227f      	movs	r2, #127	; 0x7f
 8004a42:	83da      	strh	r2, [r3, #30]
}
 8004a44:	bf00      	nop
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr
 8004a4c:	20001024 	.word	0x20001024

08004a50 <GotoDestination>:
extern Motor_HandleTypeDef cmotor_lf, cmotor_rf, cmotor_lb, cmotor_rb;
extern Lane pathlane;
extern Coordinate exitpoints[8];

uint8_t GotoDestination(Coordinate Destination, uint8_t mode)
{
 8004a50:	b5b0      	push	{r4, r5, r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	70fb      	strb	r3, [r7, #3]
	if(mode == 0)
 8004a5c:	78fb      	ldrb	r3, [r7, #3]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d13c      	bne.n	8004adc <GotoDestination+0x8c>
	{
		while(1)
		{
			CheckCoord();
 8004a62:	f000 fad7 	bl	8005014 <CheckCoord>
			Position_P(&EstiCoord, &Destination);
 8004a66:	1d3b      	adds	r3, r7, #4
 8004a68:	4619      	mov	r1, r3
 8004a6a:	48aa      	ldr	r0, [pc, #680]	; (8004d14 <GotoDestination+0x2c4>)
 8004a6c:	f000 faf8 	bl	8005060 <Position_P>
			CheckCoord();
 8004a70:	f000 fad0 	bl	8005014 <CheckCoord>
			if(abs(EstiCoord.x - Destination.x) + abs(EstiCoord.y - Destination.y) <= PATH_PID_TOLERANCE)
 8004a74:	4ba7      	ldr	r3, [pc, #668]	; (8004d14 <GotoDestination+0x2c4>)
 8004a76:	681c      	ldr	r4, [r3, #0]
 8004a78:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fc f95b 	bl	8000d38 <__aeabi_i2f>
 8004a82:	4603      	mov	r3, r0
 8004a84:	4619      	mov	r1, r3
 8004a86:	4620      	mov	r0, r4
 8004a88:	f7fc f8a0 	bl	8000bcc <__aeabi_fsub>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fc fb6c 	bl	800116c <__aeabi_f2iz>
 8004a94:	4603      	mov	r3, r0
 8004a96:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8004a9a:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8004a9e:	4b9d      	ldr	r3, [pc, #628]	; (8004d14 <GotoDestination+0x2c4>)
 8004aa0:	685d      	ldr	r5, [r3, #4]
 8004aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fc f946 	bl	8000d38 <__aeabi_i2f>
 8004aac:	4603      	mov	r3, r0
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	f7fc f88b 	bl	8000bcc <__aeabi_fsub>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fc fb57 	bl	800116c <__aeabi_f2iz>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	bfb8      	it	lt
 8004ac4:	425b      	neglt	r3, r3
 8004ac6:	4423      	add	r3, r4
 8004ac8:	2b05      	cmp	r3, #5
 8004aca:	dcca      	bgt.n	8004a62 <GotoDestination+0x12>
			{
				chao_move_angle(0,0);
 8004acc:	f04f 0100 	mov.w	r1, #0
 8004ad0:	f04f 0000 	mov.w	r0, #0
 8004ad4:	f7fc fb90 	bl	80011f8 <chao_move_angle>
				return 1;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e229      	b.n	8004f30 <GotoDestination+0x4e0>
			}
		}
	}
	//只避障墙壁
	else if(mode == 2){
 8004adc:	78fb      	ldrb	r3, [r7, #3]
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	f040 8225 	bne.w	8004f2e <GotoDestination+0x4de>
		uint8_t myCoordState, DesCoordState = 0;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	75bb      	strb	r3, [r7, #22]
		if(myCoord.x > 40 && myCoord.x < 214 && myCoord.y > 40 && myCoord.y < 214)
 8004ae8:	4b8b      	ldr	r3, [pc, #556]	; (8004d18 <GotoDestination+0x2c8>)
 8004aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004aee:	2b28      	cmp	r3, #40	; 0x28
 8004af0:	dd11      	ble.n	8004b16 <GotoDestination+0xc6>
 8004af2:	4b89      	ldr	r3, [pc, #548]	; (8004d18 <GotoDestination+0x2c8>)
 8004af4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004af8:	2bd5      	cmp	r3, #213	; 0xd5
 8004afa:	dc0c      	bgt.n	8004b16 <GotoDestination+0xc6>
 8004afc:	4b86      	ldr	r3, [pc, #536]	; (8004d18 <GotoDestination+0x2c8>)
 8004afe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b02:	2b28      	cmp	r3, #40	; 0x28
 8004b04:	dd07      	ble.n	8004b16 <GotoDestination+0xc6>
 8004b06:	4b84      	ldr	r3, [pc, #528]	; (8004d18 <GotoDestination+0x2c8>)
 8004b08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b0c:	2bd5      	cmp	r3, #213	; 0xd5
 8004b0e:	dc02      	bgt.n	8004b16 <GotoDestination+0xc6>
			myCoordState = 0;
 8004b10:	2300      	movs	r3, #0
 8004b12:	75fb      	strb	r3, [r7, #23]
 8004b14:	e028      	b.n	8004b68 <GotoDestination+0x118>
		else{
			//计算起点划分
			if(myCoord.x > myCoord.y){
 8004b16:	4b80      	ldr	r3, [pc, #512]	; (8004d18 <GotoDestination+0x2c8>)
 8004b18:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004b1c:	4b7e      	ldr	r3, [pc, #504]	; (8004d18 <GotoDestination+0x2c8>)
 8004b1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	dd10      	ble.n	8004b48 <GotoDestination+0xf8>
				if(myCoord.x <= 254 - myCoord.y)
 8004b26:	4b7c      	ldr	r3, [pc, #496]	; (8004d18 <GotoDestination+0x2c8>)
 8004b28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	4b7a      	ldr	r3, [pc, #488]	; (8004d18 <GotoDestination+0x2c8>)
 8004b30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b34:	f1c3 03fe 	rsb	r3, r3, #254	; 0xfe
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	dc02      	bgt.n	8004b42 <GotoDestination+0xf2>
					myCoordState = 1;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	75fb      	strb	r3, [r7, #23]
 8004b40:	e012      	b.n	8004b68 <GotoDestination+0x118>
				else
					myCoordState = 2;
 8004b42:	2302      	movs	r3, #2
 8004b44:	75fb      	strb	r3, [r7, #23]
 8004b46:	e00f      	b.n	8004b68 <GotoDestination+0x118>
			}
			else{
				if(myCoord.x <= 254 - myCoord.y)
 8004b48:	4b73      	ldr	r3, [pc, #460]	; (8004d18 <GotoDestination+0x2c8>)
 8004b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	4b71      	ldr	r3, [pc, #452]	; (8004d18 <GotoDestination+0x2c8>)
 8004b52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b56:	f1c3 03fe 	rsb	r3, r3, #254	; 0xfe
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	dc02      	bgt.n	8004b64 <GotoDestination+0x114>
					myCoordState = 4;
 8004b5e:	2304      	movs	r3, #4
 8004b60:	75fb      	strb	r3, [r7, #23]
 8004b62:	e001      	b.n	8004b68 <GotoDestination+0x118>
				else
					myCoordState = 3;
 8004b64:	2303      	movs	r3, #3
 8004b66:	75fb      	strb	r3, [r7, #23]
			}
		}
		if(Destination.x > 40 && Destination.x < 214 && Destination.y > 40 && Destination.y < 214)
 8004b68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004b6c:	2b28      	cmp	r3, #40	; 0x28
 8004b6e:	dd0e      	ble.n	8004b8e <GotoDestination+0x13e>
 8004b70:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004b74:	2bd5      	cmp	r3, #213	; 0xd5
 8004b76:	dc0a      	bgt.n	8004b8e <GotoDestination+0x13e>
 8004b78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b7c:	2b28      	cmp	r3, #40	; 0x28
 8004b7e:	dd06      	ble.n	8004b8e <GotoDestination+0x13e>
 8004b80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b84:	2bd5      	cmp	r3, #213	; 0xd5
 8004b86:	dc02      	bgt.n	8004b8e <GotoDestination+0x13e>
			DesCoordState = 0;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	75bb      	strb	r3, [r7, #22]
 8004b8c:	e022      	b.n	8004bd4 <GotoDestination+0x184>
		else{
			// 计算终点划分
			if(Destination.x > Destination.y){
 8004b8e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004b92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	dd0e      	ble.n	8004bb8 <GotoDestination+0x168>
				if(Destination.x <= 254 - Destination.y)
 8004b9a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ba4:	f1c3 03fe 	rsb	r3, r3, #254	; 0xfe
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	dc02      	bgt.n	8004bb2 <GotoDestination+0x162>
					DesCoordState = 1;
 8004bac:	2301      	movs	r3, #1
 8004bae:	75bb      	strb	r3, [r7, #22]
 8004bb0:	e010      	b.n	8004bd4 <GotoDestination+0x184>
				else
					DesCoordState = 2;
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	75bb      	strb	r3, [r7, #22]
 8004bb6:	e00d      	b.n	8004bd4 <GotoDestination+0x184>
			}
			else{
				if(Destination.x <= 254 - Destination.y)
 8004bb8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bc2:	f1c3 03fe 	rsb	r3, r3, #254	; 0xfe
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	dc02      	bgt.n	8004bd0 <GotoDestination+0x180>
					DesCoordState = 4;
 8004bca:	2304      	movs	r3, #4
 8004bcc:	75bb      	strb	r3, [r7, #22]
 8004bce:	e001      	b.n	8004bd4 <GotoDestination+0x184>
				else
					DesCoordState = 3;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	75bb      	strb	r3, [r7, #22]
			}
		}
		// 里 里，或者在外面同一区域的直接走
		if((myCoordState == 0 && DesCoordState == 0)||(myCoord.x<38&&Destination.x<38)||(myCoord.x>216&&Destination.x>216)||(myCoord.y<38&&Destination.y<38)||(myCoord.y>216&&Destination.y>216)){
 8004bd4:	7dfb      	ldrb	r3, [r7, #23]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d102      	bne.n	8004be0 <GotoDestination+0x190>
 8004bda:	7dbb      	ldrb	r3, [r7, #22]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d023      	beq.n	8004c28 <GotoDestination+0x1d8>
 8004be0:	4b4d      	ldr	r3, [pc, #308]	; (8004d18 <GotoDestination+0x2c8>)
 8004be2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004be6:	2b25      	cmp	r3, #37	; 0x25
 8004be8:	dc03      	bgt.n	8004bf2 <GotoDestination+0x1a2>
 8004bea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004bee:	2b25      	cmp	r3, #37	; 0x25
 8004bf0:	dd1a      	ble.n	8004c28 <GotoDestination+0x1d8>
 8004bf2:	4b49      	ldr	r3, [pc, #292]	; (8004d18 <GotoDestination+0x2c8>)
 8004bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bf8:	2bd8      	cmp	r3, #216	; 0xd8
 8004bfa:	dd03      	ble.n	8004c04 <GotoDestination+0x1b4>
 8004bfc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c00:	2bd8      	cmp	r3, #216	; 0xd8
 8004c02:	dc11      	bgt.n	8004c28 <GotoDestination+0x1d8>
 8004c04:	4b44      	ldr	r3, [pc, #272]	; (8004d18 <GotoDestination+0x2c8>)
 8004c06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c0a:	2b25      	cmp	r3, #37	; 0x25
 8004c0c:	dc03      	bgt.n	8004c16 <GotoDestination+0x1c6>
 8004c0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c12:	2b25      	cmp	r3, #37	; 0x25
 8004c14:	dd08      	ble.n	8004c28 <GotoDestination+0x1d8>
 8004c16:	4b40      	ldr	r3, [pc, #256]	; (8004d18 <GotoDestination+0x2c8>)
 8004c18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c1c:	2bd8      	cmp	r3, #216	; 0xd8
 8004c1e:	dd40      	ble.n	8004ca2 <GotoDestination+0x252>
 8004c20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c24:	2bd8      	cmp	r3, #216	; 0xd8
 8004c26:	dd3c      	ble.n	8004ca2 <GotoDestination+0x252>
			while(1){
				CheckCoord();
 8004c28:	f000 f9f4 	bl	8005014 <CheckCoord>
				Position_P(&EstiCoord, &Destination);
 8004c2c:	1d3b      	adds	r3, r7, #4
 8004c2e:	4619      	mov	r1, r3
 8004c30:	4838      	ldr	r0, [pc, #224]	; (8004d14 <GotoDestination+0x2c4>)
 8004c32:	f000 fa15 	bl	8005060 <Position_P>
				CheckCoord();
 8004c36:	f000 f9ed 	bl	8005014 <CheckCoord>
				if(abs(EstiCoord.x - Destination.x) + abs(EstiCoord.y - Destination.y) <= PATH_PID_TOLERANCE){
 8004c3a:	4b36      	ldr	r3, [pc, #216]	; (8004d14 <GotoDestination+0x2c4>)
 8004c3c:	681c      	ldr	r4, [r3, #0]
 8004c3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fc f878 	bl	8000d38 <__aeabi_i2f>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	f7fb ffbd 	bl	8000bcc <__aeabi_fsub>
 8004c52:	4603      	mov	r3, r0
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7fc fa89 	bl	800116c <__aeabi_f2iz>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8004c60:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8004c64:	4b2b      	ldr	r3, [pc, #172]	; (8004d14 <GotoDestination+0x2c4>)
 8004c66:	685d      	ldr	r5, [r3, #4]
 8004c68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fc f863 	bl	8000d38 <__aeabi_i2f>
 8004c72:	4603      	mov	r3, r0
 8004c74:	4619      	mov	r1, r3
 8004c76:	4628      	mov	r0, r5
 8004c78:	f7fb ffa8 	bl	8000bcc <__aeabi_fsub>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fc fa74 	bl	800116c <__aeabi_f2iz>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	bfb8      	it	lt
 8004c8a:	425b      	neglt	r3, r3
 8004c8c:	4423      	add	r3, r4
 8004c8e:	2b05      	cmp	r3, #5
 8004c90:	dcca      	bgt.n	8004c28 <GotoDestination+0x1d8>
					chao_move_angle(0,0);
 8004c92:	f04f 0100 	mov.w	r1, #0
 8004c96:	f04f 0000 	mov.w	r0, #0
 8004c9a:	f7fc faad 	bl	80011f8 <chao_move_angle>
					return 1;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e146      	b.n	8004f30 <GotoDestination+0x4e0>
		//外外或者里外
		else
		{
			Coordinate middle1 , middle2;
			//里外或歪理
			if(myCoordState == 0 || DesCoordState == 0){
 8004ca2:	7dfb      	ldrb	r3, [r7, #23]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d002      	beq.n	8004cae <GotoDestination+0x25e>
 8004ca8:	7dbb      	ldrb	r3, [r7, #22]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d138      	bne.n	8004d20 <GotoDestination+0x2d0>
				uint8_t index = (myCoordState > DesCoordState)?myCoordState : DesCoordState;
 8004cae:	7dba      	ldrb	r2, [r7, #22]
 8004cb0:	7dfb      	ldrb	r3, [r7, #23]
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	bf38      	it	cc
 8004cb6:	4613      	movcc	r3, r2
 8004cb8:	757b      	strb	r3, [r7, #21]
				if(myCoordState == 0){
 8004cba:	7dfb      	ldrb	r3, [r7, #23]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d114      	bne.n	8004cea <GotoDestination+0x29a>
					middle1 = exitpoints[index * 2 - 1];
 8004cc0:	7d7b      	ldrb	r3, [r7, #21]
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	4915      	ldr	r1, [pc, #84]	; (8004d1c <GotoDestination+0x2cc>)
 8004cc8:	f107 0210 	add.w	r2, r7, #16
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	440b      	add	r3, r1
 8004cd0:	6818      	ldr	r0, [r3, #0]
 8004cd2:	6010      	str	r0, [r2, #0]
					middle2 = exitpoints[index * 2 - 2];
 8004cd4:	7d7b      	ldrb	r3, [r7, #21]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	4910      	ldr	r1, [pc, #64]	; (8004d1c <GotoDestination+0x2cc>)
 8004cdc:	f107 020c 	add.w	r2, r7, #12
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	440b      	add	r3, r1
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	6010      	str	r0, [r2, #0]
			if(myCoordState == 0 || DesCoordState == 0){
 8004ce8:	e06c      	b.n	8004dc4 <GotoDestination+0x374>
				}
				else{
					middle2 = exitpoints[index * 2 - 1];
 8004cea:	7d7b      	ldrb	r3, [r7, #21]
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	490a      	ldr	r1, [pc, #40]	; (8004d1c <GotoDestination+0x2cc>)
 8004cf2:	f107 020c 	add.w	r2, r7, #12
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	6818      	ldr	r0, [r3, #0]
 8004cfc:	6010      	str	r0, [r2, #0]
					middle1 = exitpoints[index * 2 - 2];
 8004cfe:	7d7b      	ldrb	r3, [r7, #21]
 8004d00:	3b01      	subs	r3, #1
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	4905      	ldr	r1, [pc, #20]	; (8004d1c <GotoDestination+0x2cc>)
 8004d06:	f107 0210 	add.w	r2, r7, #16
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	6818      	ldr	r0, [r3, #0]
 8004d10:	6010      	str	r0, [r2, #0]
			if(myCoordState == 0 || DesCoordState == 0){
 8004d12:	e057      	b.n	8004dc4 <GotoDestination+0x374>
 8004d14:	2000106c 	.word	0x2000106c
 8004d18:	20001068 	.word	0x20001068
 8004d1c:	20001024 	.word	0x20001024
				}
			}
			// 外外
			else{
				// 跨俩区域
				if(abs(DesCoordState - myCoordState) % 2 == 0)
 8004d20:	7dba      	ldrb	r2, [r7, #22]
 8004d22:	7dfb      	ldrb	r3, [r7, #23]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	bfb8      	it	lt
 8004d2a:	425b      	neglt	r3, r3
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d114      	bne.n	8004d5e <GotoDestination+0x30e>
				{
					middle1 = exitpoints[myCoordState * 2 - 2];
 8004d34:	7dfb      	ldrb	r3, [r7, #23]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	497f      	ldr	r1, [pc, #508]	; (8004f38 <GotoDestination+0x4e8>)
 8004d3c:	f107 0210 	add.w	r2, r7, #16
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	440b      	add	r3, r1
 8004d44:	6818      	ldr	r0, [r3, #0]
 8004d46:	6010      	str	r0, [r2, #0]
					middle2 = exitpoints[DesCoordState * 2 - 2];
 8004d48:	7dbb      	ldrb	r3, [r7, #22]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	497a      	ldr	r1, [pc, #488]	; (8004f38 <GotoDestination+0x4e8>)
 8004d50:	f107 020c 	add.w	r2, r7, #12
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	440b      	add	r3, r1
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	6010      	str	r0, [r2, #0]
 8004d5c:	e032      	b.n	8004dc4 <GotoDestination+0x374>
				}
				// 只跨一个区域
				else{
					if(DesCoordState * myCoordState == 4){
 8004d5e:	7dbb      	ldrb	r3, [r7, #22]
 8004d60:	7dfa      	ldrb	r2, [r7, #23]
 8004d62:	fb02 f303 	mul.w	r3, r2, r3
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d106      	bne.n	8004d78 <GotoDestination+0x328>
						middle1.x = 18;
 8004d6a:	2312      	movs	r3, #18
 8004d6c:	823b      	strh	r3, [r7, #16]
						middle1.y = 18;
 8004d6e:	2312      	movs	r3, #18
 8004d70:	827b      	strh	r3, [r7, #18]
						middle2 = middle1;
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	e025      	b.n	8004dc4 <GotoDestination+0x374>
					}
					else if(DesCoordState * myCoordState == 2){
 8004d78:	7dbb      	ldrb	r3, [r7, #22]
 8004d7a:	7dfa      	ldrb	r2, [r7, #23]
 8004d7c:	fb02 f303 	mul.w	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d106      	bne.n	8004d92 <GotoDestination+0x342>
						middle1.x = 236;
 8004d84:	23ec      	movs	r3, #236	; 0xec
 8004d86:	823b      	strh	r3, [r7, #16]
						middle1.y = 18;
 8004d88:	2312      	movs	r3, #18
 8004d8a:	827b      	strh	r3, [r7, #18]
						middle2 = middle1;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	e018      	b.n	8004dc4 <GotoDestination+0x374>
					}
					else if(DesCoordState * myCoordState == 6){
 8004d92:	7dbb      	ldrb	r3, [r7, #22]
 8004d94:	7dfa      	ldrb	r2, [r7, #23]
 8004d96:	fb02 f303 	mul.w	r3, r2, r3
 8004d9a:	2b06      	cmp	r3, #6
 8004d9c:	d106      	bne.n	8004dac <GotoDestination+0x35c>
						middle1.x = 236;
 8004d9e:	23ec      	movs	r3, #236	; 0xec
 8004da0:	823b      	strh	r3, [r7, #16]
						middle1.y = 236;
 8004da2:	23ec      	movs	r3, #236	; 0xec
 8004da4:	827b      	strh	r3, [r7, #18]
						middle2 = middle1;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	e00b      	b.n	8004dc4 <GotoDestination+0x374>
					}
					else if(DesCoordState * myCoordState == 12)
 8004dac:	7dbb      	ldrb	r3, [r7, #22]
 8004dae:	7dfa      	ldrb	r2, [r7, #23]
 8004db0:	fb02 f303 	mul.w	r3, r2, r3
 8004db4:	2b0c      	cmp	r3, #12
 8004db6:	d105      	bne.n	8004dc4 <GotoDestination+0x374>
					{
						middle1.x = 18;
 8004db8:	2312      	movs	r3, #18
 8004dba:	823b      	strh	r3, [r7, #16]
						middle1.y = 236;
 8004dbc:	23ec      	movs	r3, #236	; 0xec
 8004dbe:	827b      	strh	r3, [r7, #18]
						middle2 = middle1;
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	60fb      	str	r3, [r7, #12]
					}
				}
			}
			while(1){
				CheckCoord();
 8004dc4:	f000 f926 	bl	8005014 <CheckCoord>
				Position_P(&EstiCoord, &middle1);
 8004dc8:	f107 0310 	add.w	r3, r7, #16
 8004dcc:	4619      	mov	r1, r3
 8004dce:	485b      	ldr	r0, [pc, #364]	; (8004f3c <GotoDestination+0x4ec>)
 8004dd0:	f000 f946 	bl	8005060 <Position_P>
				CheckCoord();
 8004dd4:	f000 f91e 	bl	8005014 <CheckCoord>
				if(abs(EstiCoord.x - middle1.x) + abs(EstiCoord.y - middle1.y) <= PATH_PID_TOLERANCE){
 8004dd8:	4b58      	ldr	r3, [pc, #352]	; (8004f3c <GotoDestination+0x4ec>)
 8004dda:	681c      	ldr	r4, [r3, #0]
 8004ddc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fb ffa9 	bl	8000d38 <__aeabi_i2f>
 8004de6:	4603      	mov	r3, r0
 8004de8:	4619      	mov	r1, r3
 8004dea:	4620      	mov	r0, r4
 8004dec:	f7fb feee 	bl	8000bcc <__aeabi_fsub>
 8004df0:	4603      	mov	r3, r0
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fc f9ba 	bl	800116c <__aeabi_f2iz>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8004dfe:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8004e02:	4b4e      	ldr	r3, [pc, #312]	; (8004f3c <GotoDestination+0x4ec>)
 8004e04:	685d      	ldr	r5, [r3, #4]
 8004e06:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fb ff94 	bl	8000d38 <__aeabi_i2f>
 8004e10:	4603      	mov	r3, r0
 8004e12:	4619      	mov	r1, r3
 8004e14:	4628      	mov	r0, r5
 8004e16:	f7fb fed9 	bl	8000bcc <__aeabi_fsub>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fc f9a5 	bl	800116c <__aeabi_f2iz>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	bfb8      	it	lt
 8004e28:	425b      	neglt	r3, r3
 8004e2a:	4423      	add	r3, r4
 8004e2c:	2b05      	cmp	r3, #5
 8004e2e:	dcc9      	bgt.n	8004dc4 <GotoDestination+0x374>
					chao_move_angle(0,0);
 8004e30:	f04f 0100 	mov.w	r1, #0
 8004e34:	f04f 0000 	mov.w	r0, #0
 8004e38:	f7fc f9de 	bl	80011f8 <chao_move_angle>
					break;
				}
			}
			while(1){
				CheckCoord();
 8004e3c:	f000 f8ea 	bl	8005014 <CheckCoord>
				Position_P(&EstiCoord, &middle2);
 8004e40:	f107 030c 	add.w	r3, r7, #12
 8004e44:	4619      	mov	r1, r3
 8004e46:	483d      	ldr	r0, [pc, #244]	; (8004f3c <GotoDestination+0x4ec>)
 8004e48:	f000 f90a 	bl	8005060 <Position_P>
				CheckCoord();
 8004e4c:	f000 f8e2 	bl	8005014 <CheckCoord>
				if(abs(EstiCoord.x - middle2.x) + abs(EstiCoord.y - middle2.y) <= PATH_PID_TOLERANCE){
 8004e50:	4b3a      	ldr	r3, [pc, #232]	; (8004f3c <GotoDestination+0x4ec>)
 8004e52:	681c      	ldr	r4, [r3, #0]
 8004e54:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fb ff6d 	bl	8000d38 <__aeabi_i2f>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	4619      	mov	r1, r3
 8004e62:	4620      	mov	r0, r4
 8004e64:	f7fb feb2 	bl	8000bcc <__aeabi_fsub>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fc f97e 	bl	800116c <__aeabi_f2iz>
 8004e70:	4603      	mov	r3, r0
 8004e72:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8004e76:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8004e7a:	4b30      	ldr	r3, [pc, #192]	; (8004f3c <GotoDestination+0x4ec>)
 8004e7c:	685d      	ldr	r5, [r3, #4]
 8004e7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fb ff58 	bl	8000d38 <__aeabi_i2f>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	f7fb fe9d 	bl	8000bcc <__aeabi_fsub>
 8004e92:	4603      	mov	r3, r0
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7fc f969 	bl	800116c <__aeabi_f2iz>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	bfb8      	it	lt
 8004ea0:	425b      	neglt	r3, r3
 8004ea2:	4423      	add	r3, r4
 8004ea4:	2b05      	cmp	r3, #5
 8004ea6:	dcc9      	bgt.n	8004e3c <GotoDestination+0x3ec>
					chao_move_angle(0,0);
 8004ea8:	f04f 0100 	mov.w	r1, #0
 8004eac:	f04f 0000 	mov.w	r0, #0
 8004eb0:	f7fc f9a2 	bl	80011f8 <chao_move_angle>
					break;
				}
			}
			while(1){
				CheckCoord();
 8004eb4:	f000 f8ae 	bl	8005014 <CheckCoord>
				Position_P(&EstiCoord, &Destination);
 8004eb8:	1d3b      	adds	r3, r7, #4
 8004eba:	4619      	mov	r1, r3
 8004ebc:	481f      	ldr	r0, [pc, #124]	; (8004f3c <GotoDestination+0x4ec>)
 8004ebe:	f000 f8cf 	bl	8005060 <Position_P>
				CheckCoord();
 8004ec2:	f000 f8a7 	bl	8005014 <CheckCoord>
				if(abs(EstiCoord.x - Destination.x) + abs(EstiCoord.y - Destination.y) <= PATH_PID_TOLERANCE){
 8004ec6:	4b1d      	ldr	r3, [pc, #116]	; (8004f3c <GotoDestination+0x4ec>)
 8004ec8:	681c      	ldr	r4, [r3, #0]
 8004eca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fb ff32 	bl	8000d38 <__aeabi_i2f>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	4620      	mov	r0, r4
 8004eda:	f7fb fe77 	bl	8000bcc <__aeabi_fsub>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fc f943 	bl	800116c <__aeabi_f2iz>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8004eec:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8004ef0:	4b12      	ldr	r3, [pc, #72]	; (8004f3c <GotoDestination+0x4ec>)
 8004ef2:	685d      	ldr	r5, [r3, #4]
 8004ef4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fb ff1d 	bl	8000d38 <__aeabi_i2f>
 8004efe:	4603      	mov	r3, r0
 8004f00:	4619      	mov	r1, r3
 8004f02:	4628      	mov	r0, r5
 8004f04:	f7fb fe62 	bl	8000bcc <__aeabi_fsub>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fc f92e 	bl	800116c <__aeabi_f2iz>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	bfb8      	it	lt
 8004f16:	425b      	neglt	r3, r3
 8004f18:	4423      	add	r3, r4
 8004f1a:	2b05      	cmp	r3, #5
 8004f1c:	dcca      	bgt.n	8004eb4 <GotoDestination+0x464>
					chao_move_angle(0,0);
 8004f1e:	f04f 0100 	mov.w	r1, #0
 8004f22:	f04f 0000 	mov.w	r0, #0
 8004f26:	f7fc f967 	bl	80011f8 <chao_move_angle>
					return 1;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e000      	b.n	8004f30 <GotoDestination+0x4e0>
				}
			}
		}
	}
	return 0;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bdb0      	pop	{r4, r5, r7, pc}
 8004f38:	20001024 	.word	0x20001024
 8004f3c:	2000106c 	.word	0x2000106c

08004f40 <Angle_normalization>:

float Angle_normalization(float angle)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
	float raw_angle = angle;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	60fb      	str	r3, [r7, #12]
	while(raw_angle < 0)
 8004f4c:	e005      	b.n	8004f5a <Angle_normalization+0x1a>
	{
		raw_angle += 360;
 8004f4e:	4910      	ldr	r1, [pc, #64]	; (8004f90 <Angle_normalization+0x50>)
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f7fb fe3d 	bl	8000bd0 <__addsf3>
 8004f56:	4603      	mov	r3, r0
 8004f58:	60fb      	str	r3, [r7, #12]
	while(raw_angle < 0)
 8004f5a:	f04f 0100 	mov.w	r1, #0
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f7fc f8dc 	bl	800111c <__aeabi_fcmplt>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f1      	bne.n	8004f4e <Angle_normalization+0xe>
	}
	while(raw_angle > 360)
 8004f6a:	e005      	b.n	8004f78 <Angle_normalization+0x38>
	{
		raw_angle -= 360;
 8004f6c:	4908      	ldr	r1, [pc, #32]	; (8004f90 <Angle_normalization+0x50>)
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f7fb fe2c 	bl	8000bcc <__aeabi_fsub>
 8004f74:	4603      	mov	r3, r0
 8004f76:	60fb      	str	r3, [r7, #12]
	while(raw_angle > 360)
 8004f78:	4905      	ldr	r1, [pc, #20]	; (8004f90 <Angle_normalization+0x50>)
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f7fc f8ec 	bl	8001158 <__aeabi_fcmpgt>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1f2      	bne.n	8004f6c <Angle_normalization+0x2c>
	}
	return raw_angle;
 8004f86:	68fb      	ldr	r3, [r7, #12]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	43b40000 	.word	0x43b40000

08004f94 <CalSpeed>:

float CalSpeed(int16_t x, int16_t y)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	460a      	mov	r2, r1
 8004f9e:	80fb      	strh	r3, [r7, #6]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	80bb      	strh	r3, [r7, #4]
	float kp = 50.0;
 8004fa4:	4b18      	ldr	r3, [pc, #96]	; (8005008 <CalSpeed+0x74>)
 8004fa6:	60bb      	str	r3, [r7, #8]

	float Speed = kp * (abs(x) + abs(y));
 8004fa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	bfb8      	it	lt
 8004fb0:	425b      	neglt	r3, r3
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	bfb8      	it	lt
 8004fbe:	425b      	neglt	r3, r3
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	4413      	add	r3, r2
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7fb feb7 	bl	8000d38 <__aeabi_i2f>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	4619      	mov	r1, r3
 8004fce:	68b8      	ldr	r0, [r7, #8]
 8004fd0:	f7fb ff06 	bl	8000de0 <__aeabi_fmul>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	60fb      	str	r3, [r7, #12]
	if(Speed > MAX_SPEED)
 8004fd8:	490c      	ldr	r1, [pc, #48]	; (800500c <CalSpeed+0x78>)
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f7fc f8bc 	bl	8001158 <__aeabi_fcmpgt>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <CalSpeed+0x56>
	{
		Speed = MAX_SPEED;
 8004fe6:	4b09      	ldr	r3, [pc, #36]	; (800500c <CalSpeed+0x78>)
 8004fe8:	60fb      	str	r3, [r7, #12]
	}
	if(Speed < MIN_SPEED)
 8004fea:	4909      	ldr	r1, [pc, #36]	; (8005010 <CalSpeed+0x7c>)
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f7fc f895 	bl	800111c <__aeabi_fcmplt>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <CalSpeed+0x68>
	{
		Speed = MIN_SPEED;
 8004ff8:	4b05      	ldr	r3, [pc, #20]	; (8005010 <CalSpeed+0x7c>)
 8004ffa:	60fb      	str	r3, [r7, #12]
	}
	return Speed;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	42480000 	.word	0x42480000
 800500c:	451c4000 	.word	0x451c4000
 8005010:	447a0000 	.word	0x447a0000

08005014 <CheckCoord>:

uint8_t CheckCoord(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
	if(CoordinateUpdate == 1)
 8005018:	4b0e      	ldr	r3, [pc, #56]	; (8005054 <CheckCoord+0x40>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d116      	bne.n	800504e <CheckCoord+0x3a>
	{
		EstiCoord.x = (float)myCoord.x;
 8005020:	4b0d      	ldr	r3, [pc, #52]	; (8005058 <CheckCoord+0x44>)
 8005022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005026:	4618      	mov	r0, r3
 8005028:	f7fb fe86 	bl	8000d38 <__aeabi_i2f>
 800502c:	4603      	mov	r3, r0
 800502e:	4a0b      	ldr	r2, [pc, #44]	; (800505c <CheckCoord+0x48>)
 8005030:	6013      	str	r3, [r2, #0]
		EstiCoord.y = (float)myCoord.y;
 8005032:	4b09      	ldr	r3, [pc, #36]	; (8005058 <CheckCoord+0x44>)
 8005034:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005038:	4618      	mov	r0, r3
 800503a:	f7fb fe7d 	bl	8000d38 <__aeabi_i2f>
 800503e:	4603      	mov	r3, r0
 8005040:	4a06      	ldr	r2, [pc, #24]	; (800505c <CheckCoord+0x48>)
 8005042:	6053      	str	r3, [r2, #4]
		CoordinateUpdate = 0;
 8005044:	4b03      	ldr	r3, [pc, #12]	; (8005054 <CheckCoord+0x40>)
 8005046:	2200      	movs	r2, #0
 8005048:	701a      	strb	r2, [r3, #0]
		return 1;
 800504a:	2301      	movs	r3, #1
 800504c:	e000      	b.n	8005050 <CheckCoord+0x3c>
	}
	return 0;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	bd80      	pop	{r7, pc}
 8005054:	20001074 	.word	0x20001074
 8005058:	20001068 	.word	0x20001068
 800505c:	2000106c 	.word	0x2000106c

08005060 <Position_P>:
	float v_y = (cmotor_rf.lastSpeed + cmotor_lf.lastSpeed + cmotor_lb.lastSpeed + cmotor_rb.lastSpeed) * 60.0 / 20000;
	return v_y;
}

void Position_P(fCoordinate* cur, Coordinate* goal)
{
 8005060:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005064:	b08e      	sub	sp, #56	; 0x38
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	6039      	str	r1, [r7, #0]
	float x_error = cur->x - goal->x;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681c      	ldr	r4, [r3, #0]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005076:	4618      	mov	r0, r3
 8005078:	f7fb fe5e 	bl	8000d38 <__aeabi_i2f>
 800507c:	4603      	mov	r3, r0
 800507e:	4619      	mov	r1, r3
 8005080:	4620      	mov	r0, r4
 8005082:	f7fb fda3 	bl	8000bcc <__aeabi_fsub>
 8005086:	4603      	mov	r3, r0
 8005088:	633b      	str	r3, [r7, #48]	; 0x30
	float y_error = goal->y - cur->y;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005090:	4618      	mov	r0, r3
 8005092:	f7fb fe51 	bl	8000d38 <__aeabi_i2f>
 8005096:	4602      	mov	r2, r0
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	4619      	mov	r1, r3
 800509e:	4610      	mov	r0, r2
 80050a0:	f7fb fd94 	bl	8000bcc <__aeabi_fsub>
 80050a4:	4603      	mov	r3, r0
 80050a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (y_error == 0)
 80050a8:	f04f 0100 	mov.w	r1, #0
 80050ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80050ae:	f7fc f82b 	bl	8001108 <__aeabi_fcmpeq>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d034      	beq.n	8005122 <Position_P+0xc2>
	{
		if(x_error < 0)
 80050b8:	f04f 0100 	mov.w	r1, #0
 80050bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050be:	f7fc f82d 	bl	800111c <__aeabi_fcmplt>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00e      	beq.n	80050e6 <Position_P+0x86>
		{
			chao_move_angle(270, CalSpeed(x_error, 0));
 80050c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050ca:	f7fc f84f 	bl	800116c <__aeabi_f2iz>
 80050ce:	4603      	mov	r3, r0
 80050d0:	b21b      	sxth	r3, r3
 80050d2:	2100      	movs	r1, #0
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff ff5d 	bl	8004f94 <CalSpeed>
 80050da:	4603      	mov	r3, r0
 80050dc:	4619      	mov	r1, r3
 80050de:	4862      	ldr	r0, [pc, #392]	; (8005268 <Position_P+0x208>)
 80050e0:	f7fc f88a 	bl	80011f8 <chao_move_angle>
 80050e4:	e0e1      	b.n	80052aa <Position_P+0x24a>
		}
		else if(x_error > 0)
 80050e6:	f04f 0100 	mov.w	r1, #0
 80050ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050ec:	f7fc f834 	bl	8001158 <__aeabi_fcmpgt>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00e      	beq.n	8005114 <Position_P+0xb4>
		{
			chao_move_angle(90, CalSpeed(x_error, 0));
 80050f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050f8:	f7fc f838 	bl	800116c <__aeabi_f2iz>
 80050fc:	4603      	mov	r3, r0
 80050fe:	b21b      	sxth	r3, r3
 8005100:	2100      	movs	r1, #0
 8005102:	4618      	mov	r0, r3
 8005104:	f7ff ff46 	bl	8004f94 <CalSpeed>
 8005108:	4603      	mov	r3, r0
 800510a:	4619      	mov	r1, r3
 800510c:	4857      	ldr	r0, [pc, #348]	; (800526c <Position_P+0x20c>)
 800510e:	f7fc f873 	bl	80011f8 <chao_move_angle>
 8005112:	e0ca      	b.n	80052aa <Position_P+0x24a>
		}
		else
		{
			chao_move_angle(0, 0);
 8005114:	f04f 0100 	mov.w	r1, #0
 8005118:	f04f 0000 	mov.w	r0, #0
 800511c:	f7fc f86c 	bl	80011f8 <chao_move_angle>
 8005120:	e0c3      	b.n	80052aa <Position_P+0x24a>
		}
	}
	else
	{
		float azimuth = atan((float)(x_error)/(y_error));
 8005122:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005126:	f7fb ff0f 	bl	8000f48 <__aeabi_fdiv>
 800512a:	4603      	mov	r3, r0
 800512c:	4618      	mov	r0, r3
 800512e:	f7fb f9df 	bl	80004f0 <__aeabi_f2d>
 8005132:	4602      	mov	r2, r0
 8005134:	460b      	mov	r3, r1
 8005136:	4610      	mov	r0, r2
 8005138:	4619      	mov	r1, r3
 800513a:	f006 fdb5 	bl	800bca8 <atan>
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	4610      	mov	r0, r2
 8005144:	4619      	mov	r1, r3
 8005146:	f7fb fced 	bl	8000b24 <__aeabi_d2f>
 800514a:	4603      	mov	r3, r0
 800514c:	637b      	str	r3, [r7, #52]	; 0x34
		if(y_error < 0)
 800514e:	f04f 0100 	mov.w	r1, #0
 8005152:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005154:	f7fb ffe2 	bl	800111c <__aeabi_fcmplt>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00f      	beq.n	800517e <Position_P+0x11e>
		{
			azimuth += M_PI;
 800515e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005160:	f7fb f9c6 	bl	80004f0 <__aeabi_f2d>
 8005164:	a33c      	add	r3, pc, #240	; (adr r3, 8005258 <Position_P+0x1f8>)
 8005166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516a:	f7fb f863 	bl	8000234 <__adddf3>
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	4610      	mov	r0, r2
 8005174:	4619      	mov	r1, r3
 8005176:	f7fb fcd5 	bl	8000b24 <__aeabi_d2f>
 800517a:	4603      	mov	r3, r0
 800517c:	637b      	str	r3, [r7, #52]	; 0x34
		}
		azimuth = azimuth * 360.0 / (2 * M_PI);
 800517e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005180:	f7fb f9b6 	bl	80004f0 <__aeabi_f2d>
 8005184:	f04f 0200 	mov.w	r2, #0
 8005188:	4b39      	ldr	r3, [pc, #228]	; (8005270 <Position_P+0x210>)
 800518a:	f7fb fa09 	bl	80005a0 <__aeabi_dmul>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	4610      	mov	r0, r2
 8005194:	4619      	mov	r1, r3
 8005196:	a332      	add	r3, pc, #200	; (adr r3, 8005260 <Position_P+0x200>)
 8005198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519c:	f7fb fb2a 	bl	80007f4 <__aeabi_ddiv>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4610      	mov	r0, r2
 80051a6:	4619      	mov	r1, r3
 80051a8:	f7fb fcbc 	bl	8000b24 <__aeabi_d2f>
 80051ac:	4603      	mov	r3, r0
 80051ae:	637b      	str	r3, [r7, #52]	; 0x34
		azimuth = Angle_normalization(azimuth);
 80051b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80051b2:	f7ff fec5 	bl	8004f40 <Angle_normalization>
 80051b6:	6378      	str	r0, [r7, #52]	; 0x34
		float angle = azimuth - Angle_normalization(initangleZ - himu.theta[2]);
 80051b8:	4b2e      	ldr	r3, [pc, #184]	; (8005274 <Position_P+0x214>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a2e      	ldr	r2, [pc, #184]	; (8005278 <Position_P+0x218>)
 80051be:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80051c0:	4611      	mov	r1, r2
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fb fd02 	bl	8000bcc <__aeabi_fsub>
 80051c8:	4603      	mov	r3, r0
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff feb8 	bl	8004f40 <Angle_normalization>
 80051d0:	4603      	mov	r3, r0
 80051d2:	4619      	mov	r1, r3
 80051d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80051d6:	f7fb fcf9 	bl	8000bcc <__aeabi_fsub>
 80051da:	4603      	mov	r3, r0
 80051dc:	62bb      	str	r3, [r7, #40]	; 0x28
		angle = Angle_normalization(angle);
 80051de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051e0:	f7ff feae 	bl	8004f40 <Angle_normalization>
 80051e4:	62b8      	str	r0, [r7, #40]	; 0x28

		if(cur->x < 10 || cur->x > 244 || cur->y < 10 || cur->y >244)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4924      	ldr	r1, [pc, #144]	; (800527c <Position_P+0x21c>)
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7fb ff95 	bl	800111c <__aeabi_fcmplt>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d11a      	bne.n	800522e <Position_P+0x1ce>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4920      	ldr	r1, [pc, #128]	; (8005280 <Position_P+0x220>)
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fb ffaa 	bl	8001158 <__aeabi_fcmpgt>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d111      	bne.n	800522e <Position_P+0x1ce>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	491b      	ldr	r1, [pc, #108]	; (800527c <Position_P+0x21c>)
 8005210:	4618      	mov	r0, r3
 8005212:	f7fb ff83 	bl	800111c <__aeabi_fcmplt>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d108      	bne.n	800522e <Position_P+0x1ce>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	4917      	ldr	r1, [pc, #92]	; (8005280 <Position_P+0x220>)
 8005222:	4618      	mov	r0, r3
 8005224:	f7fb ff98 	bl	8001158 <__aeabi_fcmpgt>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d02a      	beq.n	8005284 <Position_P+0x224>
			move_angle_omega(angle, CalSpeed(x_error, y_error));
 800522e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005230:	f7fb ff9c 	bl	800116c <__aeabi_f2iz>
 8005234:	4603      	mov	r3, r0
 8005236:	b21c      	sxth	r4, r3
 8005238:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800523a:	f7fb ff97 	bl	800116c <__aeabi_f2iz>
 800523e:	4603      	mov	r3, r0
 8005240:	b21b      	sxth	r3, r3
 8005242:	4619      	mov	r1, r3
 8005244:	4620      	mov	r0, r4
 8005246:	f7ff fea5 	bl	8004f94 <CalSpeed>
 800524a:	4603      	mov	r3, r0
 800524c:	4619      	mov	r1, r3
 800524e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005250:	f7fc f8ee 	bl	8001430 <move_angle_omega>
 8005254:	e029      	b.n	80052aa <Position_P+0x24a>
 8005256:	bf00      	nop
 8005258:	54442d18 	.word	0x54442d18
 800525c:	400921fb 	.word	0x400921fb
 8005260:	54442d18 	.word	0x54442d18
 8005264:	401921fb 	.word	0x401921fb
 8005268:	43870000 	.word	0x43870000
 800526c:	42b40000 	.word	0x42b40000
 8005270:	40768000 	.word	0x40768000
 8005274:	20001078 	.word	0x20001078
 8005278:	20000e98 	.word	0x20000e98
 800527c:	41200000 	.word	0x41200000
 8005280:	43740000 	.word	0x43740000
		else
			chao_move_angle(angle, CalSpeed(x_error, y_error));
 8005284:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005286:	f7fb ff71 	bl	800116c <__aeabi_f2iz>
 800528a:	4603      	mov	r3, r0
 800528c:	b21c      	sxth	r4, r3
 800528e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005290:	f7fb ff6c 	bl	800116c <__aeabi_f2iz>
 8005294:	4603      	mov	r3, r0
 8005296:	b21b      	sxth	r3, r3
 8005298:	4619      	mov	r1, r3
 800529a:	4620      	mov	r0, r4
 800529c:	f7ff fe7a 	bl	8004f94 <CalSpeed>
 80052a0:	4603      	mov	r3, r0
 80052a2:	4619      	mov	r1, r3
 80052a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052a6:	f7fb ffa7 	bl	80011f8 <chao_move_angle>
	}
//	CheckCoord();
	uint32_t timestart = HAL_GetTick();
 80052aa:	f001 f989 	bl	80065c0 <HAL_GetTick>
 80052ae:	6278      	str	r0, [r7, #36]	; 0x24
	HAL_Delay(10); // delay 10 ms = 100 Hz
 80052b0:	200a      	movs	r0, #10
 80052b2:	f001 f98f 	bl	80065d4 <HAL_Delay>
	if(CheckCoord() == 0)
 80052b6:	f7ff fead 	bl	8005014 <CheckCoord>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f040 8095 	bne.w	80053ec <Position_P+0x38c>
	{
		float lf_v = cmotor_lf.lastSpeed;
 80052c2:	4b4f      	ldr	r3, [pc, #316]	; (8005400 <Position_P+0x3a0>)
 80052c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c6:	623b      	str	r3, [r7, #32]
		float lb_v = cmotor_lb.lastSpeed;
 80052c8:	4b4e      	ldr	r3, [pc, #312]	; (8005404 <Position_P+0x3a4>)
 80052ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052cc:	61fb      	str	r3, [r7, #28]
		float rf_v = cmotor_rf.lastSpeed;
 80052ce:	4b4e      	ldr	r3, [pc, #312]	; (8005408 <Position_P+0x3a8>)
 80052d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d2:	61bb      	str	r3, [r7, #24]
		float rb_v = cmotor_rb.lastSpeed;
 80052d4:	4b4d      	ldr	r3, [pc, #308]	; (800540c <Position_P+0x3ac>)
 80052d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d8:	617b      	str	r3, [r7, #20]
//		float v_x = -((rf_v - lf_v + lb_v - rb_v) / 500);
		float v_x = ((rf_v - lf_v + lb_v - rb_v) / 100);
 80052da:	6a39      	ldr	r1, [r7, #32]
 80052dc:	69b8      	ldr	r0, [r7, #24]
 80052de:	f7fb fc75 	bl	8000bcc <__aeabi_fsub>
 80052e2:	4603      	mov	r3, r0
 80052e4:	69f9      	ldr	r1, [r7, #28]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fb fc72 	bl	8000bd0 <__addsf3>
 80052ec:	4603      	mov	r3, r0
 80052ee:	6979      	ldr	r1, [r7, #20]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7fb fc6b 	bl	8000bcc <__aeabi_fsub>
 80052f6:	4603      	mov	r3, r0
 80052f8:	4945      	ldr	r1, [pc, #276]	; (8005410 <Position_P+0x3b0>)
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fb fe24 	bl	8000f48 <__aeabi_fdiv>
 8005300:	4603      	mov	r3, r0
 8005302:	613b      	str	r3, [r7, #16]
		float v_y = ((rf_v + lf_v + lb_v + rb_v) / 100);
 8005304:	6a39      	ldr	r1, [r7, #32]
 8005306:	69b8      	ldr	r0, [r7, #24]
 8005308:	f7fb fc62 	bl	8000bd0 <__addsf3>
 800530c:	4603      	mov	r3, r0
 800530e:	69f9      	ldr	r1, [r7, #28]
 8005310:	4618      	mov	r0, r3
 8005312:	f7fb fc5d 	bl	8000bd0 <__addsf3>
 8005316:	4603      	mov	r3, r0
 8005318:	6979      	ldr	r1, [r7, #20]
 800531a:	4618      	mov	r0, r3
 800531c:	f7fb fc58 	bl	8000bd0 <__addsf3>
 8005320:	4603      	mov	r3, r0
 8005322:	493b      	ldr	r1, [pc, #236]	; (8005410 <Position_P+0x3b0>)
 8005324:	4618      	mov	r0, r3
 8005326:	f7fb fe0f 	bl	8000f48 <__aeabi_fdiv>
 800532a:	4603      	mov	r3, r0
 800532c:	60fb      	str	r3, [r7, #12]
		uint32_t timeend = HAL_GetTick();
 800532e:	f001 f947 	bl	80065c0 <HAL_GetTick>
 8005332:	60b8      	str	r0, [r7, #8]
		EstiCoord.x = EstiCoord.x + (timeend - timestart) * 0.001 * v_x;
 8005334:	4b37      	ldr	r3, [pc, #220]	; (8005414 <Position_P+0x3b4>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4618      	mov	r0, r3
 800533a:	f7fb f8d9 	bl	80004f0 <__aeabi_f2d>
 800533e:	4604      	mov	r4, r0
 8005340:	460d      	mov	r5, r1
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	4618      	mov	r0, r3
 800534a:	f7fb f8af 	bl	80004ac <__aeabi_ui2d>
 800534e:	a32a      	add	r3, pc, #168	; (adr r3, 80053f8 <Position_P+0x398>)
 8005350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005354:	f7fb f924 	bl	80005a0 <__aeabi_dmul>
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	4690      	mov	r8, r2
 800535e:	4699      	mov	r9, r3
 8005360:	6938      	ldr	r0, [r7, #16]
 8005362:	f7fb f8c5 	bl	80004f0 <__aeabi_f2d>
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	4640      	mov	r0, r8
 800536c:	4649      	mov	r1, r9
 800536e:	f7fb f917 	bl	80005a0 <__aeabi_dmul>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	4620      	mov	r0, r4
 8005378:	4629      	mov	r1, r5
 800537a:	f7fa ff5b 	bl	8000234 <__adddf3>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4610      	mov	r0, r2
 8005384:	4619      	mov	r1, r3
 8005386:	f7fb fbcd 	bl	8000b24 <__aeabi_d2f>
 800538a:	4603      	mov	r3, r0
 800538c:	4a21      	ldr	r2, [pc, #132]	; (8005414 <Position_P+0x3b4>)
 800538e:	6013      	str	r3, [r2, #0]
		EstiCoord.y = EstiCoord.y + (timeend - timestart) * 0.001 * v_y;
 8005390:	4b20      	ldr	r3, [pc, #128]	; (8005414 <Position_P+0x3b4>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	4618      	mov	r0, r3
 8005396:	f7fb f8ab 	bl	80004f0 <__aeabi_f2d>
 800539a:	4604      	mov	r4, r0
 800539c:	460d      	mov	r5, r1
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7fb f881 	bl	80004ac <__aeabi_ui2d>
 80053aa:	a313      	add	r3, pc, #76	; (adr r3, 80053f8 <Position_P+0x398>)
 80053ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b0:	f7fb f8f6 	bl	80005a0 <__aeabi_dmul>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	4690      	mov	r8, r2
 80053ba:	4699      	mov	r9, r3
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f7fb f897 	bl	80004f0 <__aeabi_f2d>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	4640      	mov	r0, r8
 80053c8:	4649      	mov	r1, r9
 80053ca:	f7fb f8e9 	bl	80005a0 <__aeabi_dmul>
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	4620      	mov	r0, r4
 80053d4:	4629      	mov	r1, r5
 80053d6:	f7fa ff2d 	bl	8000234 <__adddf3>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	4610      	mov	r0, r2
 80053e0:	4619      	mov	r1, r3
 80053e2:	f7fb fb9f 	bl	8000b24 <__aeabi_d2f>
 80053e6:	4603      	mov	r3, r0
 80053e8:	4a0a      	ldr	r2, [pc, #40]	; (8005414 <Position_P+0x3b4>)
 80053ea:	6053      	str	r3, [r2, #4]
	}
}
 80053ec:	bf00      	nop
 80053ee:	3738      	adds	r7, #56	; 0x38
 80053f0:	46bd      	mov	sp, r7
 80053f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80053f6:	bf00      	nop
 80053f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80053fc:	3f50624d 	.word	0x3f50624d
 8005400:	20000da8 	.word	0x20000da8
 8005404:	20000e20 	.word	0x20000e20
 8005408:	20000de4 	.word	0x20000de4
 800540c:	20000e5c 	.word	0x20000e5c
 8005410:	42c80000 	.word	0x42c80000
 8005414:	2000106c 	.word	0x2000106c

08005418 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800541c:	bf00      	nop
 800541e:	46bd      	mov	sp, r7
 8005420:	bc80      	pop	{r7}
 8005422:	4770      	bx	lr

08005424 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af04      	add	r7, sp, #16
 800542a:	4603      	mov	r3, r0
 800542c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800542e:	f04f 33ff 	mov.w	r3, #4294967295
 8005432:	9302      	str	r3, [sp, #8]
 8005434:	2301      	movs	r3, #1
 8005436:	9301      	str	r3, [sp, #4]
 8005438:	1dfb      	adds	r3, r7, #7
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	2301      	movs	r3, #1
 800543e:	2200      	movs	r2, #0
 8005440:	2178      	movs	r1, #120	; 0x78
 8005442:	4803      	ldr	r0, [pc, #12]	; (8005450 <ssd1306_WriteCommand+0x2c>)
 8005444:	f002 fae0 	bl	8007a08 <HAL_I2C_Mem_Write>
}
 8005448:	bf00      	nop
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	20000a04 	.word	0x20000a04

08005454 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af04      	add	r7, sp, #16
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	b29b      	uxth	r3, r3
 8005462:	f04f 32ff 	mov.w	r2, #4294967295
 8005466:	9202      	str	r2, [sp, #8]
 8005468:	9301      	str	r3, [sp, #4]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	2301      	movs	r3, #1
 8005470:	2240      	movs	r2, #64	; 0x40
 8005472:	2178      	movs	r1, #120	; 0x78
 8005474:	4803      	ldr	r0, [pc, #12]	; (8005484 <ssd1306_WriteData+0x30>)
 8005476:	f002 fac7 	bl	8007a08 <HAL_I2C_Mem_Write>
}
 800547a:	bf00      	nop
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	20000a04 	.word	0x20000a04

08005488 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800548c:	f7ff ffc4 	bl	8005418 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8005490:	2064      	movs	r0, #100	; 0x64
 8005492:	f001 f89f 	bl	80065d4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8005496:	2000      	movs	r0, #0
 8005498:	f000 f9d6 	bl	8005848 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800549c:	2020      	movs	r0, #32
 800549e:	f7ff ffc1 	bl	8005424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80054a2:	2000      	movs	r0, #0
 80054a4:	f7ff ffbe 	bl	8005424 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80054a8:	20b0      	movs	r0, #176	; 0xb0
 80054aa:	f7ff ffbb 	bl	8005424 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80054ae:	20c8      	movs	r0, #200	; 0xc8
 80054b0:	f7ff ffb8 	bl	8005424 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80054b4:	2000      	movs	r0, #0
 80054b6:	f7ff ffb5 	bl	8005424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80054ba:	2010      	movs	r0, #16
 80054bc:	f7ff ffb2 	bl	8005424 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80054c0:	2040      	movs	r0, #64	; 0x40
 80054c2:	f7ff ffaf 	bl	8005424 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80054c6:	20ff      	movs	r0, #255	; 0xff
 80054c8:	f000 f9aa 	bl	8005820 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80054cc:	20a1      	movs	r0, #161	; 0xa1
 80054ce:	f7ff ffa9 	bl	8005424 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80054d2:	20a6      	movs	r0, #166	; 0xa6
 80054d4:	f7ff ffa6 	bl	8005424 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80054d8:	20a8      	movs	r0, #168	; 0xa8
 80054da:	f7ff ffa3 	bl	8005424 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 80054de:	201f      	movs	r0, #31
 80054e0:	f7ff ffa0 	bl	8005424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80054e4:	20a4      	movs	r0, #164	; 0xa4
 80054e6:	f7ff ff9d 	bl	8005424 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80054ea:	20d3      	movs	r0, #211	; 0xd3
 80054ec:	f7ff ff9a 	bl	8005424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80054f0:	2000      	movs	r0, #0
 80054f2:	f7ff ff97 	bl	8005424 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80054f6:	20d5      	movs	r0, #213	; 0xd5
 80054f8:	f7ff ff94 	bl	8005424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80054fc:	20f0      	movs	r0, #240	; 0xf0
 80054fe:	f7ff ff91 	bl	8005424 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8005502:	20d9      	movs	r0, #217	; 0xd9
 8005504:	f7ff ff8e 	bl	8005424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8005508:	2022      	movs	r0, #34	; 0x22
 800550a:	f7ff ff8b 	bl	8005424 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800550e:	20da      	movs	r0, #218	; 0xda
 8005510:	f7ff ff88 	bl	8005424 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8005514:	2002      	movs	r0, #2
 8005516:	f7ff ff85 	bl	8005424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800551a:	20db      	movs	r0, #219	; 0xdb
 800551c:	f7ff ff82 	bl	8005424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8005520:	2020      	movs	r0, #32
 8005522:	f7ff ff7f 	bl	8005424 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8005526:	208d      	movs	r0, #141	; 0x8d
 8005528:	f7ff ff7c 	bl	8005424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800552c:	2014      	movs	r0, #20
 800552e:	f7ff ff79 	bl	8005424 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8005532:	2001      	movs	r0, #1
 8005534:	f000 f988 	bl	8005848 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8005538:	2000      	movs	r0, #0
 800553a:	f000 f80f 	bl	800555c <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800553e:	f000 f82f 	bl	80055a0 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8005542:	4b05      	ldr	r3, [pc, #20]	; (8005558 <ssd1306_Init+0xd0>)
 8005544:	2200      	movs	r2, #0
 8005546:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8005548:	4b03      	ldr	r3, [pc, #12]	; (8005558 <ssd1306_Init+0xd0>)
 800554a:	2200      	movs	r2, #0
 800554c:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 800554e:	4b02      	ldr	r3, [pc, #8]	; (8005558 <ssd1306_Init+0xd0>)
 8005550:	2201      	movs	r2, #1
 8005552:	711a      	strb	r2, [r3, #4]
}
 8005554:	bf00      	nop
 8005556:	bd80      	pop	{r7, pc}
 8005558:	20001478 	.word	0x20001478

0800555c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	4603      	mov	r3, r0
 8005564:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8005566:	2300      	movs	r3, #0
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	e00d      	b.n	8005588 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800556c:	79fb      	ldrb	r3, [r7, #7]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <ssd1306_Fill+0x1a>
 8005572:	2100      	movs	r1, #0
 8005574:	e000      	b.n	8005578 <ssd1306_Fill+0x1c>
 8005576:	21ff      	movs	r1, #255	; 0xff
 8005578:	4a08      	ldr	r2, [pc, #32]	; (800559c <ssd1306_Fill+0x40>)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	4413      	add	r3, r2
 800557e:	460a      	mov	r2, r1
 8005580:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	3301      	adds	r3, #1
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800558e:	d3ed      	bcc.n	800556c <ssd1306_Fill+0x10>
    }
}
 8005590:	bf00      	nop
 8005592:	bf00      	nop
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	bc80      	pop	{r7}
 800559a:	4770      	bx	lr
 800559c:	20001278 	.word	0x20001278

080055a0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80055a6:	2300      	movs	r3, #0
 80055a8:	71fb      	strb	r3, [r7, #7]
 80055aa:	e016      	b.n	80055da <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80055ac:	79fb      	ldrb	r3, [r7, #7]
 80055ae:	3b50      	subs	r3, #80	; 0x50
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7ff ff36 	bl	8005424 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80055b8:	2000      	movs	r0, #0
 80055ba:	f7ff ff33 	bl	8005424 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80055be:	2010      	movs	r0, #16
 80055c0:	f7ff ff30 	bl	8005424 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80055c4:	79fb      	ldrb	r3, [r7, #7]
 80055c6:	01db      	lsls	r3, r3, #7
 80055c8:	4a08      	ldr	r2, [pc, #32]	; (80055ec <ssd1306_UpdateScreen+0x4c>)
 80055ca:	4413      	add	r3, r2
 80055cc:	2180      	movs	r1, #128	; 0x80
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff ff40 	bl	8005454 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80055d4:	79fb      	ldrb	r3, [r7, #7]
 80055d6:	3301      	adds	r3, #1
 80055d8:	71fb      	strb	r3, [r7, #7]
 80055da:	79fb      	ldrb	r3, [r7, #7]
 80055dc:	2b03      	cmp	r3, #3
 80055de:	d9e5      	bls.n	80055ac <ssd1306_UpdateScreen+0xc>
    }
}
 80055e0:	bf00      	nop
 80055e2:	bf00      	nop
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	20001278 	.word	0x20001278

080055f0 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	4603      	mov	r3, r0
 80055f8:	71fb      	strb	r3, [r7, #7]
 80055fa:	460b      	mov	r3, r1
 80055fc:	71bb      	strb	r3, [r7, #6]
 80055fe:	4613      	mov	r3, r2
 8005600:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005606:	2b00      	cmp	r3, #0
 8005608:	db3d      	blt.n	8005686 <ssd1306_DrawPixel+0x96>
 800560a:	79bb      	ldrb	r3, [r7, #6]
 800560c:	2b1f      	cmp	r3, #31
 800560e:	d83a      	bhi.n	8005686 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8005610:	797b      	ldrb	r3, [r7, #5]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d11a      	bne.n	800564c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005616:	79fa      	ldrb	r2, [r7, #7]
 8005618:	79bb      	ldrb	r3, [r7, #6]
 800561a:	08db      	lsrs	r3, r3, #3
 800561c:	b2d8      	uxtb	r0, r3
 800561e:	4603      	mov	r3, r0
 8005620:	01db      	lsls	r3, r3, #7
 8005622:	4413      	add	r3, r2
 8005624:	4a1a      	ldr	r2, [pc, #104]	; (8005690 <ssd1306_DrawPixel+0xa0>)
 8005626:	5cd3      	ldrb	r3, [r2, r3]
 8005628:	b25a      	sxtb	r2, r3
 800562a:	79bb      	ldrb	r3, [r7, #6]
 800562c:	f003 0307 	and.w	r3, r3, #7
 8005630:	2101      	movs	r1, #1
 8005632:	fa01 f303 	lsl.w	r3, r1, r3
 8005636:	b25b      	sxtb	r3, r3
 8005638:	4313      	orrs	r3, r2
 800563a:	b259      	sxtb	r1, r3
 800563c:	79fa      	ldrb	r2, [r7, #7]
 800563e:	4603      	mov	r3, r0
 8005640:	01db      	lsls	r3, r3, #7
 8005642:	4413      	add	r3, r2
 8005644:	b2c9      	uxtb	r1, r1
 8005646:	4a12      	ldr	r2, [pc, #72]	; (8005690 <ssd1306_DrawPixel+0xa0>)
 8005648:	54d1      	strb	r1, [r2, r3]
 800564a:	e01d      	b.n	8005688 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800564c:	79fa      	ldrb	r2, [r7, #7]
 800564e:	79bb      	ldrb	r3, [r7, #6]
 8005650:	08db      	lsrs	r3, r3, #3
 8005652:	b2d8      	uxtb	r0, r3
 8005654:	4603      	mov	r3, r0
 8005656:	01db      	lsls	r3, r3, #7
 8005658:	4413      	add	r3, r2
 800565a:	4a0d      	ldr	r2, [pc, #52]	; (8005690 <ssd1306_DrawPixel+0xa0>)
 800565c:	5cd3      	ldrb	r3, [r2, r3]
 800565e:	b25a      	sxtb	r2, r3
 8005660:	79bb      	ldrb	r3, [r7, #6]
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	2101      	movs	r1, #1
 8005668:	fa01 f303 	lsl.w	r3, r1, r3
 800566c:	b25b      	sxtb	r3, r3
 800566e:	43db      	mvns	r3, r3
 8005670:	b25b      	sxtb	r3, r3
 8005672:	4013      	ands	r3, r2
 8005674:	b259      	sxtb	r1, r3
 8005676:	79fa      	ldrb	r2, [r7, #7]
 8005678:	4603      	mov	r3, r0
 800567a:	01db      	lsls	r3, r3, #7
 800567c:	4413      	add	r3, r2
 800567e:	b2c9      	uxtb	r1, r1
 8005680:	4a03      	ldr	r2, [pc, #12]	; (8005690 <ssd1306_DrawPixel+0xa0>)
 8005682:	54d1      	strb	r1, [r2, r3]
 8005684:	e000      	b.n	8005688 <ssd1306_DrawPixel+0x98>
        return;
 8005686:	bf00      	nop
    }
}
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	bc80      	pop	{r7}
 800568e:	4770      	bx	lr
 8005690:	20001278 	.word	0x20001278

08005694 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8005694:	b590      	push	{r4, r7, lr}
 8005696:	b089      	sub	sp, #36	; 0x24
 8005698:	af00      	add	r7, sp, #0
 800569a:	4604      	mov	r4, r0
 800569c:	1d38      	adds	r0, r7, #4
 800569e:	e880 0006 	stmia.w	r0, {r1, r2}
 80056a2:	461a      	mov	r2, r3
 80056a4:	4623      	mov	r3, r4
 80056a6:	73fb      	strb	r3, [r7, #15]
 80056a8:	4613      	mov	r3, r2
 80056aa:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	2b1f      	cmp	r3, #31
 80056b0:	d902      	bls.n	80056b8 <ssd1306_WriteChar+0x24>
 80056b2:	7bfb      	ldrb	r3, [r7, #15]
 80056b4:	2b7e      	cmp	r3, #126	; 0x7e
 80056b6:	d901      	bls.n	80056bc <ssd1306_WriteChar+0x28>
        return 0;
 80056b8:	2300      	movs	r3, #0
 80056ba:	e06d      	b.n	8005798 <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80056bc:	4b38      	ldr	r3, [pc, #224]	; (80057a0 <ssd1306_WriteChar+0x10c>)
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	461a      	mov	r2, r3
 80056c2:	793b      	ldrb	r3, [r7, #4]
 80056c4:	4413      	add	r3, r2
 80056c6:	2b80      	cmp	r3, #128	; 0x80
 80056c8:	dc06      	bgt.n	80056d8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80056ca:	4b35      	ldr	r3, [pc, #212]	; (80057a0 <ssd1306_WriteChar+0x10c>)
 80056cc:	885b      	ldrh	r3, [r3, #2]
 80056ce:	461a      	mov	r2, r3
 80056d0:	797b      	ldrb	r3, [r7, #5]
 80056d2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80056d4:	2b20      	cmp	r3, #32
 80056d6:	dd01      	ble.n	80056dc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80056d8:	2300      	movs	r3, #0
 80056da:	e05d      	b.n	8005798 <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80056dc:	2300      	movs	r3, #0
 80056de:	61fb      	str	r3, [r7, #28]
 80056e0:	e04c      	b.n	800577c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
 80056e6:	3b20      	subs	r3, #32
 80056e8:	7979      	ldrb	r1, [r7, #5]
 80056ea:	fb01 f303 	mul.w	r3, r1, r3
 80056ee:	4619      	mov	r1, r3
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	440b      	add	r3, r1
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	4413      	add	r3, r2
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80056fc:	2300      	movs	r3, #0
 80056fe:	61bb      	str	r3, [r7, #24]
 8005700:	e034      	b.n	800576c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	fa02 f303 	lsl.w	r3, r2, r3
 800570a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d012      	beq.n	8005738 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005712:	4b23      	ldr	r3, [pc, #140]	; (80057a0 <ssd1306_WriteChar+0x10c>)
 8005714:	881b      	ldrh	r3, [r3, #0]
 8005716:	b2da      	uxtb	r2, r3
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	b2db      	uxtb	r3, r3
 800571c:	4413      	add	r3, r2
 800571e:	b2d8      	uxtb	r0, r3
 8005720:	4b1f      	ldr	r3, [pc, #124]	; (80057a0 <ssd1306_WriteChar+0x10c>)
 8005722:	885b      	ldrh	r3, [r3, #2]
 8005724:	b2da      	uxtb	r2, r3
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	b2db      	uxtb	r3, r3
 800572a:	4413      	add	r3, r2
 800572c:	b2db      	uxtb	r3, r3
 800572e:	7bba      	ldrb	r2, [r7, #14]
 8005730:	4619      	mov	r1, r3
 8005732:	f7ff ff5d 	bl	80055f0 <ssd1306_DrawPixel>
 8005736:	e016      	b.n	8005766 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005738:	4b19      	ldr	r3, [pc, #100]	; (80057a0 <ssd1306_WriteChar+0x10c>)
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	b2da      	uxtb	r2, r3
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	b2db      	uxtb	r3, r3
 8005742:	4413      	add	r3, r2
 8005744:	b2d8      	uxtb	r0, r3
 8005746:	4b16      	ldr	r3, [pc, #88]	; (80057a0 <ssd1306_WriteChar+0x10c>)
 8005748:	885b      	ldrh	r3, [r3, #2]
 800574a:	b2da      	uxtb	r2, r3
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	b2db      	uxtb	r3, r3
 8005750:	4413      	add	r3, r2
 8005752:	b2d9      	uxtb	r1, r3
 8005754:	7bbb      	ldrb	r3, [r7, #14]
 8005756:	2b00      	cmp	r3, #0
 8005758:	bf0c      	ite	eq
 800575a:	2301      	moveq	r3, #1
 800575c:	2300      	movne	r3, #0
 800575e:	b2db      	uxtb	r3, r3
 8005760:	461a      	mov	r2, r3
 8005762:	f7ff ff45 	bl	80055f0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	3301      	adds	r3, #1
 800576a:	61bb      	str	r3, [r7, #24]
 800576c:	793b      	ldrb	r3, [r7, #4]
 800576e:	461a      	mov	r2, r3
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	4293      	cmp	r3, r2
 8005774:	d3c5      	bcc.n	8005702 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	3301      	adds	r3, #1
 800577a:	61fb      	str	r3, [r7, #28]
 800577c:	797b      	ldrb	r3, [r7, #5]
 800577e:	461a      	mov	r2, r3
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	4293      	cmp	r3, r2
 8005784:	d3ad      	bcc.n	80056e2 <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8005786:	4b06      	ldr	r3, [pc, #24]	; (80057a0 <ssd1306_WriteChar+0x10c>)
 8005788:	881a      	ldrh	r2, [r3, #0]
 800578a:	793b      	ldrb	r3, [r7, #4]
 800578c:	b29b      	uxth	r3, r3
 800578e:	4413      	add	r3, r2
 8005790:	b29a      	uxth	r2, r3
 8005792:	4b03      	ldr	r3, [pc, #12]	; (80057a0 <ssd1306_WriteChar+0x10c>)
 8005794:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8005796:	7bfb      	ldrb	r3, [r7, #15]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3724      	adds	r7, #36	; 0x24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd90      	pop	{r4, r7, pc}
 80057a0:	20001478 	.word	0x20001478

080057a4 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	1d38      	adds	r0, r7, #4
 80057ae:	e880 0006 	stmia.w	r0, {r1, r2}
 80057b2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80057b4:	e012      	b.n	80057dc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	7818      	ldrb	r0, [r3, #0]
 80057ba:	78fb      	ldrb	r3, [r7, #3]
 80057bc:	1d3a      	adds	r2, r7, #4
 80057be:	ca06      	ldmia	r2, {r1, r2}
 80057c0:	f7ff ff68 	bl	8005694 <ssd1306_WriteChar>
 80057c4:	4603      	mov	r3, r0
 80057c6:	461a      	mov	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d002      	beq.n	80057d6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	e008      	b.n	80057e8 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3301      	adds	r3, #1
 80057da:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1e8      	bne.n	80057b6 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	781b      	ldrb	r3, [r3, #0]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	4603      	mov	r3, r0
 80057f8:	460a      	mov	r2, r1
 80057fa:	71fb      	strb	r3, [r7, #7]
 80057fc:	4613      	mov	r3, r2
 80057fe:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8005800:	79fb      	ldrb	r3, [r7, #7]
 8005802:	b29a      	uxth	r2, r3
 8005804:	4b05      	ldr	r3, [pc, #20]	; (800581c <ssd1306_SetCursor+0x2c>)
 8005806:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8005808:	79bb      	ldrb	r3, [r7, #6]
 800580a:	b29a      	uxth	r2, r3
 800580c:	4b03      	ldr	r3, [pc, #12]	; (800581c <ssd1306_SetCursor+0x2c>)
 800580e:	805a      	strh	r2, [r3, #2]
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	bc80      	pop	{r7}
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	20001478 	.word	0x20001478

08005820 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	4603      	mov	r3, r0
 8005828:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800582a:	2381      	movs	r3, #129	; 0x81
 800582c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800582e:	7bfb      	ldrb	r3, [r7, #15]
 8005830:	4618      	mov	r0, r3
 8005832:	f7ff fdf7 	bl	8005424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8005836:	79fb      	ldrb	r3, [r7, #7]
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff fdf3 	bl	8005424 <ssd1306_WriteCommand>
}
 800583e:	bf00      	nop
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	4603      	mov	r3, r0
 8005850:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d005      	beq.n	8005864 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8005858:	23af      	movs	r3, #175	; 0xaf
 800585a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800585c:	4b08      	ldr	r3, [pc, #32]	; (8005880 <ssd1306_SetDisplayOn+0x38>)
 800585e:	2201      	movs	r2, #1
 8005860:	715a      	strb	r2, [r3, #5]
 8005862:	e004      	b.n	800586e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8005864:	23ae      	movs	r3, #174	; 0xae
 8005866:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8005868:	4b05      	ldr	r3, [pc, #20]	; (8005880 <ssd1306_SetDisplayOn+0x38>)
 800586a:	2200      	movs	r2, #0
 800586c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800586e:	7bfb      	ldrb	r3, [r7, #15]
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff fdd7 	bl	8005424 <ssd1306_WriteCommand>
}
 8005876:	bf00      	nop
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20001478 	.word	0x20001478

08005884 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800588a:	4b15      	ldr	r3, [pc, #84]	; (80058e0 <HAL_MspInit+0x5c>)
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	4a14      	ldr	r2, [pc, #80]	; (80058e0 <HAL_MspInit+0x5c>)
 8005890:	f043 0301 	orr.w	r3, r3, #1
 8005894:	6193      	str	r3, [r2, #24]
 8005896:	4b12      	ldr	r3, [pc, #72]	; (80058e0 <HAL_MspInit+0x5c>)
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	60bb      	str	r3, [r7, #8]
 80058a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80058a2:	4b0f      	ldr	r3, [pc, #60]	; (80058e0 <HAL_MspInit+0x5c>)
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	4a0e      	ldr	r2, [pc, #56]	; (80058e0 <HAL_MspInit+0x5c>)
 80058a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ac:	61d3      	str	r3, [r2, #28]
 80058ae:	4b0c      	ldr	r3, [pc, #48]	; (80058e0 <HAL_MspInit+0x5c>)
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b6:	607b      	str	r3, [r7, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80058ba:	4b0a      	ldr	r3, [pc, #40]	; (80058e4 <HAL_MspInit+0x60>)
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	4a04      	ldr	r2, [pc, #16]	; (80058e4 <HAL_MspInit+0x60>)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80058d6:	bf00      	nop
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	bc80      	pop	{r7}
 80058de:	4770      	bx	lr
 80058e0:	40021000 	.word	0x40021000
 80058e4:	40010000 	.word	0x40010000

080058e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08a      	sub	sp, #40	; 0x28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058f0:	f107 0314 	add.w	r3, r7, #20
 80058f4:	2200      	movs	r2, #0
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	605a      	str	r2, [r3, #4]
 80058fa:	609a      	str	r2, [r3, #8]
 80058fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a1d      	ldr	r2, [pc, #116]	; (8005978 <HAL_I2C_MspInit+0x90>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d132      	bne.n	800596e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005908:	4b1c      	ldr	r3, [pc, #112]	; (800597c <HAL_I2C_MspInit+0x94>)
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	4a1b      	ldr	r2, [pc, #108]	; (800597c <HAL_I2C_MspInit+0x94>)
 800590e:	f043 0308 	orr.w	r3, r3, #8
 8005912:	6193      	str	r3, [r2, #24]
 8005914:	4b19      	ldr	r3, [pc, #100]	; (800597c <HAL_I2C_MspInit+0x94>)
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	613b      	str	r3, [r7, #16]
 800591e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005920:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005926:	2312      	movs	r3, #18
 8005928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800592a:	2303      	movs	r3, #3
 800592c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800592e:	f107 0314 	add.w	r3, r7, #20
 8005932:	4619      	mov	r1, r3
 8005934:	4812      	ldr	r0, [pc, #72]	; (8005980 <HAL_I2C_MspInit+0x98>)
 8005936:	f001 fcab 	bl	8007290 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800593a:	4b12      	ldr	r3, [pc, #72]	; (8005984 <HAL_I2C_MspInit+0x9c>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	627b      	str	r3, [r7, #36]	; 0x24
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005946:	627b      	str	r3, [r7, #36]	; 0x24
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	f043 0302 	orr.w	r3, r3, #2
 800594e:	627b      	str	r3, [r7, #36]	; 0x24
 8005950:	4a0c      	ldr	r2, [pc, #48]	; (8005984 <HAL_I2C_MspInit+0x9c>)
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005956:	4b09      	ldr	r3, [pc, #36]	; (800597c <HAL_I2C_MspInit+0x94>)
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	4a08      	ldr	r2, [pc, #32]	; (800597c <HAL_I2C_MspInit+0x94>)
 800595c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005960:	61d3      	str	r3, [r2, #28]
 8005962:	4b06      	ldr	r3, [pc, #24]	; (800597c <HAL_I2C_MspInit+0x94>)
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800596e:	bf00      	nop
 8005970:	3728      	adds	r7, #40	; 0x28
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	40005400 	.word	0x40005400
 800597c:	40021000 	.word	0x40021000
 8005980:	40010c00 	.word	0x40010c00
 8005984:	40010000 	.word	0x40010000

08005988 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a2c      	ldr	r2, [pc, #176]	; (8005a48 <HAL_TIM_Base_MspInit+0xc0>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d10c      	bne.n	80059b4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800599a:	4b2c      	ldr	r3, [pc, #176]	; (8005a4c <HAL_TIM_Base_MspInit+0xc4>)
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	4a2b      	ldr	r2, [pc, #172]	; (8005a4c <HAL_TIM_Base_MspInit+0xc4>)
 80059a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80059a4:	6193      	str	r3, [r2, #24]
 80059a6:	4b29      	ldr	r3, [pc, #164]	; (8005a4c <HAL_TIM_Base_MspInit+0xc4>)
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80059b2:	e044      	b.n	8005a3e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM6)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a25      	ldr	r2, [pc, #148]	; (8005a50 <HAL_TIM_Base_MspInit+0xc8>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d114      	bne.n	80059e8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80059be:	4b23      	ldr	r3, [pc, #140]	; (8005a4c <HAL_TIM_Base_MspInit+0xc4>)
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	4a22      	ldr	r2, [pc, #136]	; (8005a4c <HAL_TIM_Base_MspInit+0xc4>)
 80059c4:	f043 0310 	orr.w	r3, r3, #16
 80059c8:	61d3      	str	r3, [r2, #28]
 80059ca:	4b20      	ldr	r3, [pc, #128]	; (8005a4c <HAL_TIM_Base_MspInit+0xc4>)
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	f003 0310 	and.w	r3, r3, #16
 80059d2:	613b      	str	r3, [r7, #16]
 80059d4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 80059d6:	2200      	movs	r2, #0
 80059d8:	2101      	movs	r1, #1
 80059da:	2036      	movs	r0, #54	; 0x36
 80059dc:	f000 ff19 	bl	8006812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80059e0:	2036      	movs	r0, #54	; 0x36
 80059e2:	f000 ff32 	bl	800684a <HAL_NVIC_EnableIRQ>
}
 80059e6:	e02a      	b.n	8005a3e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a19      	ldr	r2, [pc, #100]	; (8005a54 <HAL_TIM_Base_MspInit+0xcc>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d114      	bne.n	8005a1c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80059f2:	4b16      	ldr	r3, [pc, #88]	; (8005a4c <HAL_TIM_Base_MspInit+0xc4>)
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	4a15      	ldr	r2, [pc, #84]	; (8005a4c <HAL_TIM_Base_MspInit+0xc4>)
 80059f8:	f043 0320 	orr.w	r3, r3, #32
 80059fc:	61d3      	str	r3, [r2, #28]
 80059fe:	4b13      	ldr	r3, [pc, #76]	; (8005a4c <HAL_TIM_Base_MspInit+0xc4>)
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	2105      	movs	r1, #5
 8005a0e:	2037      	movs	r0, #55	; 0x37
 8005a10:	f000 feff 	bl	8006812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005a14:	2037      	movs	r0, #55	; 0x37
 8005a16:	f000 ff18 	bl	800684a <HAL_NVIC_EnableIRQ>
}
 8005a1a:	e010      	b.n	8005a3e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a0d      	ldr	r2, [pc, #52]	; (8005a58 <HAL_TIM_Base_MspInit+0xd0>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d10b      	bne.n	8005a3e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005a26:	4b09      	ldr	r3, [pc, #36]	; (8005a4c <HAL_TIM_Base_MspInit+0xc4>)
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	4a08      	ldr	r2, [pc, #32]	; (8005a4c <HAL_TIM_Base_MspInit+0xc4>)
 8005a2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005a30:	6193      	str	r3, [r2, #24]
 8005a32:	4b06      	ldr	r3, [pc, #24]	; (8005a4c <HAL_TIM_Base_MspInit+0xc4>)
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a3a:	60bb      	str	r3, [r7, #8]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
}
 8005a3e:	bf00      	nop
 8005a40:	3718      	adds	r7, #24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	40012c00 	.word	0x40012c00
 8005a4c:	40021000 	.word	0x40021000
 8005a50:	40001000 	.word	0x40001000
 8005a54:	40001400 	.word	0x40001400
 8005a58:	40013400 	.word	0x40013400

08005a5c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b090      	sub	sp, #64	; 0x40
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	605a      	str	r2, [r3, #4]
 8005a6e:	609a      	str	r2, [r3, #8]
 8005a70:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a7a:	d14f      	bne.n	8005b1c <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005a7c:	4b68      	ldr	r3, [pc, #416]	; (8005c20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	4a67      	ldr	r2, [pc, #412]	; (8005c20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005a82:	f043 0301 	orr.w	r3, r3, #1
 8005a86:	61d3      	str	r3, [r2, #28]
 8005a88:	4b65      	ldr	r3, [pc, #404]	; (8005c20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a92:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a94:	4b62      	ldr	r3, [pc, #392]	; (8005c20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	4a61      	ldr	r2, [pc, #388]	; (8005c20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005a9a:	f043 0304 	orr.w	r3, r3, #4
 8005a9e:	6193      	str	r3, [r2, #24]
 8005aa0:	4b5f      	ldr	r3, [pc, #380]	; (8005c20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005aac:	4b5c      	ldr	r3, [pc, #368]	; (8005c20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	4a5b      	ldr	r2, [pc, #364]	; (8005c20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005ab2:	f043 0308 	orr.w	r3, r3, #8
 8005ab6:	6193      	str	r3, [r2, #24]
 8005ab8:	4b59      	ldr	r3, [pc, #356]	; (8005c20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	f003 0308 	and.w	r3, r3, #8
 8005ac0:	623b      	str	r3, [r7, #32]
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005ac4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005aca:	2300      	movs	r3, #0
 8005acc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ad2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	4852      	ldr	r0, [pc, #328]	; (8005c24 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8005ada:	f001 fbd9 	bl	8007290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005ade:	2308      	movs	r3, #8
 8005ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005aea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005aee:	4619      	mov	r1, r3
 8005af0:	484d      	ldr	r0, [pc, #308]	; (8005c28 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8005af2:	f001 fbcd 	bl	8007290 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8005af6:	4b4d      	ldr	r3, [pc, #308]	; (8005c2c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b06:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b14:	4a45      	ldr	r2, [pc, #276]	; (8005c2c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b18:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8005b1a:	e07c      	b.n	8005c16 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM3)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a43      	ldr	r2, [pc, #268]	; (8005c30 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d124      	bne.n	8005b70 <HAL_TIM_Encoder_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005b26:	4b3e      	ldr	r3, [pc, #248]	; (8005c20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	4a3d      	ldr	r2, [pc, #244]	; (8005c20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005b2c:	f043 0302 	orr.w	r3, r3, #2
 8005b30:	61d3      	str	r3, [r2, #28]
 8005b32:	4b3b      	ldr	r3, [pc, #236]	; (8005c20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	61fb      	str	r3, [r7, #28]
 8005b3c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b3e:	4b38      	ldr	r3, [pc, #224]	; (8005c20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	4a37      	ldr	r2, [pc, #220]	; (8005c20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005b44:	f043 0304 	orr.w	r3, r3, #4
 8005b48:	6193      	str	r3, [r2, #24]
 8005b4a:	4b35      	ldr	r3, [pc, #212]	; (8005c20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	f003 0304 	and.w	r3, r3, #4
 8005b52:	61bb      	str	r3, [r7, #24]
 8005b54:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005b56:	23c0      	movs	r3, #192	; 0xc0
 8005b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b66:	4619      	mov	r1, r3
 8005b68:	482e      	ldr	r0, [pc, #184]	; (8005c24 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8005b6a:	f001 fb91 	bl	8007290 <HAL_GPIO_Init>
}
 8005b6e:	e052      	b.n	8005c16 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a2f      	ldr	r2, [pc, #188]	; (8005c34 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d124      	bne.n	8005bc4 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005b7a:	4b29      	ldr	r3, [pc, #164]	; (8005c20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	4a28      	ldr	r2, [pc, #160]	; (8005c20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005b80:	f043 0304 	orr.w	r3, r3, #4
 8005b84:	61d3      	str	r3, [r2, #28]
 8005b86:	4b26      	ldr	r3, [pc, #152]	; (8005c20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	f003 0304 	and.w	r3, r3, #4
 8005b8e:	617b      	str	r3, [r7, #20]
 8005b90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b92:	4b23      	ldr	r3, [pc, #140]	; (8005c20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	4a22      	ldr	r2, [pc, #136]	; (8005c20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005b98:	f043 0308 	orr.w	r3, r3, #8
 8005b9c:	6193      	str	r3, [r2, #24]
 8005b9e:	4b20      	ldr	r3, [pc, #128]	; (8005c20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	f003 0308 	and.w	r3, r3, #8
 8005ba6:	613b      	str	r3, [r7, #16]
 8005ba8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005baa:	23c0      	movs	r3, #192	; 0xc0
 8005bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bba:	4619      	mov	r1, r3
 8005bbc:	481a      	ldr	r0, [pc, #104]	; (8005c28 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8005bbe:	f001 fb67 	bl	8007290 <HAL_GPIO_Init>
}
 8005bc2:	e028      	b.n	8005c16 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM5)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a1b      	ldr	r2, [pc, #108]	; (8005c38 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d123      	bne.n	8005c16 <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005bce:	4b14      	ldr	r3, [pc, #80]	; (8005c20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	4a13      	ldr	r2, [pc, #76]	; (8005c20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005bd4:	f043 0308 	orr.w	r3, r3, #8
 8005bd8:	61d3      	str	r3, [r2, #28]
 8005bda:	4b11      	ldr	r3, [pc, #68]	; (8005c20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	f003 0308 	and.w	r3, r3, #8
 8005be2:	60fb      	str	r3, [r7, #12]
 8005be4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005be6:	4b0e      	ldr	r3, [pc, #56]	; (8005c20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	4a0d      	ldr	r2, [pc, #52]	; (8005c20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005bec:	f043 0304 	orr.w	r3, r3, #4
 8005bf0:	6193      	str	r3, [r2, #24]
 8005bf2:	4b0b      	ldr	r3, [pc, #44]	; (8005c20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	f003 0304 	and.w	r3, r3, #4
 8005bfa:	60bb      	str	r3, [r7, #8]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c02:	2300      	movs	r3, #0
 8005c04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c06:	2300      	movs	r3, #0
 8005c08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c0e:	4619      	mov	r1, r3
 8005c10:	4804      	ldr	r0, [pc, #16]	; (8005c24 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8005c12:	f001 fb3d 	bl	8007290 <HAL_GPIO_Init>
}
 8005c16:	bf00      	nop
 8005c18:	3740      	adds	r7, #64	; 0x40
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	40021000 	.word	0x40021000
 8005c24:	40010800 	.word	0x40010800
 8005c28:	40010c00 	.word	0x40010c00
 8005c2c:	40010000 	.word	0x40010000
 8005c30:	40000400 	.word	0x40000400
 8005c34:	40000800 	.word	0x40000800
 8005c38:	40000c00 	.word	0x40000c00

08005c3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c44:	f107 0310 	add.w	r3, r7, #16
 8005c48:	2200      	movs	r2, #0
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	605a      	str	r2, [r3, #4]
 8005c4e:	609a      	str	r2, [r3, #8]
 8005c50:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a1f      	ldr	r2, [pc, #124]	; (8005cd4 <HAL_TIM_MspPostInit+0x98>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d119      	bne.n	8005c90 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c5c:	4b1e      	ldr	r3, [pc, #120]	; (8005cd8 <HAL_TIM_MspPostInit+0x9c>)
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	4a1d      	ldr	r2, [pc, #116]	; (8005cd8 <HAL_TIM_MspPostInit+0x9c>)
 8005c62:	f043 0304 	orr.w	r3, r3, #4
 8005c66:	6193      	str	r3, [r2, #24]
 8005c68:	4b1b      	ldr	r3, [pc, #108]	; (8005cd8 <HAL_TIM_MspPostInit+0x9c>)
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8005c74:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8005c78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c7e:	2302      	movs	r3, #2
 8005c80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c82:	f107 0310 	add.w	r3, r7, #16
 8005c86:	4619      	mov	r1, r3
 8005c88:	4814      	ldr	r0, [pc, #80]	; (8005cdc <HAL_TIM_MspPostInit+0xa0>)
 8005c8a:	f001 fb01 	bl	8007290 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8005c8e:	e01d      	b.n	8005ccc <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM8)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a12      	ldr	r2, [pc, #72]	; (8005ce0 <HAL_TIM_MspPostInit+0xa4>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d118      	bne.n	8005ccc <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c9a:	4b0f      	ldr	r3, [pc, #60]	; (8005cd8 <HAL_TIM_MspPostInit+0x9c>)
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	4a0e      	ldr	r2, [pc, #56]	; (8005cd8 <HAL_TIM_MspPostInit+0x9c>)
 8005ca0:	f043 0310 	orr.w	r3, r3, #16
 8005ca4:	6193      	str	r3, [r2, #24]
 8005ca6:	4b0c      	ldr	r3, [pc, #48]	; (8005cd8 <HAL_TIM_MspPostInit+0x9c>)
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	f003 0310 	and.w	r3, r3, #16
 8005cae:	60bb      	str	r3, [r7, #8]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8005cb2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005cb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cb8:	2302      	movs	r3, #2
 8005cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005cc0:	f107 0310 	add.w	r3, r7, #16
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	4807      	ldr	r0, [pc, #28]	; (8005ce4 <HAL_TIM_MspPostInit+0xa8>)
 8005cc8:	f001 fae2 	bl	8007290 <HAL_GPIO_Init>
}
 8005ccc:	bf00      	nop
 8005cce:	3720      	adds	r7, #32
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	40012c00 	.word	0x40012c00
 8005cd8:	40021000 	.word	0x40021000
 8005cdc:	40010800 	.word	0x40010800
 8005ce0:	40013400 	.word	0x40013400
 8005ce4:	40011000 	.word	0x40011000

08005ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b08c      	sub	sp, #48	; 0x30
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cf0:	f107 031c 	add.w	r3, r7, #28
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	605a      	str	r2, [r3, #4]
 8005cfa:	609a      	str	r2, [r3, #8]
 8005cfc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a6e      	ldr	r2, [pc, #440]	; (8005ebc <HAL_UART_MspInit+0x1d4>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d15e      	bne.n	8005dc6 <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005d08:	4b6d      	ldr	r3, [pc, #436]	; (8005ec0 <HAL_UART_MspInit+0x1d8>)
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	4a6c      	ldr	r2, [pc, #432]	; (8005ec0 <HAL_UART_MspInit+0x1d8>)
 8005d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d12:	61d3      	str	r3, [r2, #28]
 8005d14:	4b6a      	ldr	r3, [pc, #424]	; (8005ec0 <HAL_UART_MspInit+0x1d8>)
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d1c:	61bb      	str	r3, [r7, #24]
 8005d1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d20:	4b67      	ldr	r3, [pc, #412]	; (8005ec0 <HAL_UART_MspInit+0x1d8>)
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	4a66      	ldr	r2, [pc, #408]	; (8005ec0 <HAL_UART_MspInit+0x1d8>)
 8005d26:	f043 0304 	orr.w	r3, r3, #4
 8005d2a:	6193      	str	r3, [r2, #24]
 8005d2c:	4b64      	ldr	r3, [pc, #400]	; (8005ec0 <HAL_UART_MspInit+0x1d8>)
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	617b      	str	r3, [r7, #20]
 8005d36:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = XB_TX_Pin;
 8005d38:	2304      	movs	r3, #4
 8005d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005d40:	2303      	movs	r3, #3
 8005d42:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(XB_TX_GPIO_Port, &GPIO_InitStruct);
 8005d44:	f107 031c 	add.w	r3, r7, #28
 8005d48:	4619      	mov	r1, r3
 8005d4a:	485e      	ldr	r0, [pc, #376]	; (8005ec4 <HAL_UART_MspInit+0x1dc>)
 8005d4c:	f001 faa0 	bl	8007290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = XB_RX_Pin;
 8005d50:	2308      	movs	r3, #8
 8005d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d54:	2300      	movs	r3, #0
 8005d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(XB_RX_GPIO_Port, &GPIO_InitStruct);
 8005d5c:	f107 031c 	add.w	r3, r7, #28
 8005d60:	4619      	mov	r1, r3
 8005d62:	4858      	ldr	r0, [pc, #352]	; (8005ec4 <HAL_UART_MspInit+0x1dc>)
 8005d64:	f001 fa94 	bl	8007290 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8005d68:	4b57      	ldr	r3, [pc, #348]	; (8005ec8 <HAL_UART_MspInit+0x1e0>)
 8005d6a:	4a58      	ldr	r2, [pc, #352]	; (8005ecc <HAL_UART_MspInit+0x1e4>)
 8005d6c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d6e:	4b56      	ldr	r3, [pc, #344]	; (8005ec8 <HAL_UART_MspInit+0x1e0>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d74:	4b54      	ldr	r3, [pc, #336]	; (8005ec8 <HAL_UART_MspInit+0x1e0>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005d7a:	4b53      	ldr	r3, [pc, #332]	; (8005ec8 <HAL_UART_MspInit+0x1e0>)
 8005d7c:	2280      	movs	r2, #128	; 0x80
 8005d7e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d80:	4b51      	ldr	r3, [pc, #324]	; (8005ec8 <HAL_UART_MspInit+0x1e0>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d86:	4b50      	ldr	r3, [pc, #320]	; (8005ec8 <HAL_UART_MspInit+0x1e0>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005d8c:	4b4e      	ldr	r3, [pc, #312]	; (8005ec8 <HAL_UART_MspInit+0x1e0>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005d92:	4b4d      	ldr	r3, [pc, #308]	; (8005ec8 <HAL_UART_MspInit+0x1e0>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005d98:	484b      	ldr	r0, [pc, #300]	; (8005ec8 <HAL_UART_MspInit+0x1e0>)
 8005d9a:	f000 fd7f 	bl	800689c <HAL_DMA_Init>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8005da4:	f7fe fd74 	bl	8004890 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a47      	ldr	r2, [pc, #284]	; (8005ec8 <HAL_UART_MspInit+0x1e0>)
 8005dac:	639a      	str	r2, [r3, #56]	; 0x38
 8005dae:	4a46      	ldr	r2, [pc, #280]	; (8005ec8 <HAL_UART_MspInit+0x1e0>)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8005db4:	2200      	movs	r2, #0
 8005db6:	2102      	movs	r1, #2
 8005db8:	2026      	movs	r0, #38	; 0x26
 8005dba:	f000 fd2a 	bl	8006812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005dbe:	2026      	movs	r0, #38	; 0x26
 8005dc0:	f000 fd43 	bl	800684a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005dc4:	e076      	b.n	8005eb4 <HAL_UART_MspInit+0x1cc>
  else if(huart->Instance==USART3)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a41      	ldr	r2, [pc, #260]	; (8005ed0 <HAL_UART_MspInit+0x1e8>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d171      	bne.n	8005eb4 <HAL_UART_MspInit+0x1cc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005dd0:	4b3b      	ldr	r3, [pc, #236]	; (8005ec0 <HAL_UART_MspInit+0x1d8>)
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	4a3a      	ldr	r2, [pc, #232]	; (8005ec0 <HAL_UART_MspInit+0x1d8>)
 8005dd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dda:	61d3      	str	r3, [r2, #28]
 8005ddc:	4b38      	ldr	r3, [pc, #224]	; (8005ec0 <HAL_UART_MspInit+0x1d8>)
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005de4:	613b      	str	r3, [r7, #16]
 8005de6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005de8:	4b35      	ldr	r3, [pc, #212]	; (8005ec0 <HAL_UART_MspInit+0x1d8>)
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	4a34      	ldr	r2, [pc, #208]	; (8005ec0 <HAL_UART_MspInit+0x1d8>)
 8005dee:	f043 0310 	orr.w	r3, r3, #16
 8005df2:	6193      	str	r3, [r2, #24]
 8005df4:	4b32      	ldr	r3, [pc, #200]	; (8005ec0 <HAL_UART_MspInit+0x1d8>)
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	f003 0310 	and.w	r3, r3, #16
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = JY_TX_Pin;
 8005e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e06:	2302      	movs	r3, #2
 8005e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(JY_TX_GPIO_Port, &GPIO_InitStruct);
 8005e0e:	f107 031c 	add.w	r3, r7, #28
 8005e12:	4619      	mov	r1, r3
 8005e14:	482f      	ldr	r0, [pc, #188]	; (8005ed4 <HAL_UART_MspInit+0x1ec>)
 8005e16:	f001 fa3b 	bl	8007290 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = JY_RX_Pin;
 8005e1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e20:	2300      	movs	r3, #0
 8005e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e24:	2300      	movs	r3, #0
 8005e26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(JY_RX_GPIO_Port, &GPIO_InitStruct);
 8005e28:	f107 031c 	add.w	r3, r7, #28
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	4829      	ldr	r0, [pc, #164]	; (8005ed4 <HAL_UART_MspInit+0x1ec>)
 8005e30:	f001 fa2e 	bl	8007290 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8005e34:	4b28      	ldr	r3, [pc, #160]	; (8005ed8 <HAL_UART_MspInit+0x1f0>)
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e44:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4c:	f043 0310 	orr.w	r3, r3, #16
 8005e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e52:	4a21      	ldr	r2, [pc, #132]	; (8005ed8 <HAL_UART_MspInit+0x1f0>)
 8005e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e56:	6053      	str	r3, [r2, #4]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8005e58:	4b20      	ldr	r3, [pc, #128]	; (8005edc <HAL_UART_MspInit+0x1f4>)
 8005e5a:	4a21      	ldr	r2, [pc, #132]	; (8005ee0 <HAL_UART_MspInit+0x1f8>)
 8005e5c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e5e:	4b1f      	ldr	r3, [pc, #124]	; (8005edc <HAL_UART_MspInit+0x1f4>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e64:	4b1d      	ldr	r3, [pc, #116]	; (8005edc <HAL_UART_MspInit+0x1f4>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e6a:	4b1c      	ldr	r3, [pc, #112]	; (8005edc <HAL_UART_MspInit+0x1f4>)
 8005e6c:	2280      	movs	r2, #128	; 0x80
 8005e6e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e70:	4b1a      	ldr	r3, [pc, #104]	; (8005edc <HAL_UART_MspInit+0x1f4>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e76:	4b19      	ldr	r3, [pc, #100]	; (8005edc <HAL_UART_MspInit+0x1f4>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005e7c:	4b17      	ldr	r3, [pc, #92]	; (8005edc <HAL_UART_MspInit+0x1f4>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005e82:	4b16      	ldr	r3, [pc, #88]	; (8005edc <HAL_UART_MspInit+0x1f4>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005e88:	4814      	ldr	r0, [pc, #80]	; (8005edc <HAL_UART_MspInit+0x1f4>)
 8005e8a:	f000 fd07 	bl	800689c <HAL_DMA_Init>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 8005e94:	f7fe fcfc 	bl	8004890 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a10      	ldr	r2, [pc, #64]	; (8005edc <HAL_UART_MspInit+0x1f4>)
 8005e9c:	639a      	str	r2, [r3, #56]	; 0x38
 8005e9e:	4a0f      	ldr	r2, [pc, #60]	; (8005edc <HAL_UART_MspInit+0x1f4>)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	2102      	movs	r1, #2
 8005ea8:	2027      	movs	r0, #39	; 0x27
 8005eaa:	f000 fcb2 	bl	8006812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005eae:	2027      	movs	r0, #39	; 0x27
 8005eb0:	f000 fccb 	bl	800684a <HAL_NVIC_EnableIRQ>
}
 8005eb4:	bf00      	nop
 8005eb6:	3730      	adds	r7, #48	; 0x30
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	40004400 	.word	0x40004400
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	40010800 	.word	0x40010800
 8005ec8:	20000d20 	.word	0x20000d20
 8005ecc:	4002006c 	.word	0x4002006c
 8005ed0:	40004800 	.word	0x40004800
 8005ed4:	40011000 	.word	0x40011000
 8005ed8:	40010000 	.word	0x40010000
 8005edc:	20000d64 	.word	0x20000d64
 8005ee0:	40020030 	.word	0x40020030

08005ee4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a18      	ldr	r2, [pc, #96]	; (8005f54 <HAL_UART_MspDeInit+0x70>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d112      	bne.n	8005f1c <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8005ef6:	4b18      	ldr	r3, [pc, #96]	; (8005f58 <HAL_UART_MspDeInit+0x74>)
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	4a17      	ldr	r2, [pc, #92]	; (8005f58 <HAL_UART_MspDeInit+0x74>)
 8005efc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f00:	61d3      	str	r3, [r2, #28]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, XB_TX_Pin|XB_RX_Pin);
 8005f02:	210c      	movs	r1, #12
 8005f04:	4815      	ldr	r0, [pc, #84]	; (8005f5c <HAL_UART_MspDeInit+0x78>)
 8005f06:	f001 fb57 	bl	80075b8 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 fd3a 	bl	8006988 <HAL_DMA_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8005f14:	2026      	movs	r0, #38	; 0x26
 8005f16:	f000 fca6 	bl	8006866 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8005f1a:	e017      	b.n	8005f4c <HAL_UART_MspDeInit+0x68>
  else if(huart->Instance==USART3)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a0f      	ldr	r2, [pc, #60]	; (8005f60 <HAL_UART_MspDeInit+0x7c>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d112      	bne.n	8005f4c <HAL_UART_MspDeInit+0x68>
    __HAL_RCC_USART3_CLK_DISABLE();
 8005f26:	4b0c      	ldr	r3, [pc, #48]	; (8005f58 <HAL_UART_MspDeInit+0x74>)
 8005f28:	69db      	ldr	r3, [r3, #28]
 8005f2a:	4a0b      	ldr	r2, [pc, #44]	; (8005f58 <HAL_UART_MspDeInit+0x74>)
 8005f2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f30:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOC, JY_TX_Pin|JY_RX_Pin);
 8005f32:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8005f36:	480b      	ldr	r0, [pc, #44]	; (8005f64 <HAL_UART_MspDeInit+0x80>)
 8005f38:	f001 fb3e 	bl	80075b8 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 fd21 	bl	8006988 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8005f46:	2027      	movs	r0, #39	; 0x27
 8005f48:	f000 fc8d 	bl	8006866 <HAL_NVIC_DisableIRQ>
}
 8005f4c:	bf00      	nop
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	40004400 	.word	0x40004400
 8005f58:	40021000 	.word	0x40021000
 8005f5c:	40010800 	.word	0x40010800
 8005f60:	40004800 	.word	0x40004800
 8005f64:	40011000 	.word	0x40011000

08005f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
	{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	2101      	movs	r1, #1
 8005f70:	4801      	ldr	r0, [pc, #4]	; (8005f78 <NMI_Handler+0x10>)
 8005f72:	f001 fbed 	bl	8007750 <HAL_GPIO_WritePin>
 8005f76:	e7f9      	b.n	8005f6c <NMI_Handler+0x4>
 8005f78:	40010c00 	.word	0x40010c00

08005f7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8005f80:	2201      	movs	r2, #1
 8005f82:	2101      	movs	r1, #1
 8005f84:	4801      	ldr	r0, [pc, #4]	; (8005f8c <HardFault_Handler+0x10>)
 8005f86:	f001 fbe3 	bl	8007750 <HAL_GPIO_WritePin>
 8005f8a:	e7f9      	b.n	8005f80 <HardFault_Handler+0x4>
 8005f8c:	40010c00 	.word	0x40010c00

08005f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8005f94:	2201      	movs	r2, #1
 8005f96:	2101      	movs	r1, #1
 8005f98:	4801      	ldr	r0, [pc, #4]	; (8005fa0 <MemManage_Handler+0x10>)
 8005f9a:	f001 fbd9 	bl	8007750 <HAL_GPIO_WritePin>
 8005f9e:	e7f9      	b.n	8005f94 <MemManage_Handler+0x4>
 8005fa0:	40010c00 	.word	0x40010c00

08005fa4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8005fa8:	2201      	movs	r2, #1
 8005faa:	2101      	movs	r1, #1
 8005fac:	4801      	ldr	r0, [pc, #4]	; (8005fb4 <BusFault_Handler+0x10>)
 8005fae:	f001 fbcf 	bl	8007750 <HAL_GPIO_WritePin>
 8005fb2:	e7f9      	b.n	8005fa8 <BusFault_Handler+0x4>
 8005fb4:	40010c00 	.word	0x40010c00

08005fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	4801      	ldr	r0, [pc, #4]	; (8005fc8 <UsageFault_Handler+0x10>)
 8005fc2:	f001 fbc5 	bl	8007750 <HAL_GPIO_WritePin>
 8005fc6:	e7f9      	b.n	8005fbc <UsageFault_Handler+0x4>
 8005fc8:	40010c00 	.word	0x40010c00

08005fcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005fd0:	bf00      	nop
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bc80      	pop	{r7}
 8005fd6:	4770      	bx	lr

08005fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005fdc:	bf00      	nop
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bc80      	pop	{r7}
 8005fe2:	4770      	bx	lr

08005fe4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005fe8:	bf00      	nop
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bc80      	pop	{r7}
 8005fee:	4770      	bx	lr

08005ff0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005ff4:	f000 fad2 	bl	800659c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ff8:	bf00      	nop
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006000:	4802      	ldr	r0, [pc, #8]	; (800600c <DMA1_Channel3_IRQHandler+0x10>)
 8006002:	f000 fedb 	bl	8006dbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8006006:	bf00      	nop
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	20000d64 	.word	0x20000d64

08006010 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006014:	4802      	ldr	r0, [pc, #8]	; (8006020 <DMA1_Channel6_IRQHandler+0x10>)
 8006016:	f000 fed1 	bl	8006dbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800601a:	bf00      	nop
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	20000d20 	.word	0x20000d20

08006024 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006028:	4802      	ldr	r0, [pc, #8]	; (8006034 <USART2_IRQHandler+0x10>)
 800602a:	f003 fee7 	bl	8009dfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800602e:	bf00      	nop
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	20000c98 	.word	0x20000c98

08006038 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800603c:	4802      	ldr	r0, [pc, #8]	; (8006048 <USART3_IRQHandler+0x10>)
 800603e:	f003 fedd 	bl	8009dfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006042:	bf00      	nop
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20000cdc 	.word	0x20000cdc

0800604c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */
	huansic_motor_pid(&cmotor_lf);
 8006050:	4808      	ldr	r0, [pc, #32]	; (8006074 <TIM6_IRQHandler+0x28>)
 8006052:	f7fc f9cd 	bl	80023f0 <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rf);
 8006056:	4808      	ldr	r0, [pc, #32]	; (8006078 <TIM6_IRQHandler+0x2c>)
 8006058:	f7fc f9ca 	bl	80023f0 <huansic_motor_pid>
	huansic_motor_pid(&cmotor_lb);
 800605c:	4807      	ldr	r0, [pc, #28]	; (800607c <TIM6_IRQHandler+0x30>)
 800605e:	f7fc f9c7 	bl	80023f0 <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rb);
 8006062:	4807      	ldr	r0, [pc, #28]	; (8006080 <TIM6_IRQHandler+0x34>)
 8006064:	f7fc f9c4 	bl	80023f0 <huansic_motor_pid>
  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006068:	4806      	ldr	r0, [pc, #24]	; (8006084 <TIM6_IRQHandler+0x38>)
 800606a:	f002 fef1 	bl	8008e50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800606e:	bf00      	nop
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	20000da8 	.word	0x20000da8
 8006078:	20000de4 	.word	0x20000de4
 800607c:	20000e20 	.word	0x20000e20
 8006080:	20000e5c 	.word	0x20000e5c
 8006084:	20000bc0 	.word	0x20000bc0

08006088 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800608c:	4803      	ldr	r0, [pc, #12]	; (800609c <TIM7_IRQHandler+0x14>)
 800608e:	f002 fedf 	bl	8008e50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  HUAN_PeriodicInt1000ms_ISR();
 8006092:	f7fe fb8d 	bl	80047b0 <HUAN_PeriodicInt1000ms_ISR>
  /* USER CODE END TIM7_IRQn 1 */
}
 8006096:	bf00      	nop
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	20000c08 	.word	0x20000c08

080060a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80060a0:	b480      	push	{r7}
 80060a2:	af00      	add	r7, sp, #0
	return 1;
 80060a4:	2301      	movs	r3, #1
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bc80      	pop	{r7}
 80060ac:	4770      	bx	lr

080060ae <_kill>:

int _kill(int pid, int sig)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b082      	sub	sp, #8
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80060b8:	f004 fc10 	bl	800a8dc <__errno>
 80060bc:	4603      	mov	r3, r0
 80060be:	2216      	movs	r2, #22
 80060c0:	601a      	str	r2, [r3, #0]
	return -1;
 80060c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <_exit>:

void _exit (int status)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b082      	sub	sp, #8
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80060d6:	f04f 31ff 	mov.w	r1, #4294967295
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7ff ffe7 	bl	80060ae <_kill>
	while (1) {}		/* Make sure we hang here */
 80060e0:	e7fe      	b.n	80060e0 <_exit+0x12>

080060e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b086      	sub	sp, #24
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	60f8      	str	r0, [r7, #12]
 80060ea:	60b9      	str	r1, [r7, #8]
 80060ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060ee:	2300      	movs	r3, #0
 80060f0:	617b      	str	r3, [r7, #20]
 80060f2:	e00a      	b.n	800610a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80060f4:	f3af 8000 	nop.w
 80060f8:	4601      	mov	r1, r0
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	60ba      	str	r2, [r7, #8]
 8006100:	b2ca      	uxtb	r2, r1
 8006102:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	3301      	adds	r3, #1
 8006108:	617b      	str	r3, [r7, #20]
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	429a      	cmp	r2, r3
 8006110:	dbf0      	blt.n	80060f4 <_read+0x12>
	}

return len;
 8006112:	687b      	ldr	r3, [r7, #4]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3718      	adds	r7, #24
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006128:	2300      	movs	r3, #0
 800612a:	617b      	str	r3, [r7, #20]
 800612c:	e009      	b.n	8006142 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	1c5a      	adds	r2, r3, #1
 8006132:	60ba      	str	r2, [r7, #8]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	4618      	mov	r0, r3
 8006138:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	3301      	adds	r3, #1
 8006140:	617b      	str	r3, [r7, #20]
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	429a      	cmp	r2, r3
 8006148:	dbf1      	blt.n	800612e <_write+0x12>
	}
	return len;
 800614a:	687b      	ldr	r3, [r7, #4]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <_close>:

int _close(int file)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
	return -1;
 800615c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006160:	4618      	mov	r0, r3
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	bc80      	pop	{r7}
 8006168:	4770      	bx	lr

0800616a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800616a:	b480      	push	{r7}
 800616c:	b083      	sub	sp, #12
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800617a:	605a      	str	r2, [r3, #4]
	return 0;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	bc80      	pop	{r7}
 8006186:	4770      	bx	lr

08006188 <_isatty>:

int _isatty(int file)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
	return 1;
 8006190:	2301      	movs	r3, #1
}
 8006192:	4618      	mov	r0, r3
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	bc80      	pop	{r7}
 800619a:	4770      	bx	lr

0800619c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
	return 0;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bc80      	pop	{r7}
 80061b2:	4770      	bx	lr

080061b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80061bc:	4a14      	ldr	r2, [pc, #80]	; (8006210 <_sbrk+0x5c>)
 80061be:	4b15      	ldr	r3, [pc, #84]	; (8006214 <_sbrk+0x60>)
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80061c8:	4b13      	ldr	r3, [pc, #76]	; (8006218 <_sbrk+0x64>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d102      	bne.n	80061d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80061d0:	4b11      	ldr	r3, [pc, #68]	; (8006218 <_sbrk+0x64>)
 80061d2:	4a12      	ldr	r2, [pc, #72]	; (800621c <_sbrk+0x68>)
 80061d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80061d6:	4b10      	ldr	r3, [pc, #64]	; (8006218 <_sbrk+0x64>)
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4413      	add	r3, r2
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d207      	bcs.n	80061f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80061e4:	f004 fb7a 	bl	800a8dc <__errno>
 80061e8:	4603      	mov	r3, r0
 80061ea:	220c      	movs	r2, #12
 80061ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80061ee:	f04f 33ff 	mov.w	r3, #4294967295
 80061f2:	e009      	b.n	8006208 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80061f4:	4b08      	ldr	r3, [pc, #32]	; (8006218 <_sbrk+0x64>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80061fa:	4b07      	ldr	r3, [pc, #28]	; (8006218 <_sbrk+0x64>)
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4413      	add	r3, r2
 8006202:	4a05      	ldr	r2, [pc, #20]	; (8006218 <_sbrk+0x64>)
 8006204:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006206:	68fb      	ldr	r3, [r7, #12]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3718      	adds	r7, #24
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	2000c000 	.word	0x2000c000
 8006214:	00000400 	.word	0x00000400
 8006218:	20001480 	.word	0x20001480
 800621c:	20001498 	.word	0x20001498

08006220 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006220:	b480      	push	{r7}
 8006222:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006224:	bf00      	nop
 8006226:	46bd      	mov	sp, r7
 8006228:	bc80      	pop	{r7}
 800622a:	4770      	bx	lr

0800622c <set_Beacons>:
extern uint8_t allyBeacons_num;
extern uint8_t oppoBeacons_num;
extern uint8_t overtime;

void set_Beacons(void)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i = 0;i < 3; i++){
 8006232:	2300      	movs	r3, #0
 8006234:	71fb      	strb	r3, [r7, #7]
 8006236:	e014      	b.n	8006262 <set_Beacons+0x36>
		GotoDestination(want_allyBeacons[i], 0);
 8006238:	79fb      	ldrb	r3, [r7, #7]
 800623a:	4a0e      	ldr	r2, [pc, #56]	; (8006274 <set_Beacons+0x48>)
 800623c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006240:	4613      	mov	r3, r2
 8006242:	2100      	movs	r1, #0
 8006244:	4618      	mov	r0, r3
 8006246:	f7fe fc03 	bl	8004a50 <GotoDestination>
		HAL_Delay(100);
 800624a:	2064      	movs	r0, #100	; 0x64
 800624c:	f000 f9c2 	bl	80065d4 <HAL_Delay>
		huansic_xb_setBeacon(&hxb);
 8006250:	4809      	ldr	r0, [pc, #36]	; (8006278 <set_Beacons+0x4c>)
 8006252:	f7fd f8a7 	bl	80033a4 <huansic_xb_setBeacon>
		HAL_Delay(100);
 8006256:	2064      	movs	r0, #100	; 0x64
 8006258:	f000 f9bc 	bl	80065d4 <HAL_Delay>
	for(i = 0;i < 3; i++){
 800625c:	79fb      	ldrb	r3, [r7, #7]
 800625e:	3301      	adds	r3, #1
 8006260:	71fb      	strb	r3, [r7, #7]
 8006262:	79fb      	ldrb	r3, [r7, #7]
 8006264:	2b02      	cmp	r3, #2
 8006266:	d9e7      	bls.n	8006238 <set_Beacons+0xc>
	}
}
 8006268:	bf00      	nop
 800626a:	bf00      	nop
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20001018 	.word	0x20001018
 8006278:	20000ef0 	.word	0x20000ef0

0800627c <Cal_Battery_Coord>:

void Cal_Battery_Coord(void)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
	uint8_t seted = 0;
 8006282:	2300      	movs	r3, #0
 8006284:	71fb      	strb	r3, [r7, #7]
	//set a signal
	want_allyBeacons[seted].x = 127;
 8006286:	79fb      	ldrb	r3, [r7, #7]
 8006288:	4a16      	ldr	r2, [pc, #88]	; (80062e4 <Cal_Battery_Coord+0x68>)
 800628a:	217f      	movs	r1, #127	; 0x7f
 800628c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	want_allyBeacons[seted].y = 60;
 8006290:	79fb      	ldrb	r3, [r7, #7]
 8006292:	4a14      	ldr	r2, [pc, #80]	; (80062e4 <Cal_Battery_Coord+0x68>)
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4413      	add	r3, r2
 8006298:	223c      	movs	r2, #60	; 0x3c
 800629a:	805a      	strh	r2, [r3, #2]
	seted += 1;
 800629c:	79fb      	ldrb	r3, [r7, #7]
 800629e:	3301      	adds	r3, #1
 80062a0:	71fb      	strb	r3, [r7, #7]
	//set a signal
	want_allyBeacons[seted].x = 127;
 80062a2:	79fb      	ldrb	r3, [r7, #7]
 80062a4:	4a0f      	ldr	r2, [pc, #60]	; (80062e4 <Cal_Battery_Coord+0x68>)
 80062a6:	217f      	movs	r1, #127	; 0x7f
 80062a8:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	want_allyBeacons[seted].y = 120;
 80062ac:	79fb      	ldrb	r3, [r7, #7]
 80062ae:	4a0d      	ldr	r2, [pc, #52]	; (80062e4 <Cal_Battery_Coord+0x68>)
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	2278      	movs	r2, #120	; 0x78
 80062b6:	805a      	strh	r2, [r3, #2]
	seted += 1;
 80062b8:	79fb      	ldrb	r3, [r7, #7]
 80062ba:	3301      	adds	r3, #1
 80062bc:	71fb      	strb	r3, [r7, #7]
	//set a signal
	want_allyBeacons[seted].x = 127;
 80062be:	79fb      	ldrb	r3, [r7, #7]
 80062c0:	4a08      	ldr	r2, [pc, #32]	; (80062e4 <Cal_Battery_Coord+0x68>)
 80062c2:	217f      	movs	r1, #127	; 0x7f
 80062c4:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	want_allyBeacons[seted].y = 180;
 80062c8:	79fb      	ldrb	r3, [r7, #7]
 80062ca:	4a06      	ldr	r2, [pc, #24]	; (80062e4 <Cal_Battery_Coord+0x68>)
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	22b4      	movs	r2, #180	; 0xb4
 80062d2:	805a      	strh	r2, [r3, #2]
	seted += 1;
 80062d4:	79fb      	ldrb	r3, [r7, #7]
 80062d6:	3301      	adds	r3, #1
 80062d8:	71fb      	strb	r3, [r7, #7]
}
 80062da:	bf00      	nop
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	bc80      	pop	{r7}
 80062e2:	4770      	bx	lr
 80062e4:	20001018 	.word	0x20001018

080062e8 <Get_packet>:

void Get_packet(Coordinate merchant)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
	GotoDestination(merchant,0);
 80062f0:	2100      	movs	r1, #0
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7fe fbac 	bl	8004a50 <GotoDestination>
}
 80062f8:	bf00      	nop
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <Send_packet>:

void Send_packet(Coordinate consumer)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
	GotoDestination(consumer,0);
 8006308:	2100      	movs	r1, #0
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7fe fba0 	bl	8004a50 <GotoDestination>
}
 8006310:	bf00      	nop
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <Get_nearest_consumer>:

Coordinate Get_nearest_consumer(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
	int16_t mindis = 512;
 800631e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006322:	82fb      	strh	r3, [r7, #22]
	int16_t distance;
	uint8_t minindex = 0;
 8006324:	2300      	movs	r3, #0
 8006326:	757b      	strb	r3, [r7, #21]
	if(delivering_num == 0)
 8006328:	4b36      	ldr	r3, [pc, #216]	; (8006404 <Get_nearest_consumer+0xec>)
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d105      	bne.n	800633c <Get_nearest_consumer+0x24>
		return myCoord;
 8006330:	4a35      	ldr	r2, [pc, #212]	; (8006408 <Get_nearest_consumer+0xf0>)
 8006332:	f107 0308 	add.w	r3, r7, #8
 8006336:	6810      	ldr	r0, [r2, #0]
 8006338:	6018      	str	r0, [r3, #0]
 800633a:	e057      	b.n	80063ec <Get_nearest_consumer+0xd4>
	uint32_t nowtime = HAL_GetTick();
 800633c:	f000 f940 	bl	80065c0 <HAL_GetTick>
 8006340:	6138      	str	r0, [r7, #16]
	for(uint8_t i = 0;i < delivering_num; i++)
 8006342:	2300      	movs	r3, #0
 8006344:	753b      	strb	r3, [r7, #20]
 8006346:	e044      	b.n	80063d2 <Get_nearest_consumer+0xba>
	{
		if(delivering[i]->timeLimit + delivering[i]->startTime - nowtime < 5000){
 8006348:	7d3b      	ldrb	r3, [r7, #20]
 800634a:	4a30      	ldr	r2, [pc, #192]	; (800640c <Get_nearest_consumer+0xf4>)
 800634c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006350:	689a      	ldr	r2, [r3, #8]
 8006352:	7d3b      	ldrb	r3, [r7, #20]
 8006354:	492d      	ldr	r1, [pc, #180]	; (800640c <Get_nearest_consumer+0xf4>)
 8006356:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	441a      	add	r2, r3
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	f241 3287 	movw	r2, #4999	; 0x1387
 8006366:	4293      	cmp	r3, r2
 8006368:	d805      	bhi.n	8006376 <Get_nearest_consumer+0x5e>
			minindex = i;
 800636a:	7d3b      	ldrb	r3, [r7, #20]
 800636c:	757b      	strb	r3, [r7, #21]
			overtime = 1;
 800636e:	4b28      	ldr	r3, [pc, #160]	; (8006410 <Get_nearest_consumer+0xf8>)
 8006370:	2201      	movs	r2, #1
 8006372:	701a      	strb	r2, [r3, #0]
			break;
 8006374:	e032      	b.n	80063dc <Get_nearest_consumer+0xc4>
		}
		distance = abs(myCoord.x - delivering[i]->destCoord.x) + abs(myCoord.y - delivering[i]->destCoord.y);
 8006376:	4b24      	ldr	r3, [pc, #144]	; (8006408 <Get_nearest_consumer+0xf0>)
 8006378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800637c:	4619      	mov	r1, r3
 800637e:	7d3b      	ldrb	r3, [r7, #20]
 8006380:	4a22      	ldr	r2, [pc, #136]	; (800640c <Get_nearest_consumer+0xf4>)
 8006382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006386:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800638a:	1acb      	subs	r3, r1, r3
 800638c:	2b00      	cmp	r3, #0
 800638e:	bfb8      	it	lt
 8006390:	425b      	neglt	r3, r3
 8006392:	b29a      	uxth	r2, r3
 8006394:	4b1c      	ldr	r3, [pc, #112]	; (8006408 <Get_nearest_consumer+0xf0>)
 8006396:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800639a:	4618      	mov	r0, r3
 800639c:	7d3b      	ldrb	r3, [r7, #20]
 800639e:	491b      	ldr	r1, [pc, #108]	; (800640c <Get_nearest_consumer+0xf4>)
 80063a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80063a4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80063a8:	1ac3      	subs	r3, r0, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	bfb8      	it	lt
 80063ae:	425b      	neglt	r3, r3
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	4413      	add	r3, r2
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	81fb      	strh	r3, [r7, #14]
		if(distance < mindis){
 80063b8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80063bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	da03      	bge.n	80063cc <Get_nearest_consumer+0xb4>
			mindis = distance;
 80063c4:	89fb      	ldrh	r3, [r7, #14]
 80063c6:	82fb      	strh	r3, [r7, #22]
			minindex = i;
 80063c8:	7d3b      	ldrb	r3, [r7, #20]
 80063ca:	757b      	strb	r3, [r7, #21]
	for(uint8_t i = 0;i < delivering_num; i++)
 80063cc:	7d3b      	ldrb	r3, [r7, #20]
 80063ce:	3301      	adds	r3, #1
 80063d0:	753b      	strb	r3, [r7, #20]
 80063d2:	4b0c      	ldr	r3, [pc, #48]	; (8006404 <Get_nearest_consumer+0xec>)
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	7d3a      	ldrb	r2, [r7, #20]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d3b5      	bcc.n	8006348 <Get_nearest_consumer+0x30>
		}
	}
	Coordinate nearest = delivering[minindex]->destCoord;
 80063dc:	7d7b      	ldrb	r3, [r7, #21]
 80063de:	4a0b      	ldr	r2, [pc, #44]	; (800640c <Get_nearest_consumer+0xf4>)
 80063e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	607b      	str	r3, [r7, #4]
	return nearest;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	60bb      	str	r3, [r7, #8]

}
 80063ec:	2300      	movs	r3, #0
 80063ee:	893a      	ldrh	r2, [r7, #8]
 80063f0:	f362 030f 	bfi	r3, r2, #0, #16
 80063f4:	897a      	ldrh	r2, [r7, #10]
 80063f6:	f362 431f 	bfi	r3, r2, #16, #16
 80063fa:	4618      	mov	r0, r3
 80063fc:	3718      	adds	r7, #24
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20001064 	.word	0x20001064
 8006408:	20001068 	.word	0x20001068
 800640c:	20001044 	.word	0x20001044
 8006410:	20001075 	.word	0x20001075

08006414 <Get_nearest_Beacon>:

Coordinate Get_nearest_Beacon(void){
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
	int16_t mindis = 512;
 800641a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800641e:	81fb      	strh	r3, [r7, #14]
	int16_t distance;
	uint8_t minindex = 0;
 8006420:	2300      	movs	r3, #0
 8006422:	737b      	strb	r3, [r7, #13]
//	uint8_t j = 0;
	for(uint8_t i = 0;i < allyBeacons_num;i++)
 8006424:	2300      	movs	r3, #0
 8006426:	733b      	strb	r3, [r7, #12]
 8006428:	e02b      	b.n	8006482 <Get_nearest_Beacon+0x6e>
//			if((allyBeacons[i].x - oppoBeacons[j].x)*(allyBeacons[i].x - oppoBeacons[j].x) + (allyBeacons[i].y - oppoBeacons[j].y)*(allyBeacons[i].y - oppoBeacons[j].y) < 400)
//				break;
//		}
//		if(j < oppoBeacons_num)
//			continue;
		distance = abs(myCoord.x - allyBeacons[i].x) + abs(myCoord.y - allyBeacons[i].y);
 800642a:	4b23      	ldr	r3, [pc, #140]	; (80064b8 <Get_nearest_Beacon+0xa4>)
 800642c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006430:	4619      	mov	r1, r3
 8006432:	7b3b      	ldrb	r3, [r7, #12]
 8006434:	4a21      	ldr	r2, [pc, #132]	; (80064bc <Get_nearest_Beacon+0xa8>)
 8006436:	f932 3023 	ldrsh.w	r3, [r2, r3, lsl #2]
 800643a:	1acb      	subs	r3, r1, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	bfb8      	it	lt
 8006440:	425b      	neglt	r3, r3
 8006442:	b29a      	uxth	r2, r3
 8006444:	4b1c      	ldr	r3, [pc, #112]	; (80064b8 <Get_nearest_Beacon+0xa4>)
 8006446:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800644a:	4618      	mov	r0, r3
 800644c:	7b3b      	ldrb	r3, [r7, #12]
 800644e:	491b      	ldr	r1, [pc, #108]	; (80064bc <Get_nearest_Beacon+0xa8>)
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	440b      	add	r3, r1
 8006454:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006458:	1ac3      	subs	r3, r0, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	bfb8      	it	lt
 800645e:	425b      	neglt	r3, r3
 8006460:	b29b      	uxth	r3, r3
 8006462:	4413      	add	r3, r2
 8006464:	b29b      	uxth	r3, r3
 8006466:	817b      	strh	r3, [r7, #10]
		if(distance < mindis){
 8006468:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800646c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006470:	429a      	cmp	r2, r3
 8006472:	da03      	bge.n	800647c <Get_nearest_Beacon+0x68>
			mindis = distance;
 8006474:	897b      	ldrh	r3, [r7, #10]
 8006476:	81fb      	strh	r3, [r7, #14]
			minindex = i;
 8006478:	7b3b      	ldrb	r3, [r7, #12]
 800647a:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0;i < allyBeacons_num;i++)
 800647c:	7b3b      	ldrb	r3, [r7, #12]
 800647e:	3301      	adds	r3, #1
 8006480:	733b      	strb	r3, [r7, #12]
 8006482:	4b0f      	ldr	r3, [pc, #60]	; (80064c0 <Get_nearest_Beacon+0xac>)
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	7b3a      	ldrb	r2, [r7, #12]
 8006488:	429a      	cmp	r2, r3
 800648a:	d3ce      	bcc.n	800642a <Get_nearest_Beacon+0x16>
		}
	}
	Coordinate nearest = allyBeacons[minindex];
 800648c:	7b7b      	ldrb	r3, [r7, #13]
 800648e:	490b      	ldr	r1, [pc, #44]	; (80064bc <Get_nearest_Beacon+0xa8>)
 8006490:	463a      	mov	r2, r7
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	440b      	add	r3, r1
 8006496:	6818      	ldr	r0, [r3, #0]
 8006498:	6010      	str	r0, [r2, #0]
	return nearest;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	607b      	str	r3, [r7, #4]
 800649e:	2300      	movs	r3, #0
 80064a0:	88ba      	ldrh	r2, [r7, #4]
 80064a2:	f362 030f 	bfi	r3, r2, #0, #16
 80064a6:	88fa      	ldrh	r2, [r7, #6]
 80064a8:	f362 431f 	bfi	r3, r2, #16, #16
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bc80      	pop	{r7}
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	20001068 	.word	0x20001068
 80064bc:	20001000 	.word	0x20001000
 80064c0:	20001065 	.word	0x20001065

080064c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80064c4:	480c      	ldr	r0, [pc, #48]	; (80064f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80064c6:	490d      	ldr	r1, [pc, #52]	; (80064fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80064c8:	4a0d      	ldr	r2, [pc, #52]	; (8006500 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80064ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80064cc:	e002      	b.n	80064d4 <LoopCopyDataInit>

080064ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80064ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80064d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80064d2:	3304      	adds	r3, #4

080064d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80064d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80064d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80064d8:	d3f9      	bcc.n	80064ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80064da:	4a0a      	ldr	r2, [pc, #40]	; (8006504 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80064dc:	4c0a      	ldr	r4, [pc, #40]	; (8006508 <LoopFillZerobss+0x22>)
  movs r3, #0
 80064de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80064e0:	e001      	b.n	80064e6 <LoopFillZerobss>

080064e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80064e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80064e4:	3204      	adds	r2, #4

080064e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80064e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80064e8:	d3fb      	bcc.n	80064e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80064ea:	f7ff fe99 	bl	8006220 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80064ee:	f004 fa0d 	bl	800a90c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80064f2:	f7fc fffb 	bl	80034ec <main>
  bx lr
 80064f6:	4770      	bx	lr
  ldr r0, =_sdata
 80064f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80064fc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8006500:	0800da58 	.word	0x0800da58
  ldr r2, =_sbss
 8006504:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8006508:	20001498 	.word	0x20001498

0800650c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800650c:	e7fe      	b.n	800650c <ADC1_2_IRQHandler>
	...

08006510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006514:	4b08      	ldr	r3, [pc, #32]	; (8006538 <HAL_Init+0x28>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a07      	ldr	r2, [pc, #28]	; (8006538 <HAL_Init+0x28>)
 800651a:	f043 0310 	orr.w	r3, r3, #16
 800651e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006520:	2003      	movs	r0, #3
 8006522:	f000 f96b 	bl	80067fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006526:	2000      	movs	r0, #0
 8006528:	f000 f808 	bl	800653c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800652c:	f7ff f9aa 	bl	8005884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	40022000 	.word	0x40022000

0800653c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006544:	4b12      	ldr	r3, [pc, #72]	; (8006590 <HAL_InitTick+0x54>)
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	4b12      	ldr	r3, [pc, #72]	; (8006594 <HAL_InitTick+0x58>)
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	4619      	mov	r1, r3
 800654e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006552:	fbb3 f3f1 	udiv	r3, r3, r1
 8006556:	fbb2 f3f3 	udiv	r3, r2, r3
 800655a:	4618      	mov	r0, r3
 800655c:	f000 f991 	bl	8006882 <HAL_SYSTICK_Config>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e00e      	b.n	8006588 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b0f      	cmp	r3, #15
 800656e:	d80a      	bhi.n	8006586 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006570:	2200      	movs	r2, #0
 8006572:	6879      	ldr	r1, [r7, #4]
 8006574:	f04f 30ff 	mov.w	r0, #4294967295
 8006578:	f000 f94b 	bl	8006812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800657c:	4a06      	ldr	r2, [pc, #24]	; (8006598 <HAL_InitTick+0x5c>)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006582:	2300      	movs	r3, #0
 8006584:	e000      	b.n	8006588 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
}
 8006588:	4618      	mov	r0, r3
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	20000018 	.word	0x20000018
 8006594:	20000020 	.word	0x20000020
 8006598:	2000001c 	.word	0x2000001c

0800659c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800659c:	b480      	push	{r7}
 800659e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80065a0:	4b05      	ldr	r3, [pc, #20]	; (80065b8 <HAL_IncTick+0x1c>)
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	461a      	mov	r2, r3
 80065a6:	4b05      	ldr	r3, [pc, #20]	; (80065bc <HAL_IncTick+0x20>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4413      	add	r3, r2
 80065ac:	4a03      	ldr	r2, [pc, #12]	; (80065bc <HAL_IncTick+0x20>)
 80065ae:	6013      	str	r3, [r2, #0]
}
 80065b0:	bf00      	nop
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bc80      	pop	{r7}
 80065b6:	4770      	bx	lr
 80065b8:	20000020 	.word	0x20000020
 80065bc:	20001484 	.word	0x20001484

080065c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80065c0:	b480      	push	{r7}
 80065c2:	af00      	add	r7, sp, #0
  return uwTick;
 80065c4:	4b02      	ldr	r3, [pc, #8]	; (80065d0 <HAL_GetTick+0x10>)
 80065c6:	681b      	ldr	r3, [r3, #0]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bc80      	pop	{r7}
 80065ce:	4770      	bx	lr
 80065d0:	20001484 	.word	0x20001484

080065d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80065dc:	f7ff fff0 	bl	80065c0 <HAL_GetTick>
 80065e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ec:	d005      	beq.n	80065fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80065ee:	4b0a      	ldr	r3, [pc, #40]	; (8006618 <HAL_Delay+0x44>)
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	461a      	mov	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4413      	add	r3, r2
 80065f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80065fa:	bf00      	nop
 80065fc:	f7ff ffe0 	bl	80065c0 <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	429a      	cmp	r2, r3
 800660a:	d8f7      	bhi.n	80065fc <HAL_Delay+0x28>
  {
  }
}
 800660c:	bf00      	nop
 800660e:	bf00      	nop
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20000020 	.word	0x20000020

0800661c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800662c:	4b0c      	ldr	r3, [pc, #48]	; (8006660 <__NVIC_SetPriorityGrouping+0x44>)
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006638:	4013      	ands	r3, r2
 800663a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800664c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800664e:	4a04      	ldr	r2, [pc, #16]	; (8006660 <__NVIC_SetPriorityGrouping+0x44>)
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	60d3      	str	r3, [r2, #12]
}
 8006654:	bf00      	nop
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	bc80      	pop	{r7}
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	e000ed00 	.word	0xe000ed00

08006664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006668:	4b04      	ldr	r3, [pc, #16]	; (800667c <__NVIC_GetPriorityGrouping+0x18>)
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	0a1b      	lsrs	r3, r3, #8
 800666e:	f003 0307 	and.w	r3, r3, #7
}
 8006672:	4618      	mov	r0, r3
 8006674:	46bd      	mov	sp, r7
 8006676:	bc80      	pop	{r7}
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	e000ed00 	.word	0xe000ed00

08006680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	4603      	mov	r3, r0
 8006688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800668a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800668e:	2b00      	cmp	r3, #0
 8006690:	db0b      	blt.n	80066aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006692:	79fb      	ldrb	r3, [r7, #7]
 8006694:	f003 021f 	and.w	r2, r3, #31
 8006698:	4906      	ldr	r1, [pc, #24]	; (80066b4 <__NVIC_EnableIRQ+0x34>)
 800669a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800669e:	095b      	lsrs	r3, r3, #5
 80066a0:	2001      	movs	r0, #1
 80066a2:	fa00 f202 	lsl.w	r2, r0, r2
 80066a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80066aa:	bf00      	nop
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bc80      	pop	{r7}
 80066b2:	4770      	bx	lr
 80066b4:	e000e100 	.word	0xe000e100

080066b8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	4603      	mov	r3, r0
 80066c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	db12      	blt.n	80066f0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066ca:	79fb      	ldrb	r3, [r7, #7]
 80066cc:	f003 021f 	and.w	r2, r3, #31
 80066d0:	490a      	ldr	r1, [pc, #40]	; (80066fc <__NVIC_DisableIRQ+0x44>)
 80066d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066d6:	095b      	lsrs	r3, r3, #5
 80066d8:	2001      	movs	r0, #1
 80066da:	fa00 f202 	lsl.w	r2, r0, r2
 80066de:	3320      	adds	r3, #32
 80066e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80066e4:	f3bf 8f4f 	dsb	sy
}
 80066e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80066ea:	f3bf 8f6f 	isb	sy
}
 80066ee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bc80      	pop	{r7}
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	e000e100 	.word	0xe000e100

08006700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	4603      	mov	r3, r0
 8006708:	6039      	str	r1, [r7, #0]
 800670a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800670c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006710:	2b00      	cmp	r3, #0
 8006712:	db0a      	blt.n	800672a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	b2da      	uxtb	r2, r3
 8006718:	490c      	ldr	r1, [pc, #48]	; (800674c <__NVIC_SetPriority+0x4c>)
 800671a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800671e:	0112      	lsls	r2, r2, #4
 8006720:	b2d2      	uxtb	r2, r2
 8006722:	440b      	add	r3, r1
 8006724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006728:	e00a      	b.n	8006740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	b2da      	uxtb	r2, r3
 800672e:	4908      	ldr	r1, [pc, #32]	; (8006750 <__NVIC_SetPriority+0x50>)
 8006730:	79fb      	ldrb	r3, [r7, #7]
 8006732:	f003 030f 	and.w	r3, r3, #15
 8006736:	3b04      	subs	r3, #4
 8006738:	0112      	lsls	r2, r2, #4
 800673a:	b2d2      	uxtb	r2, r2
 800673c:	440b      	add	r3, r1
 800673e:	761a      	strb	r2, [r3, #24]
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	bc80      	pop	{r7}
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	e000e100 	.word	0xe000e100
 8006750:	e000ed00 	.word	0xe000ed00

08006754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006754:	b480      	push	{r7}
 8006756:	b089      	sub	sp, #36	; 0x24
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f003 0307 	and.w	r3, r3, #7
 8006766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	f1c3 0307 	rsb	r3, r3, #7
 800676e:	2b04      	cmp	r3, #4
 8006770:	bf28      	it	cs
 8006772:	2304      	movcs	r3, #4
 8006774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	3304      	adds	r3, #4
 800677a:	2b06      	cmp	r3, #6
 800677c:	d902      	bls.n	8006784 <NVIC_EncodePriority+0x30>
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	3b03      	subs	r3, #3
 8006782:	e000      	b.n	8006786 <NVIC_EncodePriority+0x32>
 8006784:	2300      	movs	r3, #0
 8006786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006788:	f04f 32ff 	mov.w	r2, #4294967295
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	fa02 f303 	lsl.w	r3, r2, r3
 8006792:	43da      	mvns	r2, r3
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	401a      	ands	r2, r3
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800679c:	f04f 31ff 	mov.w	r1, #4294967295
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	fa01 f303 	lsl.w	r3, r1, r3
 80067a6:	43d9      	mvns	r1, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067ac:	4313      	orrs	r3, r2
         );
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3724      	adds	r7, #36	; 0x24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bc80      	pop	{r7}
 80067b6:	4770      	bx	lr

080067b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	3b01      	subs	r3, #1
 80067c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067c8:	d301      	bcc.n	80067ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80067ca:	2301      	movs	r3, #1
 80067cc:	e00f      	b.n	80067ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80067ce:	4a0a      	ldr	r2, [pc, #40]	; (80067f8 <SysTick_Config+0x40>)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	3b01      	subs	r3, #1
 80067d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80067d6:	210f      	movs	r1, #15
 80067d8:	f04f 30ff 	mov.w	r0, #4294967295
 80067dc:	f7ff ff90 	bl	8006700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067e0:	4b05      	ldr	r3, [pc, #20]	; (80067f8 <SysTick_Config+0x40>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067e6:	4b04      	ldr	r3, [pc, #16]	; (80067f8 <SysTick_Config+0x40>)
 80067e8:	2207      	movs	r2, #7
 80067ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	e000e010 	.word	0xe000e010

080067fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff ff09 	bl	800661c <__NVIC_SetPriorityGrouping>
}
 800680a:	bf00      	nop
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006812:	b580      	push	{r7, lr}
 8006814:	b086      	sub	sp, #24
 8006816:	af00      	add	r7, sp, #0
 8006818:	4603      	mov	r3, r0
 800681a:	60b9      	str	r1, [r7, #8]
 800681c:	607a      	str	r2, [r7, #4]
 800681e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006820:	2300      	movs	r3, #0
 8006822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006824:	f7ff ff1e 	bl	8006664 <__NVIC_GetPriorityGrouping>
 8006828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	68b9      	ldr	r1, [r7, #8]
 800682e:	6978      	ldr	r0, [r7, #20]
 8006830:	f7ff ff90 	bl	8006754 <NVIC_EncodePriority>
 8006834:	4602      	mov	r2, r0
 8006836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800683a:	4611      	mov	r1, r2
 800683c:	4618      	mov	r0, r3
 800683e:	f7ff ff5f 	bl	8006700 <__NVIC_SetPriority>
}
 8006842:	bf00      	nop
 8006844:	3718      	adds	r7, #24
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b082      	sub	sp, #8
 800684e:	af00      	add	r7, sp, #0
 8006850:	4603      	mov	r3, r0
 8006852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006858:	4618      	mov	r0, r3
 800685a:	f7ff ff11 	bl	8006680 <__NVIC_EnableIRQ>
}
 800685e:	bf00      	nop
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b082      	sub	sp, #8
 800686a:	af00      	add	r7, sp, #0
 800686c:	4603      	mov	r3, r0
 800686e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006874:	4618      	mov	r0, r3
 8006876:	f7ff ff1f 	bl	80066b8 <__NVIC_DisableIRQ>
}
 800687a:	bf00      	nop
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b082      	sub	sp, #8
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f7ff ff94 	bl	80067b8 <SysTick_Config>
 8006890:	4603      	mov	r3, r0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
	...

0800689c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e059      	b.n	8006966 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	461a      	mov	r2, r3
 80068b8:	4b2d      	ldr	r3, [pc, #180]	; (8006970 <HAL_DMA_Init+0xd4>)
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d80f      	bhi.n	80068de <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	4b2b      	ldr	r3, [pc, #172]	; (8006974 <HAL_DMA_Init+0xd8>)
 80068c6:	4413      	add	r3, r2
 80068c8:	4a2b      	ldr	r2, [pc, #172]	; (8006978 <HAL_DMA_Init+0xdc>)
 80068ca:	fba2 2303 	umull	r2, r3, r2, r3
 80068ce:	091b      	lsrs	r3, r3, #4
 80068d0:	009a      	lsls	r2, r3, #2
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a28      	ldr	r2, [pc, #160]	; (800697c <HAL_DMA_Init+0xe0>)
 80068da:	63da      	str	r2, [r3, #60]	; 0x3c
 80068dc:	e00e      	b.n	80068fc <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	461a      	mov	r2, r3
 80068e4:	4b26      	ldr	r3, [pc, #152]	; (8006980 <HAL_DMA_Init+0xe4>)
 80068e6:	4413      	add	r3, r2
 80068e8:	4a23      	ldr	r2, [pc, #140]	; (8006978 <HAL_DMA_Init+0xdc>)
 80068ea:	fba2 2303 	umull	r2, r3, r2, r3
 80068ee:	091b      	lsrs	r3, r3, #4
 80068f0:	009a      	lsls	r2, r3, #2
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a22      	ldr	r2, [pc, #136]	; (8006984 <HAL_DMA_Init+0xe8>)
 80068fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006912:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006916:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006920:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800692c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006938:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	4313      	orrs	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	bc80      	pop	{r7}
 800696e:	4770      	bx	lr
 8006970:	40020407 	.word	0x40020407
 8006974:	bffdfff8 	.word	0xbffdfff8
 8006978:	cccccccd 	.word	0xcccccccd
 800697c:	40020000 	.word	0x40020000
 8006980:	bffdfbf8 	.word	0xbffdfbf8
 8006984:	40020400 	.word	0x40020400

08006988 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e05c      	b.n	8006a54 <HAL_DMA_DeInit+0xcc>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 0201 	bic.w	r2, r2, #1
 80069a8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2200      	movs	r2, #0
 80069b0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2200      	movs	r2, #0
 80069b8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2200      	movs	r2, #0
 80069c0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2200      	movs	r2, #0
 80069c8:	60da      	str	r2, [r3, #12]

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	461a      	mov	r2, r3
 80069d0:	4b23      	ldr	r3, [pc, #140]	; (8006a60 <HAL_DMA_DeInit+0xd8>)
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d80f      	bhi.n	80069f6 <HAL_DMA_DeInit+0x6e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	461a      	mov	r2, r3
 80069dc:	4b21      	ldr	r3, [pc, #132]	; (8006a64 <HAL_DMA_DeInit+0xdc>)
 80069de:	4413      	add	r3, r2
 80069e0:	4a21      	ldr	r2, [pc, #132]	; (8006a68 <HAL_DMA_DeInit+0xe0>)
 80069e2:	fba2 2303 	umull	r2, r3, r2, r3
 80069e6:	091b      	lsrs	r3, r3, #4
 80069e8:	009a      	lsls	r2, r3, #2
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a1e      	ldr	r2, [pc, #120]	; (8006a6c <HAL_DMA_DeInit+0xe4>)
 80069f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80069f4:	e00e      	b.n	8006a14 <HAL_DMA_DeInit+0x8c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	4b1c      	ldr	r3, [pc, #112]	; (8006a70 <HAL_DMA_DeInit+0xe8>)
 80069fe:	4413      	add	r3, r2
 8006a00:	4a19      	ldr	r2, [pc, #100]	; (8006a68 <HAL_DMA_DeInit+0xe0>)
 8006a02:	fba2 2303 	umull	r2, r3, r2, r3
 8006a06:	091b      	lsrs	r3, r3, #4
 8006a08:	009a      	lsls	r2, r3, #2
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a18      	ldr	r2, [pc, #96]	; (8006a74 <HAL_DMA_DeInit+0xec>)
 8006a12:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a1c:	2101      	movs	r1, #1
 8006a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8006a22:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bc80      	pop	{r7}
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	40020407 	.word	0x40020407
 8006a64:	bffdfff8 	.word	0xbffdfff8
 8006a68:	cccccccd 	.word	0xcccccccd
 8006a6c:	40020000 	.word	0x40020000
 8006a70:	bffdfbf8 	.word	0xbffdfbf8
 8006a74:	40020400 	.word	0x40020400

08006a78 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
 8006a84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a86:	2300      	movs	r3, #0
 8006a88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d101      	bne.n	8006a98 <HAL_DMA_Start_IT+0x20>
 8006a94:	2302      	movs	r3, #2
 8006a96:	e04a      	b.n	8006b2e <HAL_DMA_Start_IT+0xb6>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d13a      	bne.n	8006b20 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2202      	movs	r2, #2
 8006aae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f022 0201 	bic.w	r2, r2, #1
 8006ac6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	68b9      	ldr	r1, [r7, #8]
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f000 fbb0 	bl	8007234 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d008      	beq.n	8006aee <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f042 020e 	orr.w	r2, r2, #14
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	e00f      	b.n	8006b0e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f022 0204 	bic.w	r2, r2, #4
 8006afc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f042 020a 	orr.w	r2, r2, #10
 8006b0c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f042 0201 	orr.w	r2, r2, #1
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	e005      	b.n	8006b2c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006b28:	2302      	movs	r3, #2
 8006b2a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3718      	adds	r7, #24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b085      	sub	sp, #20
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d008      	beq.n	8006b5e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2204      	movs	r2, #4
 8006b50:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e020      	b.n	8006ba0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f022 020e 	bic.w	r2, r2, #14
 8006b6c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f022 0201 	bic.w	r2, r2, #1
 8006b7c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b86:	2101      	movs	r1, #1
 8006b88:	fa01 f202 	lsl.w	r2, r1, r2
 8006b8c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3714      	adds	r7, #20
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bc80      	pop	{r7}
 8006ba8:	4770      	bx	lr
	...

08006bac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d005      	beq.n	8006bce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2204      	movs	r2, #4
 8006bc6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	73fb      	strb	r3, [r7, #15]
 8006bcc:	e0d6      	b.n	8006d7c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f022 020e 	bic.w	r2, r2, #14
 8006bdc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0201 	bic.w	r2, r2, #1
 8006bec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	4b64      	ldr	r3, [pc, #400]	; (8006d88 <HAL_DMA_Abort_IT+0x1dc>)
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d958      	bls.n	8006cac <HAL_DMA_Abort_IT+0x100>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a63      	ldr	r2, [pc, #396]	; (8006d8c <HAL_DMA_Abort_IT+0x1e0>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d04f      	beq.n	8006ca4 <HAL_DMA_Abort_IT+0xf8>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a61      	ldr	r2, [pc, #388]	; (8006d90 <HAL_DMA_Abort_IT+0x1e4>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d048      	beq.n	8006ca0 <HAL_DMA_Abort_IT+0xf4>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a60      	ldr	r2, [pc, #384]	; (8006d94 <HAL_DMA_Abort_IT+0x1e8>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d040      	beq.n	8006c9a <HAL_DMA_Abort_IT+0xee>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a5e      	ldr	r2, [pc, #376]	; (8006d98 <HAL_DMA_Abort_IT+0x1ec>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d038      	beq.n	8006c94 <HAL_DMA_Abort_IT+0xe8>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a5d      	ldr	r2, [pc, #372]	; (8006d9c <HAL_DMA_Abort_IT+0x1f0>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d030      	beq.n	8006c8e <HAL_DMA_Abort_IT+0xe2>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a5b      	ldr	r2, [pc, #364]	; (8006da0 <HAL_DMA_Abort_IT+0x1f4>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d028      	beq.n	8006c88 <HAL_DMA_Abort_IT+0xdc>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a53      	ldr	r2, [pc, #332]	; (8006d88 <HAL_DMA_Abort_IT+0x1dc>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d020      	beq.n	8006c82 <HAL_DMA_Abort_IT+0xd6>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a57      	ldr	r2, [pc, #348]	; (8006da4 <HAL_DMA_Abort_IT+0x1f8>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d019      	beq.n	8006c7e <HAL_DMA_Abort_IT+0xd2>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a56      	ldr	r2, [pc, #344]	; (8006da8 <HAL_DMA_Abort_IT+0x1fc>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d012      	beq.n	8006c7a <HAL_DMA_Abort_IT+0xce>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a54      	ldr	r2, [pc, #336]	; (8006dac <HAL_DMA_Abort_IT+0x200>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d00a      	beq.n	8006c74 <HAL_DMA_Abort_IT+0xc8>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a53      	ldr	r2, [pc, #332]	; (8006db0 <HAL_DMA_Abort_IT+0x204>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d102      	bne.n	8006c6e <HAL_DMA_Abort_IT+0xc2>
 8006c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c6c:	e01b      	b.n	8006ca6 <HAL_DMA_Abort_IT+0xfa>
 8006c6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c72:	e018      	b.n	8006ca6 <HAL_DMA_Abort_IT+0xfa>
 8006c74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c78:	e015      	b.n	8006ca6 <HAL_DMA_Abort_IT+0xfa>
 8006c7a:	2310      	movs	r3, #16
 8006c7c:	e013      	b.n	8006ca6 <HAL_DMA_Abort_IT+0xfa>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e011      	b.n	8006ca6 <HAL_DMA_Abort_IT+0xfa>
 8006c82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c86:	e00e      	b.n	8006ca6 <HAL_DMA_Abort_IT+0xfa>
 8006c88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006c8c:	e00b      	b.n	8006ca6 <HAL_DMA_Abort_IT+0xfa>
 8006c8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c92:	e008      	b.n	8006ca6 <HAL_DMA_Abort_IT+0xfa>
 8006c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c98:	e005      	b.n	8006ca6 <HAL_DMA_Abort_IT+0xfa>
 8006c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c9e:	e002      	b.n	8006ca6 <HAL_DMA_Abort_IT+0xfa>
 8006ca0:	2310      	movs	r3, #16
 8006ca2:	e000      	b.n	8006ca6 <HAL_DMA_Abort_IT+0xfa>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	4a43      	ldr	r2, [pc, #268]	; (8006db4 <HAL_DMA_Abort_IT+0x208>)
 8006ca8:	6053      	str	r3, [r2, #4]
 8006caa:	e057      	b.n	8006d5c <HAL_DMA_Abort_IT+0x1b0>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a36      	ldr	r2, [pc, #216]	; (8006d8c <HAL_DMA_Abort_IT+0x1e0>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d04f      	beq.n	8006d56 <HAL_DMA_Abort_IT+0x1aa>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a35      	ldr	r2, [pc, #212]	; (8006d90 <HAL_DMA_Abort_IT+0x1e4>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d048      	beq.n	8006d52 <HAL_DMA_Abort_IT+0x1a6>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a33      	ldr	r2, [pc, #204]	; (8006d94 <HAL_DMA_Abort_IT+0x1e8>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d040      	beq.n	8006d4c <HAL_DMA_Abort_IT+0x1a0>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a32      	ldr	r2, [pc, #200]	; (8006d98 <HAL_DMA_Abort_IT+0x1ec>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d038      	beq.n	8006d46 <HAL_DMA_Abort_IT+0x19a>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a30      	ldr	r2, [pc, #192]	; (8006d9c <HAL_DMA_Abort_IT+0x1f0>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d030      	beq.n	8006d40 <HAL_DMA_Abort_IT+0x194>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a2f      	ldr	r2, [pc, #188]	; (8006da0 <HAL_DMA_Abort_IT+0x1f4>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d028      	beq.n	8006d3a <HAL_DMA_Abort_IT+0x18e>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a26      	ldr	r2, [pc, #152]	; (8006d88 <HAL_DMA_Abort_IT+0x1dc>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d020      	beq.n	8006d34 <HAL_DMA_Abort_IT+0x188>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a2b      	ldr	r2, [pc, #172]	; (8006da4 <HAL_DMA_Abort_IT+0x1f8>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d019      	beq.n	8006d30 <HAL_DMA_Abort_IT+0x184>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a29      	ldr	r2, [pc, #164]	; (8006da8 <HAL_DMA_Abort_IT+0x1fc>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d012      	beq.n	8006d2c <HAL_DMA_Abort_IT+0x180>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a28      	ldr	r2, [pc, #160]	; (8006dac <HAL_DMA_Abort_IT+0x200>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d00a      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x17a>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a26      	ldr	r2, [pc, #152]	; (8006db0 <HAL_DMA_Abort_IT+0x204>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d102      	bne.n	8006d20 <HAL_DMA_Abort_IT+0x174>
 8006d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d1e:	e01b      	b.n	8006d58 <HAL_DMA_Abort_IT+0x1ac>
 8006d20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d24:	e018      	b.n	8006d58 <HAL_DMA_Abort_IT+0x1ac>
 8006d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d2a:	e015      	b.n	8006d58 <HAL_DMA_Abort_IT+0x1ac>
 8006d2c:	2310      	movs	r3, #16
 8006d2e:	e013      	b.n	8006d58 <HAL_DMA_Abort_IT+0x1ac>
 8006d30:	2301      	movs	r3, #1
 8006d32:	e011      	b.n	8006d58 <HAL_DMA_Abort_IT+0x1ac>
 8006d34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d38:	e00e      	b.n	8006d58 <HAL_DMA_Abort_IT+0x1ac>
 8006d3a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006d3e:	e00b      	b.n	8006d58 <HAL_DMA_Abort_IT+0x1ac>
 8006d40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d44:	e008      	b.n	8006d58 <HAL_DMA_Abort_IT+0x1ac>
 8006d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d4a:	e005      	b.n	8006d58 <HAL_DMA_Abort_IT+0x1ac>
 8006d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d50:	e002      	b.n	8006d58 <HAL_DMA_Abort_IT+0x1ac>
 8006d52:	2310      	movs	r3, #16
 8006d54:	e000      	b.n	8006d58 <HAL_DMA_Abort_IT+0x1ac>
 8006d56:	2301      	movs	r3, #1
 8006d58:	4a17      	ldr	r2, [pc, #92]	; (8006db8 <HAL_DMA_Abort_IT+0x20c>)
 8006d5a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d003      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	4798      	blx	r3
    } 
  }
  return status;
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	40020080 	.word	0x40020080
 8006d8c:	40020008 	.word	0x40020008
 8006d90:	4002001c 	.word	0x4002001c
 8006d94:	40020030 	.word	0x40020030
 8006d98:	40020044 	.word	0x40020044
 8006d9c:	40020058 	.word	0x40020058
 8006da0:	4002006c 	.word	0x4002006c
 8006da4:	40020408 	.word	0x40020408
 8006da8:	4002041c 	.word	0x4002041c
 8006dac:	40020430 	.word	0x40020430
 8006db0:	40020444 	.word	0x40020444
 8006db4:	40020400 	.word	0x40020400
 8006db8:	40020000 	.word	0x40020000

08006dbc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd8:	2204      	movs	r2, #4
 8006dda:	409a      	lsls	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4013      	ands	r3, r2
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 80f1 	beq.w	8006fc8 <HAL_DMA_IRQHandler+0x20c>
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f003 0304 	and.w	r3, r3, #4
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 80eb 	beq.w	8006fc8 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0320 	and.w	r3, r3, #32
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d107      	bne.n	8006e10 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 0204 	bic.w	r2, r2, #4
 8006e0e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	461a      	mov	r2, r3
 8006e16:	4b5f      	ldr	r3, [pc, #380]	; (8006f94 <HAL_DMA_IRQHandler+0x1d8>)
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d958      	bls.n	8006ece <HAL_DMA_IRQHandler+0x112>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a5d      	ldr	r2, [pc, #372]	; (8006f98 <HAL_DMA_IRQHandler+0x1dc>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d04f      	beq.n	8006ec6 <HAL_DMA_IRQHandler+0x10a>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a5c      	ldr	r2, [pc, #368]	; (8006f9c <HAL_DMA_IRQHandler+0x1e0>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d048      	beq.n	8006ec2 <HAL_DMA_IRQHandler+0x106>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a5a      	ldr	r2, [pc, #360]	; (8006fa0 <HAL_DMA_IRQHandler+0x1e4>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d040      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x100>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a59      	ldr	r2, [pc, #356]	; (8006fa4 <HAL_DMA_IRQHandler+0x1e8>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d038      	beq.n	8006eb6 <HAL_DMA_IRQHandler+0xfa>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a57      	ldr	r2, [pc, #348]	; (8006fa8 <HAL_DMA_IRQHandler+0x1ec>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d030      	beq.n	8006eb0 <HAL_DMA_IRQHandler+0xf4>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a56      	ldr	r2, [pc, #344]	; (8006fac <HAL_DMA_IRQHandler+0x1f0>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d028      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xee>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a4d      	ldr	r2, [pc, #308]	; (8006f94 <HAL_DMA_IRQHandler+0x1d8>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d020      	beq.n	8006ea4 <HAL_DMA_IRQHandler+0xe8>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a52      	ldr	r2, [pc, #328]	; (8006fb0 <HAL_DMA_IRQHandler+0x1f4>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d019      	beq.n	8006ea0 <HAL_DMA_IRQHandler+0xe4>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a50      	ldr	r2, [pc, #320]	; (8006fb4 <HAL_DMA_IRQHandler+0x1f8>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d012      	beq.n	8006e9c <HAL_DMA_IRQHandler+0xe0>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a4f      	ldr	r2, [pc, #316]	; (8006fb8 <HAL_DMA_IRQHandler+0x1fc>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d00a      	beq.n	8006e96 <HAL_DMA_IRQHandler+0xda>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a4d      	ldr	r2, [pc, #308]	; (8006fbc <HAL_DMA_IRQHandler+0x200>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d102      	bne.n	8006e90 <HAL_DMA_IRQHandler+0xd4>
 8006e8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e8e:	e01b      	b.n	8006ec8 <HAL_DMA_IRQHandler+0x10c>
 8006e90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006e94:	e018      	b.n	8006ec8 <HAL_DMA_IRQHandler+0x10c>
 8006e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e9a:	e015      	b.n	8006ec8 <HAL_DMA_IRQHandler+0x10c>
 8006e9c:	2340      	movs	r3, #64	; 0x40
 8006e9e:	e013      	b.n	8006ec8 <HAL_DMA_IRQHandler+0x10c>
 8006ea0:	2304      	movs	r3, #4
 8006ea2:	e011      	b.n	8006ec8 <HAL_DMA_IRQHandler+0x10c>
 8006ea4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006ea8:	e00e      	b.n	8006ec8 <HAL_DMA_IRQHandler+0x10c>
 8006eaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006eae:	e00b      	b.n	8006ec8 <HAL_DMA_IRQHandler+0x10c>
 8006eb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006eb4:	e008      	b.n	8006ec8 <HAL_DMA_IRQHandler+0x10c>
 8006eb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006eba:	e005      	b.n	8006ec8 <HAL_DMA_IRQHandler+0x10c>
 8006ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ec0:	e002      	b.n	8006ec8 <HAL_DMA_IRQHandler+0x10c>
 8006ec2:	2340      	movs	r3, #64	; 0x40
 8006ec4:	e000      	b.n	8006ec8 <HAL_DMA_IRQHandler+0x10c>
 8006ec6:	2304      	movs	r3, #4
 8006ec8:	4a3d      	ldr	r2, [pc, #244]	; (8006fc0 <HAL_DMA_IRQHandler+0x204>)
 8006eca:	6053      	str	r3, [r2, #4]
 8006ecc:	e057      	b.n	8006f7e <HAL_DMA_IRQHandler+0x1c2>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a31      	ldr	r2, [pc, #196]	; (8006f98 <HAL_DMA_IRQHandler+0x1dc>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d04f      	beq.n	8006f78 <HAL_DMA_IRQHandler+0x1bc>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a2f      	ldr	r2, [pc, #188]	; (8006f9c <HAL_DMA_IRQHandler+0x1e0>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d048      	beq.n	8006f74 <HAL_DMA_IRQHandler+0x1b8>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a2e      	ldr	r2, [pc, #184]	; (8006fa0 <HAL_DMA_IRQHandler+0x1e4>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d040      	beq.n	8006f6e <HAL_DMA_IRQHandler+0x1b2>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a2c      	ldr	r2, [pc, #176]	; (8006fa4 <HAL_DMA_IRQHandler+0x1e8>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d038      	beq.n	8006f68 <HAL_DMA_IRQHandler+0x1ac>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a2b      	ldr	r2, [pc, #172]	; (8006fa8 <HAL_DMA_IRQHandler+0x1ec>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d030      	beq.n	8006f62 <HAL_DMA_IRQHandler+0x1a6>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a29      	ldr	r2, [pc, #164]	; (8006fac <HAL_DMA_IRQHandler+0x1f0>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d028      	beq.n	8006f5c <HAL_DMA_IRQHandler+0x1a0>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a21      	ldr	r2, [pc, #132]	; (8006f94 <HAL_DMA_IRQHandler+0x1d8>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d020      	beq.n	8006f56 <HAL_DMA_IRQHandler+0x19a>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a25      	ldr	r2, [pc, #148]	; (8006fb0 <HAL_DMA_IRQHandler+0x1f4>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d019      	beq.n	8006f52 <HAL_DMA_IRQHandler+0x196>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a24      	ldr	r2, [pc, #144]	; (8006fb4 <HAL_DMA_IRQHandler+0x1f8>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d012      	beq.n	8006f4e <HAL_DMA_IRQHandler+0x192>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a22      	ldr	r2, [pc, #136]	; (8006fb8 <HAL_DMA_IRQHandler+0x1fc>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d00a      	beq.n	8006f48 <HAL_DMA_IRQHandler+0x18c>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a21      	ldr	r2, [pc, #132]	; (8006fbc <HAL_DMA_IRQHandler+0x200>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d102      	bne.n	8006f42 <HAL_DMA_IRQHandler+0x186>
 8006f3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f40:	e01b      	b.n	8006f7a <HAL_DMA_IRQHandler+0x1be>
 8006f42:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006f46:	e018      	b.n	8006f7a <HAL_DMA_IRQHandler+0x1be>
 8006f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f4c:	e015      	b.n	8006f7a <HAL_DMA_IRQHandler+0x1be>
 8006f4e:	2340      	movs	r3, #64	; 0x40
 8006f50:	e013      	b.n	8006f7a <HAL_DMA_IRQHandler+0x1be>
 8006f52:	2304      	movs	r3, #4
 8006f54:	e011      	b.n	8006f7a <HAL_DMA_IRQHandler+0x1be>
 8006f56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006f5a:	e00e      	b.n	8006f7a <HAL_DMA_IRQHandler+0x1be>
 8006f5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006f60:	e00b      	b.n	8006f7a <HAL_DMA_IRQHandler+0x1be>
 8006f62:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006f66:	e008      	b.n	8006f7a <HAL_DMA_IRQHandler+0x1be>
 8006f68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f6c:	e005      	b.n	8006f7a <HAL_DMA_IRQHandler+0x1be>
 8006f6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f72:	e002      	b.n	8006f7a <HAL_DMA_IRQHandler+0x1be>
 8006f74:	2340      	movs	r3, #64	; 0x40
 8006f76:	e000      	b.n	8006f7a <HAL_DMA_IRQHandler+0x1be>
 8006f78:	2304      	movs	r3, #4
 8006f7a:	4a12      	ldr	r2, [pc, #72]	; (8006fc4 <HAL_DMA_IRQHandler+0x208>)
 8006f7c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 8136 	beq.w	80071f4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006f90:	e130      	b.n	80071f4 <HAL_DMA_IRQHandler+0x438>
 8006f92:	bf00      	nop
 8006f94:	40020080 	.word	0x40020080
 8006f98:	40020008 	.word	0x40020008
 8006f9c:	4002001c 	.word	0x4002001c
 8006fa0:	40020030 	.word	0x40020030
 8006fa4:	40020044 	.word	0x40020044
 8006fa8:	40020058 	.word	0x40020058
 8006fac:	4002006c 	.word	0x4002006c
 8006fb0:	40020408 	.word	0x40020408
 8006fb4:	4002041c 	.word	0x4002041c
 8006fb8:	40020430 	.word	0x40020430
 8006fbc:	40020444 	.word	0x40020444
 8006fc0:	40020400 	.word	0x40020400
 8006fc4:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fcc:	2202      	movs	r2, #2
 8006fce:	409a      	lsls	r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 80dd 	beq.w	8007194 <HAL_DMA_IRQHandler+0x3d8>
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	f003 0302 	and.w	r3, r3, #2
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 80d7 	beq.w	8007194 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0320 	and.w	r3, r3, #32
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10b      	bne.n	800700c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f022 020a 	bic.w	r2, r2, #10
 8007002:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	461a      	mov	r2, r3
 8007012:	4b7b      	ldr	r3, [pc, #492]	; (8007200 <HAL_DMA_IRQHandler+0x444>)
 8007014:	429a      	cmp	r2, r3
 8007016:	d958      	bls.n	80070ca <HAL_DMA_IRQHandler+0x30e>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a79      	ldr	r2, [pc, #484]	; (8007204 <HAL_DMA_IRQHandler+0x448>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d04f      	beq.n	80070c2 <HAL_DMA_IRQHandler+0x306>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a78      	ldr	r2, [pc, #480]	; (8007208 <HAL_DMA_IRQHandler+0x44c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d048      	beq.n	80070be <HAL_DMA_IRQHandler+0x302>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a76      	ldr	r2, [pc, #472]	; (800720c <HAL_DMA_IRQHandler+0x450>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d040      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x2fc>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a75      	ldr	r2, [pc, #468]	; (8007210 <HAL_DMA_IRQHandler+0x454>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d038      	beq.n	80070b2 <HAL_DMA_IRQHandler+0x2f6>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a73      	ldr	r2, [pc, #460]	; (8007214 <HAL_DMA_IRQHandler+0x458>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d030      	beq.n	80070ac <HAL_DMA_IRQHandler+0x2f0>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a72      	ldr	r2, [pc, #456]	; (8007218 <HAL_DMA_IRQHandler+0x45c>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d028      	beq.n	80070a6 <HAL_DMA_IRQHandler+0x2ea>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a69      	ldr	r2, [pc, #420]	; (8007200 <HAL_DMA_IRQHandler+0x444>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d020      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x2e4>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a6e      	ldr	r2, [pc, #440]	; (800721c <HAL_DMA_IRQHandler+0x460>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d019      	beq.n	800709c <HAL_DMA_IRQHandler+0x2e0>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a6c      	ldr	r2, [pc, #432]	; (8007220 <HAL_DMA_IRQHandler+0x464>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d012      	beq.n	8007098 <HAL_DMA_IRQHandler+0x2dc>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a6b      	ldr	r2, [pc, #428]	; (8007224 <HAL_DMA_IRQHandler+0x468>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d00a      	beq.n	8007092 <HAL_DMA_IRQHandler+0x2d6>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a69      	ldr	r2, [pc, #420]	; (8007228 <HAL_DMA_IRQHandler+0x46c>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d102      	bne.n	800708c <HAL_DMA_IRQHandler+0x2d0>
 8007086:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800708a:	e01b      	b.n	80070c4 <HAL_DMA_IRQHandler+0x308>
 800708c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007090:	e018      	b.n	80070c4 <HAL_DMA_IRQHandler+0x308>
 8007092:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007096:	e015      	b.n	80070c4 <HAL_DMA_IRQHandler+0x308>
 8007098:	2320      	movs	r3, #32
 800709a:	e013      	b.n	80070c4 <HAL_DMA_IRQHandler+0x308>
 800709c:	2302      	movs	r3, #2
 800709e:	e011      	b.n	80070c4 <HAL_DMA_IRQHandler+0x308>
 80070a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070a4:	e00e      	b.n	80070c4 <HAL_DMA_IRQHandler+0x308>
 80070a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80070aa:	e00b      	b.n	80070c4 <HAL_DMA_IRQHandler+0x308>
 80070ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80070b0:	e008      	b.n	80070c4 <HAL_DMA_IRQHandler+0x308>
 80070b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070b6:	e005      	b.n	80070c4 <HAL_DMA_IRQHandler+0x308>
 80070b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070bc:	e002      	b.n	80070c4 <HAL_DMA_IRQHandler+0x308>
 80070be:	2320      	movs	r3, #32
 80070c0:	e000      	b.n	80070c4 <HAL_DMA_IRQHandler+0x308>
 80070c2:	2302      	movs	r3, #2
 80070c4:	4a59      	ldr	r2, [pc, #356]	; (800722c <HAL_DMA_IRQHandler+0x470>)
 80070c6:	6053      	str	r3, [r2, #4]
 80070c8:	e057      	b.n	800717a <HAL_DMA_IRQHandler+0x3be>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a4d      	ldr	r2, [pc, #308]	; (8007204 <HAL_DMA_IRQHandler+0x448>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d04f      	beq.n	8007174 <HAL_DMA_IRQHandler+0x3b8>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a4b      	ldr	r2, [pc, #300]	; (8007208 <HAL_DMA_IRQHandler+0x44c>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d048      	beq.n	8007170 <HAL_DMA_IRQHandler+0x3b4>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a4a      	ldr	r2, [pc, #296]	; (800720c <HAL_DMA_IRQHandler+0x450>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d040      	beq.n	800716a <HAL_DMA_IRQHandler+0x3ae>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a48      	ldr	r2, [pc, #288]	; (8007210 <HAL_DMA_IRQHandler+0x454>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d038      	beq.n	8007164 <HAL_DMA_IRQHandler+0x3a8>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a47      	ldr	r2, [pc, #284]	; (8007214 <HAL_DMA_IRQHandler+0x458>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d030      	beq.n	800715e <HAL_DMA_IRQHandler+0x3a2>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a45      	ldr	r2, [pc, #276]	; (8007218 <HAL_DMA_IRQHandler+0x45c>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d028      	beq.n	8007158 <HAL_DMA_IRQHandler+0x39c>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a3d      	ldr	r2, [pc, #244]	; (8007200 <HAL_DMA_IRQHandler+0x444>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d020      	beq.n	8007152 <HAL_DMA_IRQHandler+0x396>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a41      	ldr	r2, [pc, #260]	; (800721c <HAL_DMA_IRQHandler+0x460>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d019      	beq.n	800714e <HAL_DMA_IRQHandler+0x392>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a40      	ldr	r2, [pc, #256]	; (8007220 <HAL_DMA_IRQHandler+0x464>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d012      	beq.n	800714a <HAL_DMA_IRQHandler+0x38e>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a3e      	ldr	r2, [pc, #248]	; (8007224 <HAL_DMA_IRQHandler+0x468>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d00a      	beq.n	8007144 <HAL_DMA_IRQHandler+0x388>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a3d      	ldr	r2, [pc, #244]	; (8007228 <HAL_DMA_IRQHandler+0x46c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d102      	bne.n	800713e <HAL_DMA_IRQHandler+0x382>
 8007138:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800713c:	e01b      	b.n	8007176 <HAL_DMA_IRQHandler+0x3ba>
 800713e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007142:	e018      	b.n	8007176 <HAL_DMA_IRQHandler+0x3ba>
 8007144:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007148:	e015      	b.n	8007176 <HAL_DMA_IRQHandler+0x3ba>
 800714a:	2320      	movs	r3, #32
 800714c:	e013      	b.n	8007176 <HAL_DMA_IRQHandler+0x3ba>
 800714e:	2302      	movs	r3, #2
 8007150:	e011      	b.n	8007176 <HAL_DMA_IRQHandler+0x3ba>
 8007152:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007156:	e00e      	b.n	8007176 <HAL_DMA_IRQHandler+0x3ba>
 8007158:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800715c:	e00b      	b.n	8007176 <HAL_DMA_IRQHandler+0x3ba>
 800715e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007162:	e008      	b.n	8007176 <HAL_DMA_IRQHandler+0x3ba>
 8007164:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007168:	e005      	b.n	8007176 <HAL_DMA_IRQHandler+0x3ba>
 800716a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800716e:	e002      	b.n	8007176 <HAL_DMA_IRQHandler+0x3ba>
 8007170:	2320      	movs	r3, #32
 8007172:	e000      	b.n	8007176 <HAL_DMA_IRQHandler+0x3ba>
 8007174:	2302      	movs	r3, #2
 8007176:	4a2e      	ldr	r2, [pc, #184]	; (8007230 <HAL_DMA_IRQHandler+0x474>)
 8007178:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007186:	2b00      	cmp	r3, #0
 8007188:	d034      	beq.n	80071f4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007192:	e02f      	b.n	80071f4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007198:	2208      	movs	r2, #8
 800719a:	409a      	lsls	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4013      	ands	r3, r2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d028      	beq.n	80071f6 <HAL_DMA_IRQHandler+0x43a>
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	f003 0308 	and.w	r3, r3, #8
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d023      	beq.n	80071f6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f022 020e 	bic.w	r2, r2, #14
 80071bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c6:	2101      	movs	r1, #1
 80071c8:	fa01 f202 	lsl.w	r2, r1, r2
 80071cc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d004      	beq.n	80071f6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	4798      	blx	r3
    }
  }
  return;
 80071f4:	bf00      	nop
 80071f6:	bf00      	nop
}
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	40020080 	.word	0x40020080
 8007204:	40020008 	.word	0x40020008
 8007208:	4002001c 	.word	0x4002001c
 800720c:	40020030 	.word	0x40020030
 8007210:	40020044 	.word	0x40020044
 8007214:	40020058 	.word	0x40020058
 8007218:	4002006c 	.word	0x4002006c
 800721c:	40020408 	.word	0x40020408
 8007220:	4002041c 	.word	0x4002041c
 8007224:	40020430 	.word	0x40020430
 8007228:	40020444 	.word	0x40020444
 800722c:	40020400 	.word	0x40020400
 8007230:	40020000 	.word	0x40020000

08007234 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
 8007240:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724a:	2101      	movs	r1, #1
 800724c:	fa01 f202 	lsl.w	r2, r1, r2
 8007250:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	2b10      	cmp	r3, #16
 8007260:	d108      	bne.n	8007274 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007272:	e007      	b.n	8007284 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	60da      	str	r2, [r3, #12]
}
 8007284:	bf00      	nop
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	bc80      	pop	{r7}
 800728c:	4770      	bx	lr
	...

08007290 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007290:	b480      	push	{r7}
 8007292:	b08b      	sub	sp, #44	; 0x2c
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800729a:	2300      	movs	r3, #0
 800729c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800729e:	2300      	movs	r3, #0
 80072a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80072a2:	e179      	b.n	8007598 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80072a4:	2201      	movs	r2, #1
 80072a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a8:	fa02 f303 	lsl.w	r3, r2, r3
 80072ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	69fa      	ldr	r2, [r7, #28]
 80072b4:	4013      	ands	r3, r2
 80072b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80072b8:	69ba      	ldr	r2, [r7, #24]
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	429a      	cmp	r2, r3
 80072be:	f040 8168 	bne.w	8007592 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	4a96      	ldr	r2, [pc, #600]	; (8007520 <HAL_GPIO_Init+0x290>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d05e      	beq.n	800738a <HAL_GPIO_Init+0xfa>
 80072cc:	4a94      	ldr	r2, [pc, #592]	; (8007520 <HAL_GPIO_Init+0x290>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d875      	bhi.n	80073be <HAL_GPIO_Init+0x12e>
 80072d2:	4a94      	ldr	r2, [pc, #592]	; (8007524 <HAL_GPIO_Init+0x294>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d058      	beq.n	800738a <HAL_GPIO_Init+0xfa>
 80072d8:	4a92      	ldr	r2, [pc, #584]	; (8007524 <HAL_GPIO_Init+0x294>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d86f      	bhi.n	80073be <HAL_GPIO_Init+0x12e>
 80072de:	4a92      	ldr	r2, [pc, #584]	; (8007528 <HAL_GPIO_Init+0x298>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d052      	beq.n	800738a <HAL_GPIO_Init+0xfa>
 80072e4:	4a90      	ldr	r2, [pc, #576]	; (8007528 <HAL_GPIO_Init+0x298>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d869      	bhi.n	80073be <HAL_GPIO_Init+0x12e>
 80072ea:	4a90      	ldr	r2, [pc, #576]	; (800752c <HAL_GPIO_Init+0x29c>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d04c      	beq.n	800738a <HAL_GPIO_Init+0xfa>
 80072f0:	4a8e      	ldr	r2, [pc, #568]	; (800752c <HAL_GPIO_Init+0x29c>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d863      	bhi.n	80073be <HAL_GPIO_Init+0x12e>
 80072f6:	4a8e      	ldr	r2, [pc, #568]	; (8007530 <HAL_GPIO_Init+0x2a0>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d046      	beq.n	800738a <HAL_GPIO_Init+0xfa>
 80072fc:	4a8c      	ldr	r2, [pc, #560]	; (8007530 <HAL_GPIO_Init+0x2a0>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d85d      	bhi.n	80073be <HAL_GPIO_Init+0x12e>
 8007302:	2b12      	cmp	r3, #18
 8007304:	d82a      	bhi.n	800735c <HAL_GPIO_Init+0xcc>
 8007306:	2b12      	cmp	r3, #18
 8007308:	d859      	bhi.n	80073be <HAL_GPIO_Init+0x12e>
 800730a:	a201      	add	r2, pc, #4	; (adr r2, 8007310 <HAL_GPIO_Init+0x80>)
 800730c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007310:	0800738b 	.word	0x0800738b
 8007314:	08007365 	.word	0x08007365
 8007318:	08007377 	.word	0x08007377
 800731c:	080073b9 	.word	0x080073b9
 8007320:	080073bf 	.word	0x080073bf
 8007324:	080073bf 	.word	0x080073bf
 8007328:	080073bf 	.word	0x080073bf
 800732c:	080073bf 	.word	0x080073bf
 8007330:	080073bf 	.word	0x080073bf
 8007334:	080073bf 	.word	0x080073bf
 8007338:	080073bf 	.word	0x080073bf
 800733c:	080073bf 	.word	0x080073bf
 8007340:	080073bf 	.word	0x080073bf
 8007344:	080073bf 	.word	0x080073bf
 8007348:	080073bf 	.word	0x080073bf
 800734c:	080073bf 	.word	0x080073bf
 8007350:	080073bf 	.word	0x080073bf
 8007354:	0800736d 	.word	0x0800736d
 8007358:	08007381 	.word	0x08007381
 800735c:	4a75      	ldr	r2, [pc, #468]	; (8007534 <HAL_GPIO_Init+0x2a4>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d013      	beq.n	800738a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007362:	e02c      	b.n	80073be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	623b      	str	r3, [r7, #32]
          break;
 800736a:	e029      	b.n	80073c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	3304      	adds	r3, #4
 8007372:	623b      	str	r3, [r7, #32]
          break;
 8007374:	e024      	b.n	80073c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	3308      	adds	r3, #8
 800737c:	623b      	str	r3, [r7, #32]
          break;
 800737e:	e01f      	b.n	80073c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	330c      	adds	r3, #12
 8007386:	623b      	str	r3, [r7, #32]
          break;
 8007388:	e01a      	b.n	80073c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d102      	bne.n	8007398 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007392:	2304      	movs	r3, #4
 8007394:	623b      	str	r3, [r7, #32]
          break;
 8007396:	e013      	b.n	80073c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d105      	bne.n	80073ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80073a0:	2308      	movs	r3, #8
 80073a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	69fa      	ldr	r2, [r7, #28]
 80073a8:	611a      	str	r2, [r3, #16]
          break;
 80073aa:	e009      	b.n	80073c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80073ac:	2308      	movs	r3, #8
 80073ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	69fa      	ldr	r2, [r7, #28]
 80073b4:	615a      	str	r2, [r3, #20]
          break;
 80073b6:	e003      	b.n	80073c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80073b8:	2300      	movs	r3, #0
 80073ba:	623b      	str	r3, [r7, #32]
          break;
 80073bc:	e000      	b.n	80073c0 <HAL_GPIO_Init+0x130>
          break;
 80073be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	2bff      	cmp	r3, #255	; 0xff
 80073c4:	d801      	bhi.n	80073ca <HAL_GPIO_Init+0x13a>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	e001      	b.n	80073ce <HAL_GPIO_Init+0x13e>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	3304      	adds	r3, #4
 80073ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	2bff      	cmp	r3, #255	; 0xff
 80073d4:	d802      	bhi.n	80073dc <HAL_GPIO_Init+0x14c>
 80073d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	e002      	b.n	80073e2 <HAL_GPIO_Init+0x152>
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	3b08      	subs	r3, #8
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	210f      	movs	r1, #15
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	fa01 f303 	lsl.w	r3, r1, r3
 80073f0:	43db      	mvns	r3, r3
 80073f2:	401a      	ands	r2, r3
 80073f4:	6a39      	ldr	r1, [r7, #32]
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	fa01 f303 	lsl.w	r3, r1, r3
 80073fc:	431a      	orrs	r2, r3
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800740a:	2b00      	cmp	r3, #0
 800740c:	f000 80c1 	beq.w	8007592 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007410:	4b49      	ldr	r3, [pc, #292]	; (8007538 <HAL_GPIO_Init+0x2a8>)
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	4a48      	ldr	r2, [pc, #288]	; (8007538 <HAL_GPIO_Init+0x2a8>)
 8007416:	f043 0301 	orr.w	r3, r3, #1
 800741a:	6193      	str	r3, [r2, #24]
 800741c:	4b46      	ldr	r3, [pc, #280]	; (8007538 <HAL_GPIO_Init+0x2a8>)
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	f003 0301 	and.w	r3, r3, #1
 8007424:	60bb      	str	r3, [r7, #8]
 8007426:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007428:	4a44      	ldr	r2, [pc, #272]	; (800753c <HAL_GPIO_Init+0x2ac>)
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	089b      	lsrs	r3, r3, #2
 800742e:	3302      	adds	r3, #2
 8007430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007434:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	f003 0303 	and.w	r3, r3, #3
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	220f      	movs	r2, #15
 8007440:	fa02 f303 	lsl.w	r3, r2, r3
 8007444:	43db      	mvns	r3, r3
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	4013      	ands	r3, r2
 800744a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a3c      	ldr	r2, [pc, #240]	; (8007540 <HAL_GPIO_Init+0x2b0>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d01f      	beq.n	8007494 <HAL_GPIO_Init+0x204>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a3b      	ldr	r2, [pc, #236]	; (8007544 <HAL_GPIO_Init+0x2b4>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d019      	beq.n	8007490 <HAL_GPIO_Init+0x200>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a3a      	ldr	r2, [pc, #232]	; (8007548 <HAL_GPIO_Init+0x2b8>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d013      	beq.n	800748c <HAL_GPIO_Init+0x1fc>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a39      	ldr	r2, [pc, #228]	; (800754c <HAL_GPIO_Init+0x2bc>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d00d      	beq.n	8007488 <HAL_GPIO_Init+0x1f8>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a38      	ldr	r2, [pc, #224]	; (8007550 <HAL_GPIO_Init+0x2c0>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d007      	beq.n	8007484 <HAL_GPIO_Init+0x1f4>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a37      	ldr	r2, [pc, #220]	; (8007554 <HAL_GPIO_Init+0x2c4>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d101      	bne.n	8007480 <HAL_GPIO_Init+0x1f0>
 800747c:	2305      	movs	r3, #5
 800747e:	e00a      	b.n	8007496 <HAL_GPIO_Init+0x206>
 8007480:	2306      	movs	r3, #6
 8007482:	e008      	b.n	8007496 <HAL_GPIO_Init+0x206>
 8007484:	2304      	movs	r3, #4
 8007486:	e006      	b.n	8007496 <HAL_GPIO_Init+0x206>
 8007488:	2303      	movs	r3, #3
 800748a:	e004      	b.n	8007496 <HAL_GPIO_Init+0x206>
 800748c:	2302      	movs	r3, #2
 800748e:	e002      	b.n	8007496 <HAL_GPIO_Init+0x206>
 8007490:	2301      	movs	r3, #1
 8007492:	e000      	b.n	8007496 <HAL_GPIO_Init+0x206>
 8007494:	2300      	movs	r3, #0
 8007496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007498:	f002 0203 	and.w	r2, r2, #3
 800749c:	0092      	lsls	r2, r2, #2
 800749e:	4093      	lsls	r3, r2
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80074a6:	4925      	ldr	r1, [pc, #148]	; (800753c <HAL_GPIO_Init+0x2ac>)
 80074a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074aa:	089b      	lsrs	r3, r3, #2
 80074ac:	3302      	adds	r3, #2
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d006      	beq.n	80074ce <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80074c0:	4b25      	ldr	r3, [pc, #148]	; (8007558 <HAL_GPIO_Init+0x2c8>)
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	4924      	ldr	r1, [pc, #144]	; (8007558 <HAL_GPIO_Init+0x2c8>)
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	600b      	str	r3, [r1, #0]
 80074cc:	e006      	b.n	80074dc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80074ce:	4b22      	ldr	r3, [pc, #136]	; (8007558 <HAL_GPIO_Init+0x2c8>)
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	43db      	mvns	r3, r3
 80074d6:	4920      	ldr	r1, [pc, #128]	; (8007558 <HAL_GPIO_Init+0x2c8>)
 80074d8:	4013      	ands	r3, r2
 80074da:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d006      	beq.n	80074f6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80074e8:	4b1b      	ldr	r3, [pc, #108]	; (8007558 <HAL_GPIO_Init+0x2c8>)
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	491a      	ldr	r1, [pc, #104]	; (8007558 <HAL_GPIO_Init+0x2c8>)
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	604b      	str	r3, [r1, #4]
 80074f4:	e006      	b.n	8007504 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80074f6:	4b18      	ldr	r3, [pc, #96]	; (8007558 <HAL_GPIO_Init+0x2c8>)
 80074f8:	685a      	ldr	r2, [r3, #4]
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	43db      	mvns	r3, r3
 80074fe:	4916      	ldr	r1, [pc, #88]	; (8007558 <HAL_GPIO_Init+0x2c8>)
 8007500:	4013      	ands	r3, r2
 8007502:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d025      	beq.n	800755c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007510:	4b11      	ldr	r3, [pc, #68]	; (8007558 <HAL_GPIO_Init+0x2c8>)
 8007512:	689a      	ldr	r2, [r3, #8]
 8007514:	4910      	ldr	r1, [pc, #64]	; (8007558 <HAL_GPIO_Init+0x2c8>)
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	4313      	orrs	r3, r2
 800751a:	608b      	str	r3, [r1, #8]
 800751c:	e025      	b.n	800756a <HAL_GPIO_Init+0x2da>
 800751e:	bf00      	nop
 8007520:	10320000 	.word	0x10320000
 8007524:	10310000 	.word	0x10310000
 8007528:	10220000 	.word	0x10220000
 800752c:	10210000 	.word	0x10210000
 8007530:	10120000 	.word	0x10120000
 8007534:	10110000 	.word	0x10110000
 8007538:	40021000 	.word	0x40021000
 800753c:	40010000 	.word	0x40010000
 8007540:	40010800 	.word	0x40010800
 8007544:	40010c00 	.word	0x40010c00
 8007548:	40011000 	.word	0x40011000
 800754c:	40011400 	.word	0x40011400
 8007550:	40011800 	.word	0x40011800
 8007554:	40011c00 	.word	0x40011c00
 8007558:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800755c:	4b15      	ldr	r3, [pc, #84]	; (80075b4 <HAL_GPIO_Init+0x324>)
 800755e:	689a      	ldr	r2, [r3, #8]
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	43db      	mvns	r3, r3
 8007564:	4913      	ldr	r1, [pc, #76]	; (80075b4 <HAL_GPIO_Init+0x324>)
 8007566:	4013      	ands	r3, r2
 8007568:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d006      	beq.n	8007584 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007576:	4b0f      	ldr	r3, [pc, #60]	; (80075b4 <HAL_GPIO_Init+0x324>)
 8007578:	68da      	ldr	r2, [r3, #12]
 800757a:	490e      	ldr	r1, [pc, #56]	; (80075b4 <HAL_GPIO_Init+0x324>)
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	4313      	orrs	r3, r2
 8007580:	60cb      	str	r3, [r1, #12]
 8007582:	e006      	b.n	8007592 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007584:	4b0b      	ldr	r3, [pc, #44]	; (80075b4 <HAL_GPIO_Init+0x324>)
 8007586:	68da      	ldr	r2, [r3, #12]
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	43db      	mvns	r3, r3
 800758c:	4909      	ldr	r1, [pc, #36]	; (80075b4 <HAL_GPIO_Init+0x324>)
 800758e:	4013      	ands	r3, r2
 8007590:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8007592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007594:	3301      	adds	r3, #1
 8007596:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	fa22 f303 	lsr.w	r3, r2, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f47f ae7e 	bne.w	80072a4 <HAL_GPIO_Init+0x14>
  }
}
 80075a8:	bf00      	nop
 80075aa:	bf00      	nop
 80075ac:	372c      	adds	r7, #44	; 0x2c
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bc80      	pop	{r7}
 80075b2:	4770      	bx	lr
 80075b4:	40010400 	.word	0x40010400

080075b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b089      	sub	sp, #36	; 0x24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80075c2:	2300      	movs	r3, #0
 80075c4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80075c6:	e0a6      	b.n	8007716 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80075c8:	2201      	movs	r2, #1
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	fa02 f303 	lsl.w	r3, r2, r3
 80075d0:	683a      	ldr	r2, [r7, #0]
 80075d2:	4013      	ands	r3, r2
 80075d4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 8099 	beq.w	8007710 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80075de:	4a54      	ldr	r2, [pc, #336]	; (8007730 <HAL_GPIO_DeInit+0x178>)
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	089b      	lsrs	r3, r3, #2
 80075e4:	3302      	adds	r3, #2
 80075e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075ea:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	f003 0303 	and.w	r3, r3, #3
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	220f      	movs	r2, #15
 80075f6:	fa02 f303 	lsl.w	r3, r2, r3
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	4013      	ands	r3, r2
 80075fe:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a4c      	ldr	r2, [pc, #304]	; (8007734 <HAL_GPIO_DeInit+0x17c>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d01f      	beq.n	8007648 <HAL_GPIO_DeInit+0x90>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a4b      	ldr	r2, [pc, #300]	; (8007738 <HAL_GPIO_DeInit+0x180>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d019      	beq.n	8007644 <HAL_GPIO_DeInit+0x8c>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a4a      	ldr	r2, [pc, #296]	; (800773c <HAL_GPIO_DeInit+0x184>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d013      	beq.n	8007640 <HAL_GPIO_DeInit+0x88>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a49      	ldr	r2, [pc, #292]	; (8007740 <HAL_GPIO_DeInit+0x188>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d00d      	beq.n	800763c <HAL_GPIO_DeInit+0x84>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a48      	ldr	r2, [pc, #288]	; (8007744 <HAL_GPIO_DeInit+0x18c>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d007      	beq.n	8007638 <HAL_GPIO_DeInit+0x80>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a47      	ldr	r2, [pc, #284]	; (8007748 <HAL_GPIO_DeInit+0x190>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d101      	bne.n	8007634 <HAL_GPIO_DeInit+0x7c>
 8007630:	2305      	movs	r3, #5
 8007632:	e00a      	b.n	800764a <HAL_GPIO_DeInit+0x92>
 8007634:	2306      	movs	r3, #6
 8007636:	e008      	b.n	800764a <HAL_GPIO_DeInit+0x92>
 8007638:	2304      	movs	r3, #4
 800763a:	e006      	b.n	800764a <HAL_GPIO_DeInit+0x92>
 800763c:	2303      	movs	r3, #3
 800763e:	e004      	b.n	800764a <HAL_GPIO_DeInit+0x92>
 8007640:	2302      	movs	r3, #2
 8007642:	e002      	b.n	800764a <HAL_GPIO_DeInit+0x92>
 8007644:	2301      	movs	r3, #1
 8007646:	e000      	b.n	800764a <HAL_GPIO_DeInit+0x92>
 8007648:	2300      	movs	r3, #0
 800764a:	69fa      	ldr	r2, [r7, #28]
 800764c:	f002 0203 	and.w	r2, r2, #3
 8007650:	0092      	lsls	r2, r2, #2
 8007652:	4093      	lsls	r3, r2
 8007654:	697a      	ldr	r2, [r7, #20]
 8007656:	429a      	cmp	r2, r3
 8007658:	d132      	bne.n	80076c0 <HAL_GPIO_DeInit+0x108>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	f003 0303 	and.w	r3, r3, #3
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	220f      	movs	r2, #15
 8007664:	fa02 f303 	lsl.w	r3, r2, r3
 8007668:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800766a:	4a31      	ldr	r2, [pc, #196]	; (8007730 <HAL_GPIO_DeInit+0x178>)
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	089b      	lsrs	r3, r3, #2
 8007670:	3302      	adds	r3, #2
 8007672:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	43da      	mvns	r2, r3
 800767a:	482d      	ldr	r0, [pc, #180]	; (8007730 <HAL_GPIO_DeInit+0x178>)
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	089b      	lsrs	r3, r3, #2
 8007680:	400a      	ands	r2, r1
 8007682:	3302      	adds	r3, #2
 8007684:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8007688:	4b30      	ldr	r3, [pc, #192]	; (800774c <HAL_GPIO_DeInit+0x194>)
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	43db      	mvns	r3, r3
 8007690:	492e      	ldr	r1, [pc, #184]	; (800774c <HAL_GPIO_DeInit+0x194>)
 8007692:	4013      	ands	r3, r2
 8007694:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8007696:	4b2d      	ldr	r3, [pc, #180]	; (800774c <HAL_GPIO_DeInit+0x194>)
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	43db      	mvns	r3, r3
 800769e:	492b      	ldr	r1, [pc, #172]	; (800774c <HAL_GPIO_DeInit+0x194>)
 80076a0:	4013      	ands	r3, r2
 80076a2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80076a4:	4b29      	ldr	r3, [pc, #164]	; (800774c <HAL_GPIO_DeInit+0x194>)
 80076a6:	689a      	ldr	r2, [r3, #8]
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	43db      	mvns	r3, r3
 80076ac:	4927      	ldr	r1, [pc, #156]	; (800774c <HAL_GPIO_DeInit+0x194>)
 80076ae:	4013      	ands	r3, r2
 80076b0:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80076b2:	4b26      	ldr	r3, [pc, #152]	; (800774c <HAL_GPIO_DeInit+0x194>)
 80076b4:	68da      	ldr	r2, [r3, #12]
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	43db      	mvns	r3, r3
 80076ba:	4924      	ldr	r1, [pc, #144]	; (800774c <HAL_GPIO_DeInit+0x194>)
 80076bc:	4013      	ands	r3, r2
 80076be:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	2bff      	cmp	r3, #255	; 0xff
 80076c4:	d801      	bhi.n	80076ca <HAL_GPIO_DeInit+0x112>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	e001      	b.n	80076ce <HAL_GPIO_DeInit+0x116>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	3304      	adds	r3, #4
 80076ce:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	2bff      	cmp	r3, #255	; 0xff
 80076d4:	d802      	bhi.n	80076dc <HAL_GPIO_DeInit+0x124>
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	e002      	b.n	80076e2 <HAL_GPIO_DeInit+0x12a>
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	3b08      	subs	r3, #8
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	210f      	movs	r1, #15
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	fa01 f303 	lsl.w	r3, r1, r3
 80076f0:	43db      	mvns	r3, r3
 80076f2:	401a      	ands	r2, r3
 80076f4:	2104      	movs	r1, #4
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	fa01 f303 	lsl.w	r3, r1, r3
 80076fc:	431a      	orrs	r2, r3
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	68da      	ldr	r2, [r3, #12]
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	43db      	mvns	r3, r3
 800770a:	401a      	ands	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	3301      	adds	r3, #1
 8007714:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	fa22 f303 	lsr.w	r3, r2, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	f47f af52 	bne.w	80075c8 <HAL_GPIO_DeInit+0x10>
  }
}
 8007724:	bf00      	nop
 8007726:	bf00      	nop
 8007728:	3724      	adds	r7, #36	; 0x24
 800772a:	46bd      	mov	sp, r7
 800772c:	bc80      	pop	{r7}
 800772e:	4770      	bx	lr
 8007730:	40010000 	.word	0x40010000
 8007734:	40010800 	.word	0x40010800
 8007738:	40010c00 	.word	0x40010c00
 800773c:	40011000 	.word	0x40011000
 8007740:	40011400 	.word	0x40011400
 8007744:	40011800 	.word	0x40011800
 8007748:	40011c00 	.word	0x40011c00
 800774c:	40010400 	.word	0x40010400

08007750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	460b      	mov	r3, r1
 800775a:	807b      	strh	r3, [r7, #2]
 800775c:	4613      	mov	r3, r2
 800775e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007760:	787b      	ldrb	r3, [r7, #1]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007766:	887a      	ldrh	r2, [r7, #2]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800776c:	e003      	b.n	8007776 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800776e:	887b      	ldrh	r3, [r7, #2]
 8007770:	041a      	lsls	r2, r3, #16
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	611a      	str	r2, [r3, #16]
}
 8007776:	bf00      	nop
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	bc80      	pop	{r7}
 800777e:	4770      	bx	lr

08007780 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d101      	bne.n	8007792 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e12b      	b.n	80079ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d106      	bne.n	80077ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7fe f89e 	bl	80058e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2224      	movs	r2, #36	; 0x24
 80077b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f022 0201 	bic.w	r2, r2, #1
 80077c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80077e4:	f000 fffc 	bl	80087e0 <HAL_RCC_GetPCLK1Freq>
 80077e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	4a81      	ldr	r2, [pc, #516]	; (80079f4 <HAL_I2C_Init+0x274>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d807      	bhi.n	8007804 <HAL_I2C_Init+0x84>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4a80      	ldr	r2, [pc, #512]	; (80079f8 <HAL_I2C_Init+0x278>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	bf94      	ite	ls
 80077fc:	2301      	movls	r3, #1
 80077fe:	2300      	movhi	r3, #0
 8007800:	b2db      	uxtb	r3, r3
 8007802:	e006      	b.n	8007812 <HAL_I2C_Init+0x92>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	4a7d      	ldr	r2, [pc, #500]	; (80079fc <HAL_I2C_Init+0x27c>)
 8007808:	4293      	cmp	r3, r2
 800780a:	bf94      	ite	ls
 800780c:	2301      	movls	r3, #1
 800780e:	2300      	movhi	r3, #0
 8007810:	b2db      	uxtb	r3, r3
 8007812:	2b00      	cmp	r3, #0
 8007814:	d001      	beq.n	800781a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e0e7      	b.n	80079ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	4a78      	ldr	r2, [pc, #480]	; (8007a00 <HAL_I2C_Init+0x280>)
 800781e:	fba2 2303 	umull	r2, r3, r2, r3
 8007822:	0c9b      	lsrs	r3, r3, #18
 8007824:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68ba      	ldr	r2, [r7, #8]
 8007836:	430a      	orrs	r2, r1
 8007838:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	4a6a      	ldr	r2, [pc, #424]	; (80079f4 <HAL_I2C_Init+0x274>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d802      	bhi.n	8007854 <HAL_I2C_Init+0xd4>
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	3301      	adds	r3, #1
 8007852:	e009      	b.n	8007868 <HAL_I2C_Init+0xe8>
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800785a:	fb02 f303 	mul.w	r3, r2, r3
 800785e:	4a69      	ldr	r2, [pc, #420]	; (8007a04 <HAL_I2C_Init+0x284>)
 8007860:	fba2 2303 	umull	r2, r3, r2, r3
 8007864:	099b      	lsrs	r3, r3, #6
 8007866:	3301      	adds	r3, #1
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	6812      	ldr	r2, [r2, #0]
 800786c:	430b      	orrs	r3, r1
 800786e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	69db      	ldr	r3, [r3, #28]
 8007876:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800787a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	495c      	ldr	r1, [pc, #368]	; (80079f4 <HAL_I2C_Init+0x274>)
 8007884:	428b      	cmp	r3, r1
 8007886:	d819      	bhi.n	80078bc <HAL_I2C_Init+0x13c>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	1e59      	subs	r1, r3, #1
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	005b      	lsls	r3, r3, #1
 8007892:	fbb1 f3f3 	udiv	r3, r1, r3
 8007896:	1c59      	adds	r1, r3, #1
 8007898:	f640 73fc 	movw	r3, #4092	; 0xffc
 800789c:	400b      	ands	r3, r1
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00a      	beq.n	80078b8 <HAL_I2C_Init+0x138>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	1e59      	subs	r1, r3, #1
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	005b      	lsls	r3, r3, #1
 80078ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80078b0:	3301      	adds	r3, #1
 80078b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078b6:	e051      	b.n	800795c <HAL_I2C_Init+0x1dc>
 80078b8:	2304      	movs	r3, #4
 80078ba:	e04f      	b.n	800795c <HAL_I2C_Init+0x1dc>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d111      	bne.n	80078e8 <HAL_I2C_Init+0x168>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	1e58      	subs	r0, r3, #1
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6859      	ldr	r1, [r3, #4]
 80078cc:	460b      	mov	r3, r1
 80078ce:	005b      	lsls	r3, r3, #1
 80078d0:	440b      	add	r3, r1
 80078d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80078d6:	3301      	adds	r3, #1
 80078d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078dc:	2b00      	cmp	r3, #0
 80078de:	bf0c      	ite	eq
 80078e0:	2301      	moveq	r3, #1
 80078e2:	2300      	movne	r3, #0
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	e012      	b.n	800790e <HAL_I2C_Init+0x18e>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	1e58      	subs	r0, r3, #1
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6859      	ldr	r1, [r3, #4]
 80078f0:	460b      	mov	r3, r1
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	440b      	add	r3, r1
 80078f6:	0099      	lsls	r1, r3, #2
 80078f8:	440b      	add	r3, r1
 80078fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80078fe:	3301      	adds	r3, #1
 8007900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007904:	2b00      	cmp	r3, #0
 8007906:	bf0c      	ite	eq
 8007908:	2301      	moveq	r3, #1
 800790a:	2300      	movne	r3, #0
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <HAL_I2C_Init+0x196>
 8007912:	2301      	movs	r3, #1
 8007914:	e022      	b.n	800795c <HAL_I2C_Init+0x1dc>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10e      	bne.n	800793c <HAL_I2C_Init+0x1bc>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	1e58      	subs	r0, r3, #1
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6859      	ldr	r1, [r3, #4]
 8007926:	460b      	mov	r3, r1
 8007928:	005b      	lsls	r3, r3, #1
 800792a:	440b      	add	r3, r1
 800792c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007930:	3301      	adds	r3, #1
 8007932:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800793a:	e00f      	b.n	800795c <HAL_I2C_Init+0x1dc>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	1e58      	subs	r0, r3, #1
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6859      	ldr	r1, [r3, #4]
 8007944:	460b      	mov	r3, r1
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	440b      	add	r3, r1
 800794a:	0099      	lsls	r1, r3, #2
 800794c:	440b      	add	r3, r1
 800794e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007952:	3301      	adds	r3, #1
 8007954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007958:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800795c:	6879      	ldr	r1, [r7, #4]
 800795e:	6809      	ldr	r1, [r1, #0]
 8007960:	4313      	orrs	r3, r2
 8007962:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	69da      	ldr	r2, [r3, #28]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	431a      	orrs	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	430a      	orrs	r2, r1
 800797e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800798a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	6911      	ldr	r1, [r2, #16]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	68d2      	ldr	r2, [r2, #12]
 8007996:	4311      	orrs	r1, r2
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	6812      	ldr	r2, [r2, #0]
 800799c:	430b      	orrs	r3, r1
 800799e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	695a      	ldr	r2, [r3, #20]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	431a      	orrs	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	430a      	orrs	r2, r1
 80079ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f042 0201 	orr.w	r2, r2, #1
 80079ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2220      	movs	r2, #32
 80079d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	000186a0 	.word	0x000186a0
 80079f8:	001e847f 	.word	0x001e847f
 80079fc:	003d08ff 	.word	0x003d08ff
 8007a00:	431bde83 	.word	0x431bde83
 8007a04:	10624dd3 	.word	0x10624dd3

08007a08 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b088      	sub	sp, #32
 8007a0c:	af02      	add	r7, sp, #8
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	4608      	mov	r0, r1
 8007a12:	4611      	mov	r1, r2
 8007a14:	461a      	mov	r2, r3
 8007a16:	4603      	mov	r3, r0
 8007a18:	817b      	strh	r3, [r7, #10]
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	813b      	strh	r3, [r7, #8]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007a22:	f7fe fdcd 	bl	80065c0 <HAL_GetTick>
 8007a26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	2b20      	cmp	r3, #32
 8007a32:	f040 80d9 	bne.w	8007be8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	9300      	str	r3, [sp, #0]
 8007a3a:	2319      	movs	r3, #25
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	496d      	ldr	r1, [pc, #436]	; (8007bf4 <HAL_I2C_Mem_Write+0x1ec>)
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f000 f971 	bl	8007d28 <I2C_WaitOnFlagUntilTimeout>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d001      	beq.n	8007a50 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	e0cc      	b.n	8007bea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d101      	bne.n	8007a5e <HAL_I2C_Mem_Write+0x56>
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	e0c5      	b.n	8007bea <HAL_I2C_Mem_Write+0x1e2>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0301 	and.w	r3, r3, #1
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d007      	beq.n	8007a84 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f042 0201 	orr.w	r2, r2, #1
 8007a82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2221      	movs	r2, #33	; 0x21
 8007a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2240      	movs	r2, #64	; 0x40
 8007aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6a3a      	ldr	r2, [r7, #32]
 8007aae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4a4d      	ldr	r2, [pc, #308]	; (8007bf8 <HAL_I2C_Mem_Write+0x1f0>)
 8007ac4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ac6:	88f8      	ldrh	r0, [r7, #6]
 8007ac8:	893a      	ldrh	r2, [r7, #8]
 8007aca:	8979      	ldrh	r1, [r7, #10]
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	9301      	str	r3, [sp, #4]
 8007ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad2:	9300      	str	r3, [sp, #0]
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 f890 	bl	8007bfc <I2C_RequestMemoryWrite>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d052      	beq.n	8007b88 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e081      	b.n	8007bea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f000 f9f2 	bl	8007ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00d      	beq.n	8007b12 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afa:	2b04      	cmp	r3, #4
 8007afc:	d107      	bne.n	8007b0e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e06b      	b.n	8007bea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b16:	781a      	ldrb	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	695b      	ldr	r3, [r3, #20]
 8007b48:	f003 0304 	and.w	r3, r3, #4
 8007b4c:	2b04      	cmp	r3, #4
 8007b4e:	d11b      	bne.n	8007b88 <HAL_I2C_Mem_Write+0x180>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d017      	beq.n	8007b88 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5c:	781a      	ldrb	r2, [r3, #0]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b68:	1c5a      	adds	r2, r3, #1
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b72:	3b01      	subs	r3, #1
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	3b01      	subs	r3, #1
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1aa      	bne.n	8007ae6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f000 f9de 	bl	8007f56 <I2C_WaitOnBTFFlagUntilTimeout>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00d      	beq.n	8007bbc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba4:	2b04      	cmp	r3, #4
 8007ba6:	d107      	bne.n	8007bb8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bb6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e016      	b.n	8007bea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2220      	movs	r2, #32
 8007bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	e000      	b.n	8007bea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007be8:	2302      	movs	r3, #2
  }
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3718      	adds	r7, #24
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	00100002 	.word	0x00100002
 8007bf8:	ffff0000 	.word	0xffff0000

08007bfc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b088      	sub	sp, #32
 8007c00:	af02      	add	r7, sp, #8
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	4608      	mov	r0, r1
 8007c06:	4611      	mov	r1, r2
 8007c08:	461a      	mov	r2, r3
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	817b      	strh	r3, [r7, #10]
 8007c0e:	460b      	mov	r3, r1
 8007c10:	813b      	strh	r3, [r7, #8]
 8007c12:	4613      	mov	r3, r2
 8007c14:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f000 f878 	bl	8007d28 <I2C_WaitOnFlagUntilTimeout>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00d      	beq.n	8007c5a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c4c:	d103      	bne.n	8007c56 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e05f      	b.n	8007d1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007c5a:	897b      	ldrh	r3, [r7, #10]
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	461a      	mov	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007c68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6c:	6a3a      	ldr	r2, [r7, #32]
 8007c6e:	492d      	ldr	r1, [pc, #180]	; (8007d24 <I2C_RequestMemoryWrite+0x128>)
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f000 f8b0 	bl	8007dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d001      	beq.n	8007c80 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e04c      	b.n	8007d1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c80:	2300      	movs	r3, #0
 8007c82:	617b      	str	r3, [r7, #20]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	617b      	str	r3, [r7, #20]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	617b      	str	r3, [r7, #20]
 8007c94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c98:	6a39      	ldr	r1, [r7, #32]
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f000 f91a 	bl	8007ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00d      	beq.n	8007cc2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007caa:	2b04      	cmp	r3, #4
 8007cac:	d107      	bne.n	8007cbe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e02b      	b.n	8007d1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007cc2:	88fb      	ldrh	r3, [r7, #6]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d105      	bne.n	8007cd4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007cc8:	893b      	ldrh	r3, [r7, #8]
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	611a      	str	r2, [r3, #16]
 8007cd2:	e021      	b.n	8007d18 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007cd4:	893b      	ldrh	r3, [r7, #8]
 8007cd6:	0a1b      	lsrs	r3, r3, #8
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	b2da      	uxtb	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ce4:	6a39      	ldr	r1, [r7, #32]
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f000 f8f4 	bl	8007ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00d      	beq.n	8007d0e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf6:	2b04      	cmp	r3, #4
 8007cf8:	d107      	bne.n	8007d0a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e005      	b.n	8007d1a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d0e:	893b      	ldrh	r3, [r7, #8]
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	00010002 	.word	0x00010002

08007d28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	603b      	str	r3, [r7, #0]
 8007d34:	4613      	mov	r3, r2
 8007d36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d38:	e025      	b.n	8007d86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d40:	d021      	beq.n	8007d86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d42:	f7fe fc3d 	bl	80065c0 <HAL_GetTick>
 8007d46:	4602      	mov	r2, r0
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	683a      	ldr	r2, [r7, #0]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d302      	bcc.n	8007d58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d116      	bne.n	8007d86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2220      	movs	r2, #32
 8007d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d72:	f043 0220 	orr.w	r2, r3, #32
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e023      	b.n	8007dce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	0c1b      	lsrs	r3, r3, #16
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d10d      	bne.n	8007dac <I2C_WaitOnFlagUntilTimeout+0x84>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	43da      	mvns	r2, r3
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	bf0c      	ite	eq
 8007da2:	2301      	moveq	r3, #1
 8007da4:	2300      	movne	r3, #0
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	461a      	mov	r2, r3
 8007daa:	e00c      	b.n	8007dc6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	43da      	mvns	r2, r3
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	4013      	ands	r3, r2
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	bf0c      	ite	eq
 8007dbe:	2301      	moveq	r3, #1
 8007dc0:	2300      	movne	r3, #0
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	79fb      	ldrb	r3, [r7, #7]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d0b6      	beq.n	8007d3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b084      	sub	sp, #16
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	60f8      	str	r0, [r7, #12]
 8007dde:	60b9      	str	r1, [r7, #8]
 8007de0:	607a      	str	r2, [r7, #4]
 8007de2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007de4:	e051      	b.n	8007e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	695b      	ldr	r3, [r3, #20]
 8007dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007df4:	d123      	bne.n	8007e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2220      	movs	r2, #32
 8007e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2a:	f043 0204 	orr.w	r2, r3, #4
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e046      	b.n	8007ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e44:	d021      	beq.n	8007e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e46:	f7fe fbbb 	bl	80065c0 <HAL_GetTick>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d302      	bcc.n	8007e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d116      	bne.n	8007e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2220      	movs	r2, #32
 8007e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e76:	f043 0220 	orr.w	r2, r3, #32
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e020      	b.n	8007ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	0c1b      	lsrs	r3, r3, #16
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d10c      	bne.n	8007eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	695b      	ldr	r3, [r3, #20]
 8007e9a:	43da      	mvns	r2, r3
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	bf14      	ite	ne
 8007ea6:	2301      	movne	r3, #1
 8007ea8:	2300      	moveq	r3, #0
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	e00b      	b.n	8007ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	699b      	ldr	r3, [r3, #24]
 8007eb4:	43da      	mvns	r2, r3
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	4013      	ands	r3, r2
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	bf14      	ite	ne
 8007ec0:	2301      	movne	r3, #1
 8007ec2:	2300      	moveq	r3, #0
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d18d      	bne.n	8007de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ee0:	e02d      	b.n	8007f3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f000 f878 	bl	8007fd8 <I2C_IsAcknowledgeFailed>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d001      	beq.n	8007ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e02d      	b.n	8007f4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef8:	d021      	beq.n	8007f3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007efa:	f7fe fb61 	bl	80065c0 <HAL_GetTick>
 8007efe:	4602      	mov	r2, r0
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d302      	bcc.n	8007f10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d116      	bne.n	8007f3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2220      	movs	r2, #32
 8007f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2a:	f043 0220 	orr.w	r2, r3, #32
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e007      	b.n	8007f4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	695b      	ldr	r3, [r3, #20]
 8007f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f48:	2b80      	cmp	r3, #128	; 0x80
 8007f4a:	d1ca      	bne.n	8007ee2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b084      	sub	sp, #16
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	60f8      	str	r0, [r7, #12]
 8007f5e:	60b9      	str	r1, [r7, #8]
 8007f60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007f62:	e02d      	b.n	8007fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f000 f837 	bl	8007fd8 <I2C_IsAcknowledgeFailed>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d001      	beq.n	8007f74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e02d      	b.n	8007fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f7a:	d021      	beq.n	8007fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f7c:	f7fe fb20 	bl	80065c0 <HAL_GetTick>
 8007f80:	4602      	mov	r2, r0
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d302      	bcc.n	8007f92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d116      	bne.n	8007fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fac:	f043 0220 	orr.w	r2, r3, #32
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e007      	b.n	8007fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	695b      	ldr	r3, [r3, #20]
 8007fc6:	f003 0304 	and.w	r3, r3, #4
 8007fca:	2b04      	cmp	r3, #4
 8007fcc:	d1ca      	bne.n	8007f64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fee:	d11b      	bne.n	8008028 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ff8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2220      	movs	r2, #32
 8008004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008014:	f043 0204 	orr.w	r2, r3, #4
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	e000      	b.n	800802a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	bc80      	pop	{r7}
 8008032:	4770      	bx	lr

08008034 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e272      	b.n	800852c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 0301 	and.w	r3, r3, #1
 800804e:	2b00      	cmp	r3, #0
 8008050:	f000 8087 	beq.w	8008162 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008054:	4b92      	ldr	r3, [pc, #584]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	f003 030c 	and.w	r3, r3, #12
 800805c:	2b04      	cmp	r3, #4
 800805e:	d00c      	beq.n	800807a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008060:	4b8f      	ldr	r3, [pc, #572]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	f003 030c 	and.w	r3, r3, #12
 8008068:	2b08      	cmp	r3, #8
 800806a:	d112      	bne.n	8008092 <HAL_RCC_OscConfig+0x5e>
 800806c:	4b8c      	ldr	r3, [pc, #560]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008078:	d10b      	bne.n	8008092 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800807a:	4b89      	ldr	r3, [pc, #548]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d06c      	beq.n	8008160 <HAL_RCC_OscConfig+0x12c>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d168      	bne.n	8008160 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e24c      	b.n	800852c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800809a:	d106      	bne.n	80080aa <HAL_RCC_OscConfig+0x76>
 800809c:	4b80      	ldr	r3, [pc, #512]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a7f      	ldr	r2, [pc, #508]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 80080a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080a6:	6013      	str	r3, [r2, #0]
 80080a8:	e02e      	b.n	8008108 <HAL_RCC_OscConfig+0xd4>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10c      	bne.n	80080cc <HAL_RCC_OscConfig+0x98>
 80080b2:	4b7b      	ldr	r3, [pc, #492]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a7a      	ldr	r2, [pc, #488]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 80080b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080bc:	6013      	str	r3, [r2, #0]
 80080be:	4b78      	ldr	r3, [pc, #480]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a77      	ldr	r2, [pc, #476]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 80080c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080c8:	6013      	str	r3, [r2, #0]
 80080ca:	e01d      	b.n	8008108 <HAL_RCC_OscConfig+0xd4>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080d4:	d10c      	bne.n	80080f0 <HAL_RCC_OscConfig+0xbc>
 80080d6:	4b72      	ldr	r3, [pc, #456]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a71      	ldr	r2, [pc, #452]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 80080dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80080e0:	6013      	str	r3, [r2, #0]
 80080e2:	4b6f      	ldr	r3, [pc, #444]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a6e      	ldr	r2, [pc, #440]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 80080e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080ec:	6013      	str	r3, [r2, #0]
 80080ee:	e00b      	b.n	8008108 <HAL_RCC_OscConfig+0xd4>
 80080f0:	4b6b      	ldr	r3, [pc, #428]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a6a      	ldr	r2, [pc, #424]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 80080f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080fa:	6013      	str	r3, [r2, #0]
 80080fc:	4b68      	ldr	r3, [pc, #416]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a67      	ldr	r2, [pc, #412]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 8008102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008106:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d013      	beq.n	8008138 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008110:	f7fe fa56 	bl	80065c0 <HAL_GetTick>
 8008114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008116:	e008      	b.n	800812a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008118:	f7fe fa52 	bl	80065c0 <HAL_GetTick>
 800811c:	4602      	mov	r2, r0
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	2b64      	cmp	r3, #100	; 0x64
 8008124:	d901      	bls.n	800812a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e200      	b.n	800852c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800812a:	4b5d      	ldr	r3, [pc, #372]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008132:	2b00      	cmp	r3, #0
 8008134:	d0f0      	beq.n	8008118 <HAL_RCC_OscConfig+0xe4>
 8008136:	e014      	b.n	8008162 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008138:	f7fe fa42 	bl	80065c0 <HAL_GetTick>
 800813c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800813e:	e008      	b.n	8008152 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008140:	f7fe fa3e 	bl	80065c0 <HAL_GetTick>
 8008144:	4602      	mov	r2, r0
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	2b64      	cmp	r3, #100	; 0x64
 800814c:	d901      	bls.n	8008152 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e1ec      	b.n	800852c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008152:	4b53      	ldr	r3, [pc, #332]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1f0      	bne.n	8008140 <HAL_RCC_OscConfig+0x10c>
 800815e:	e000      	b.n	8008162 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 0302 	and.w	r3, r3, #2
 800816a:	2b00      	cmp	r3, #0
 800816c:	d063      	beq.n	8008236 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800816e:	4b4c      	ldr	r3, [pc, #304]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	f003 030c 	and.w	r3, r3, #12
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00b      	beq.n	8008192 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800817a:	4b49      	ldr	r3, [pc, #292]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f003 030c 	and.w	r3, r3, #12
 8008182:	2b08      	cmp	r3, #8
 8008184:	d11c      	bne.n	80081c0 <HAL_RCC_OscConfig+0x18c>
 8008186:	4b46      	ldr	r3, [pc, #280]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800818e:	2b00      	cmp	r3, #0
 8008190:	d116      	bne.n	80081c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008192:	4b43      	ldr	r3, [pc, #268]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 0302 	and.w	r3, r3, #2
 800819a:	2b00      	cmp	r3, #0
 800819c:	d005      	beq.n	80081aa <HAL_RCC_OscConfig+0x176>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d001      	beq.n	80081aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	e1c0      	b.n	800852c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081aa:	4b3d      	ldr	r3, [pc, #244]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	00db      	lsls	r3, r3, #3
 80081b8:	4939      	ldr	r1, [pc, #228]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081be:	e03a      	b.n	8008236 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d020      	beq.n	800820a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081c8:	4b36      	ldr	r3, [pc, #216]	; (80082a4 <HAL_RCC_OscConfig+0x270>)
 80081ca:	2201      	movs	r2, #1
 80081cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081ce:	f7fe f9f7 	bl	80065c0 <HAL_GetTick>
 80081d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081d4:	e008      	b.n	80081e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081d6:	f7fe f9f3 	bl	80065c0 <HAL_GetTick>
 80081da:	4602      	mov	r2, r0
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d901      	bls.n	80081e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80081e4:	2303      	movs	r3, #3
 80081e6:	e1a1      	b.n	800852c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081e8:	4b2d      	ldr	r3, [pc, #180]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 0302 	and.w	r3, r3, #2
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d0f0      	beq.n	80081d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081f4:	4b2a      	ldr	r3, [pc, #168]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	695b      	ldr	r3, [r3, #20]
 8008200:	00db      	lsls	r3, r3, #3
 8008202:	4927      	ldr	r1, [pc, #156]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 8008204:	4313      	orrs	r3, r2
 8008206:	600b      	str	r3, [r1, #0]
 8008208:	e015      	b.n	8008236 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800820a:	4b26      	ldr	r3, [pc, #152]	; (80082a4 <HAL_RCC_OscConfig+0x270>)
 800820c:	2200      	movs	r2, #0
 800820e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008210:	f7fe f9d6 	bl	80065c0 <HAL_GetTick>
 8008214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008216:	e008      	b.n	800822a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008218:	f7fe f9d2 	bl	80065c0 <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	2b02      	cmp	r3, #2
 8008224:	d901      	bls.n	800822a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e180      	b.n	800852c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800822a:	4b1d      	ldr	r3, [pc, #116]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 0302 	and.w	r3, r3, #2
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1f0      	bne.n	8008218 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 0308 	and.w	r3, r3, #8
 800823e:	2b00      	cmp	r3, #0
 8008240:	d03a      	beq.n	80082b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d019      	beq.n	800827e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800824a:	4b17      	ldr	r3, [pc, #92]	; (80082a8 <HAL_RCC_OscConfig+0x274>)
 800824c:	2201      	movs	r2, #1
 800824e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008250:	f7fe f9b6 	bl	80065c0 <HAL_GetTick>
 8008254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008256:	e008      	b.n	800826a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008258:	f7fe f9b2 	bl	80065c0 <HAL_GetTick>
 800825c:	4602      	mov	r2, r0
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	2b02      	cmp	r3, #2
 8008264:	d901      	bls.n	800826a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008266:	2303      	movs	r3, #3
 8008268:	e160      	b.n	800852c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800826a:	4b0d      	ldr	r3, [pc, #52]	; (80082a0 <HAL_RCC_OscConfig+0x26c>)
 800826c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826e:	f003 0302 	and.w	r3, r3, #2
 8008272:	2b00      	cmp	r3, #0
 8008274:	d0f0      	beq.n	8008258 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008276:	2001      	movs	r0, #1
 8008278:	f000 fada 	bl	8008830 <RCC_Delay>
 800827c:	e01c      	b.n	80082b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800827e:	4b0a      	ldr	r3, [pc, #40]	; (80082a8 <HAL_RCC_OscConfig+0x274>)
 8008280:	2200      	movs	r2, #0
 8008282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008284:	f7fe f99c 	bl	80065c0 <HAL_GetTick>
 8008288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800828a:	e00f      	b.n	80082ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800828c:	f7fe f998 	bl	80065c0 <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	2b02      	cmp	r3, #2
 8008298:	d908      	bls.n	80082ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e146      	b.n	800852c <HAL_RCC_OscConfig+0x4f8>
 800829e:	bf00      	nop
 80082a0:	40021000 	.word	0x40021000
 80082a4:	42420000 	.word	0x42420000
 80082a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082ac:	4b92      	ldr	r3, [pc, #584]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 80082ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b0:	f003 0302 	and.w	r3, r3, #2
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1e9      	bne.n	800828c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0304 	and.w	r3, r3, #4
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 80a6 	beq.w	8008412 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082c6:	2300      	movs	r3, #0
 80082c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082ca:	4b8b      	ldr	r3, [pc, #556]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 80082cc:	69db      	ldr	r3, [r3, #28]
 80082ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d10d      	bne.n	80082f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082d6:	4b88      	ldr	r3, [pc, #544]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 80082d8:	69db      	ldr	r3, [r3, #28]
 80082da:	4a87      	ldr	r2, [pc, #540]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 80082dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082e0:	61d3      	str	r3, [r2, #28]
 80082e2:	4b85      	ldr	r3, [pc, #532]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082ea:	60bb      	str	r3, [r7, #8]
 80082ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80082ee:	2301      	movs	r3, #1
 80082f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082f2:	4b82      	ldr	r3, [pc, #520]	; (80084fc <HAL_RCC_OscConfig+0x4c8>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d118      	bne.n	8008330 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80082fe:	4b7f      	ldr	r3, [pc, #508]	; (80084fc <HAL_RCC_OscConfig+0x4c8>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a7e      	ldr	r2, [pc, #504]	; (80084fc <HAL_RCC_OscConfig+0x4c8>)
 8008304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800830a:	f7fe f959 	bl	80065c0 <HAL_GetTick>
 800830e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008310:	e008      	b.n	8008324 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008312:	f7fe f955 	bl	80065c0 <HAL_GetTick>
 8008316:	4602      	mov	r2, r0
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	2b64      	cmp	r3, #100	; 0x64
 800831e:	d901      	bls.n	8008324 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008320:	2303      	movs	r3, #3
 8008322:	e103      	b.n	800852c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008324:	4b75      	ldr	r3, [pc, #468]	; (80084fc <HAL_RCC_OscConfig+0x4c8>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800832c:	2b00      	cmp	r3, #0
 800832e:	d0f0      	beq.n	8008312 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d106      	bne.n	8008346 <HAL_RCC_OscConfig+0x312>
 8008338:	4b6f      	ldr	r3, [pc, #444]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 800833a:	6a1b      	ldr	r3, [r3, #32]
 800833c:	4a6e      	ldr	r2, [pc, #440]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 800833e:	f043 0301 	orr.w	r3, r3, #1
 8008342:	6213      	str	r3, [r2, #32]
 8008344:	e02d      	b.n	80083a2 <HAL_RCC_OscConfig+0x36e>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10c      	bne.n	8008368 <HAL_RCC_OscConfig+0x334>
 800834e:	4b6a      	ldr	r3, [pc, #424]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	4a69      	ldr	r2, [pc, #420]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 8008354:	f023 0301 	bic.w	r3, r3, #1
 8008358:	6213      	str	r3, [r2, #32]
 800835a:	4b67      	ldr	r3, [pc, #412]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 800835c:	6a1b      	ldr	r3, [r3, #32]
 800835e:	4a66      	ldr	r2, [pc, #408]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 8008360:	f023 0304 	bic.w	r3, r3, #4
 8008364:	6213      	str	r3, [r2, #32]
 8008366:	e01c      	b.n	80083a2 <HAL_RCC_OscConfig+0x36e>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	2b05      	cmp	r3, #5
 800836e:	d10c      	bne.n	800838a <HAL_RCC_OscConfig+0x356>
 8008370:	4b61      	ldr	r3, [pc, #388]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 8008372:	6a1b      	ldr	r3, [r3, #32]
 8008374:	4a60      	ldr	r2, [pc, #384]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 8008376:	f043 0304 	orr.w	r3, r3, #4
 800837a:	6213      	str	r3, [r2, #32]
 800837c:	4b5e      	ldr	r3, [pc, #376]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 800837e:	6a1b      	ldr	r3, [r3, #32]
 8008380:	4a5d      	ldr	r2, [pc, #372]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 8008382:	f043 0301 	orr.w	r3, r3, #1
 8008386:	6213      	str	r3, [r2, #32]
 8008388:	e00b      	b.n	80083a2 <HAL_RCC_OscConfig+0x36e>
 800838a:	4b5b      	ldr	r3, [pc, #364]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 800838c:	6a1b      	ldr	r3, [r3, #32]
 800838e:	4a5a      	ldr	r2, [pc, #360]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 8008390:	f023 0301 	bic.w	r3, r3, #1
 8008394:	6213      	str	r3, [r2, #32]
 8008396:	4b58      	ldr	r3, [pc, #352]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	4a57      	ldr	r2, [pc, #348]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 800839c:	f023 0304 	bic.w	r3, r3, #4
 80083a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d015      	beq.n	80083d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083aa:	f7fe f909 	bl	80065c0 <HAL_GetTick>
 80083ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083b0:	e00a      	b.n	80083c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083b2:	f7fe f905 	bl	80065c0 <HAL_GetTick>
 80083b6:	4602      	mov	r2, r0
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d901      	bls.n	80083c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80083c4:	2303      	movs	r3, #3
 80083c6:	e0b1      	b.n	800852c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083c8:	4b4b      	ldr	r3, [pc, #300]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 80083ca:	6a1b      	ldr	r3, [r3, #32]
 80083cc:	f003 0302 	and.w	r3, r3, #2
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d0ee      	beq.n	80083b2 <HAL_RCC_OscConfig+0x37e>
 80083d4:	e014      	b.n	8008400 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083d6:	f7fe f8f3 	bl	80065c0 <HAL_GetTick>
 80083da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083dc:	e00a      	b.n	80083f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083de:	f7fe f8ef 	bl	80065c0 <HAL_GetTick>
 80083e2:	4602      	mov	r2, r0
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	1ad3      	subs	r3, r2, r3
 80083e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d901      	bls.n	80083f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80083f0:	2303      	movs	r3, #3
 80083f2:	e09b      	b.n	800852c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083f4:	4b40      	ldr	r3, [pc, #256]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 80083f6:	6a1b      	ldr	r3, [r3, #32]
 80083f8:	f003 0302 	and.w	r3, r3, #2
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1ee      	bne.n	80083de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008400:	7dfb      	ldrb	r3, [r7, #23]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d105      	bne.n	8008412 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008406:	4b3c      	ldr	r3, [pc, #240]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 8008408:	69db      	ldr	r3, [r3, #28]
 800840a:	4a3b      	ldr	r2, [pc, #236]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 800840c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008410:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	69db      	ldr	r3, [r3, #28]
 8008416:	2b00      	cmp	r3, #0
 8008418:	f000 8087 	beq.w	800852a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800841c:	4b36      	ldr	r3, [pc, #216]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	f003 030c 	and.w	r3, r3, #12
 8008424:	2b08      	cmp	r3, #8
 8008426:	d061      	beq.n	80084ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	69db      	ldr	r3, [r3, #28]
 800842c:	2b02      	cmp	r3, #2
 800842e:	d146      	bne.n	80084be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008430:	4b33      	ldr	r3, [pc, #204]	; (8008500 <HAL_RCC_OscConfig+0x4cc>)
 8008432:	2200      	movs	r2, #0
 8008434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008436:	f7fe f8c3 	bl	80065c0 <HAL_GetTick>
 800843a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800843c:	e008      	b.n	8008450 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800843e:	f7fe f8bf 	bl	80065c0 <HAL_GetTick>
 8008442:	4602      	mov	r2, r0
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	2b02      	cmp	r3, #2
 800844a:	d901      	bls.n	8008450 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800844c:	2303      	movs	r3, #3
 800844e:	e06d      	b.n	800852c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008450:	4b29      	ldr	r3, [pc, #164]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1f0      	bne.n	800843e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a1b      	ldr	r3, [r3, #32]
 8008460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008464:	d108      	bne.n	8008478 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008466:	4b24      	ldr	r3, [pc, #144]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	4921      	ldr	r1, [pc, #132]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 8008474:	4313      	orrs	r3, r2
 8008476:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008478:	4b1f      	ldr	r3, [pc, #124]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a19      	ldr	r1, [r3, #32]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008488:	430b      	orrs	r3, r1
 800848a:	491b      	ldr	r1, [pc, #108]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 800848c:	4313      	orrs	r3, r2
 800848e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008490:	4b1b      	ldr	r3, [pc, #108]	; (8008500 <HAL_RCC_OscConfig+0x4cc>)
 8008492:	2201      	movs	r2, #1
 8008494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008496:	f7fe f893 	bl	80065c0 <HAL_GetTick>
 800849a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800849c:	e008      	b.n	80084b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800849e:	f7fe f88f 	bl	80065c0 <HAL_GetTick>
 80084a2:	4602      	mov	r2, r0
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	1ad3      	subs	r3, r2, r3
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d901      	bls.n	80084b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80084ac:	2303      	movs	r3, #3
 80084ae:	e03d      	b.n	800852c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80084b0:	4b11      	ldr	r3, [pc, #68]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d0f0      	beq.n	800849e <HAL_RCC_OscConfig+0x46a>
 80084bc:	e035      	b.n	800852a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084be:	4b10      	ldr	r3, [pc, #64]	; (8008500 <HAL_RCC_OscConfig+0x4cc>)
 80084c0:	2200      	movs	r2, #0
 80084c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084c4:	f7fe f87c 	bl	80065c0 <HAL_GetTick>
 80084c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80084ca:	e008      	b.n	80084de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084cc:	f7fe f878 	bl	80065c0 <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d901      	bls.n	80084de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e026      	b.n	800852c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80084de:	4b06      	ldr	r3, [pc, #24]	; (80084f8 <HAL_RCC_OscConfig+0x4c4>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1f0      	bne.n	80084cc <HAL_RCC_OscConfig+0x498>
 80084ea:	e01e      	b.n	800852a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	69db      	ldr	r3, [r3, #28]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d107      	bne.n	8008504 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	e019      	b.n	800852c <HAL_RCC_OscConfig+0x4f8>
 80084f8:	40021000 	.word	0x40021000
 80084fc:	40007000 	.word	0x40007000
 8008500:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008504:	4b0b      	ldr	r3, [pc, #44]	; (8008534 <HAL_RCC_OscConfig+0x500>)
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a1b      	ldr	r3, [r3, #32]
 8008514:	429a      	cmp	r2, r3
 8008516:	d106      	bne.n	8008526 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008522:	429a      	cmp	r2, r3
 8008524:	d001      	beq.n	800852a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e000      	b.n	800852c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3718      	adds	r7, #24
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	40021000 	.word	0x40021000

08008538 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d101      	bne.n	800854c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	e0d0      	b.n	80086ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800854c:	4b6a      	ldr	r3, [pc, #424]	; (80086f8 <HAL_RCC_ClockConfig+0x1c0>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 0307 	and.w	r3, r3, #7
 8008554:	683a      	ldr	r2, [r7, #0]
 8008556:	429a      	cmp	r2, r3
 8008558:	d910      	bls.n	800857c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800855a:	4b67      	ldr	r3, [pc, #412]	; (80086f8 <HAL_RCC_ClockConfig+0x1c0>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f023 0207 	bic.w	r2, r3, #7
 8008562:	4965      	ldr	r1, [pc, #404]	; (80086f8 <HAL_RCC_ClockConfig+0x1c0>)
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	4313      	orrs	r3, r2
 8008568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800856a:	4b63      	ldr	r3, [pc, #396]	; (80086f8 <HAL_RCC_ClockConfig+0x1c0>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 0307 	and.w	r3, r3, #7
 8008572:	683a      	ldr	r2, [r7, #0]
 8008574:	429a      	cmp	r2, r3
 8008576:	d001      	beq.n	800857c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e0b8      	b.n	80086ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0302 	and.w	r3, r3, #2
 8008584:	2b00      	cmp	r3, #0
 8008586:	d020      	beq.n	80085ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 0304 	and.w	r3, r3, #4
 8008590:	2b00      	cmp	r3, #0
 8008592:	d005      	beq.n	80085a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008594:	4b59      	ldr	r3, [pc, #356]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	4a58      	ldr	r2, [pc, #352]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 800859a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800859e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 0308 	and.w	r3, r3, #8
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d005      	beq.n	80085b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80085ac:	4b53      	ldr	r3, [pc, #332]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	4a52      	ldr	r2, [pc, #328]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 80085b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80085b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085b8:	4b50      	ldr	r3, [pc, #320]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	494d      	ldr	r1, [pc, #308]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 80085c6:	4313      	orrs	r3, r2
 80085c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 0301 	and.w	r3, r3, #1
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d040      	beq.n	8008658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d107      	bne.n	80085ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085de:	4b47      	ldr	r3, [pc, #284]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d115      	bne.n	8008616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	e07f      	b.n	80086ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d107      	bne.n	8008606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085f6:	4b41      	ldr	r3, [pc, #260]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d109      	bne.n	8008616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e073      	b.n	80086ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008606:	4b3d      	ldr	r3, [pc, #244]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 0302 	and.w	r3, r3, #2
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e06b      	b.n	80086ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008616:	4b39      	ldr	r3, [pc, #228]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	f023 0203 	bic.w	r2, r3, #3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	4936      	ldr	r1, [pc, #216]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 8008624:	4313      	orrs	r3, r2
 8008626:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008628:	f7fd ffca 	bl	80065c0 <HAL_GetTick>
 800862c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800862e:	e00a      	b.n	8008646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008630:	f7fd ffc6 	bl	80065c0 <HAL_GetTick>
 8008634:	4602      	mov	r2, r0
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	f241 3288 	movw	r2, #5000	; 0x1388
 800863e:	4293      	cmp	r3, r2
 8008640:	d901      	bls.n	8008646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	e053      	b.n	80086ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008646:	4b2d      	ldr	r3, [pc, #180]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f003 020c 	and.w	r2, r3, #12
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	429a      	cmp	r2, r3
 8008656:	d1eb      	bne.n	8008630 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008658:	4b27      	ldr	r3, [pc, #156]	; (80086f8 <HAL_RCC_ClockConfig+0x1c0>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f003 0307 	and.w	r3, r3, #7
 8008660:	683a      	ldr	r2, [r7, #0]
 8008662:	429a      	cmp	r2, r3
 8008664:	d210      	bcs.n	8008688 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008666:	4b24      	ldr	r3, [pc, #144]	; (80086f8 <HAL_RCC_ClockConfig+0x1c0>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f023 0207 	bic.w	r2, r3, #7
 800866e:	4922      	ldr	r1, [pc, #136]	; (80086f8 <HAL_RCC_ClockConfig+0x1c0>)
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	4313      	orrs	r3, r2
 8008674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008676:	4b20      	ldr	r3, [pc, #128]	; (80086f8 <HAL_RCC_ClockConfig+0x1c0>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 0307 	and.w	r3, r3, #7
 800867e:	683a      	ldr	r2, [r7, #0]
 8008680:	429a      	cmp	r2, r3
 8008682:	d001      	beq.n	8008688 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e032      	b.n	80086ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 0304 	and.w	r3, r3, #4
 8008690:	2b00      	cmp	r3, #0
 8008692:	d008      	beq.n	80086a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008694:	4b19      	ldr	r3, [pc, #100]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	4916      	ldr	r1, [pc, #88]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 0308 	and.w	r3, r3, #8
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d009      	beq.n	80086c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80086b2:	4b12      	ldr	r3, [pc, #72]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	00db      	lsls	r3, r3, #3
 80086c0:	490e      	ldr	r1, [pc, #56]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 80086c2:	4313      	orrs	r3, r2
 80086c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80086c6:	f000 f821 	bl	800870c <HAL_RCC_GetSysClockFreq>
 80086ca:	4602      	mov	r2, r0
 80086cc:	4b0b      	ldr	r3, [pc, #44]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	091b      	lsrs	r3, r3, #4
 80086d2:	f003 030f 	and.w	r3, r3, #15
 80086d6:	490a      	ldr	r1, [pc, #40]	; (8008700 <HAL_RCC_ClockConfig+0x1c8>)
 80086d8:	5ccb      	ldrb	r3, [r1, r3]
 80086da:	fa22 f303 	lsr.w	r3, r2, r3
 80086de:	4a09      	ldr	r2, [pc, #36]	; (8008704 <HAL_RCC_ClockConfig+0x1cc>)
 80086e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80086e2:	4b09      	ldr	r3, [pc, #36]	; (8008708 <HAL_RCC_ClockConfig+0x1d0>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7fd ff28 	bl	800653c <HAL_InitTick>

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	40022000 	.word	0x40022000
 80086fc:	40021000 	.word	0x40021000
 8008700:	0800d74c 	.word	0x0800d74c
 8008704:	20000018 	.word	0x20000018
 8008708:	2000001c 	.word	0x2000001c

0800870c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800870c:	b490      	push	{r4, r7}
 800870e:	b08a      	sub	sp, #40	; 0x28
 8008710:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008712:	4b29      	ldr	r3, [pc, #164]	; (80087b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8008714:	1d3c      	adds	r4, r7, #4
 8008716:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008718:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800871c:	f240 2301 	movw	r3, #513	; 0x201
 8008720:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008722:	2300      	movs	r3, #0
 8008724:	61fb      	str	r3, [r7, #28]
 8008726:	2300      	movs	r3, #0
 8008728:	61bb      	str	r3, [r7, #24]
 800872a:	2300      	movs	r3, #0
 800872c:	627b      	str	r3, [r7, #36]	; 0x24
 800872e:	2300      	movs	r3, #0
 8008730:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008732:	2300      	movs	r3, #0
 8008734:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008736:	4b21      	ldr	r3, [pc, #132]	; (80087bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	f003 030c 	and.w	r3, r3, #12
 8008742:	2b04      	cmp	r3, #4
 8008744:	d002      	beq.n	800874c <HAL_RCC_GetSysClockFreq+0x40>
 8008746:	2b08      	cmp	r3, #8
 8008748:	d003      	beq.n	8008752 <HAL_RCC_GetSysClockFreq+0x46>
 800874a:	e02b      	b.n	80087a4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800874c:	4b1c      	ldr	r3, [pc, #112]	; (80087c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800874e:	623b      	str	r3, [r7, #32]
      break;
 8008750:	e02b      	b.n	80087aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	0c9b      	lsrs	r3, r3, #18
 8008756:	f003 030f 	and.w	r3, r3, #15
 800875a:	3328      	adds	r3, #40	; 0x28
 800875c:	443b      	add	r3, r7
 800875e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008762:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800876a:	2b00      	cmp	r3, #0
 800876c:	d012      	beq.n	8008794 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800876e:	4b13      	ldr	r3, [pc, #76]	; (80087bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	0c5b      	lsrs	r3, r3, #17
 8008774:	f003 0301 	and.w	r3, r3, #1
 8008778:	3328      	adds	r3, #40	; 0x28
 800877a:	443b      	add	r3, r7
 800877c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008780:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	4a0e      	ldr	r2, [pc, #56]	; (80087c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008786:	fb03 f202 	mul.w	r2, r3, r2
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008790:	627b      	str	r3, [r7, #36]	; 0x24
 8008792:	e004      	b.n	800879e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	4a0b      	ldr	r2, [pc, #44]	; (80087c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008798:	fb02 f303 	mul.w	r3, r2, r3
 800879c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800879e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a0:	623b      	str	r3, [r7, #32]
      break;
 80087a2:	e002      	b.n	80087aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80087a4:	4b08      	ldr	r3, [pc, #32]	; (80087c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80087a6:	623b      	str	r3, [r7, #32]
      break;
 80087a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80087aa:	6a3b      	ldr	r3, [r7, #32]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3728      	adds	r7, #40	; 0x28
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bc90      	pop	{r4, r7}
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	0800d138 	.word	0x0800d138
 80087bc:	40021000 	.word	0x40021000
 80087c0:	00f42400 	.word	0x00f42400
 80087c4:	003d0900 	.word	0x003d0900
 80087c8:	007a1200 	.word	0x007a1200

080087cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087cc:	b480      	push	{r7}
 80087ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087d0:	4b02      	ldr	r3, [pc, #8]	; (80087dc <HAL_RCC_GetHCLKFreq+0x10>)
 80087d2:	681b      	ldr	r3, [r3, #0]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bc80      	pop	{r7}
 80087da:	4770      	bx	lr
 80087dc:	20000018 	.word	0x20000018

080087e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80087e4:	f7ff fff2 	bl	80087cc <HAL_RCC_GetHCLKFreq>
 80087e8:	4602      	mov	r2, r0
 80087ea:	4b05      	ldr	r3, [pc, #20]	; (8008800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	0a1b      	lsrs	r3, r3, #8
 80087f0:	f003 0307 	and.w	r3, r3, #7
 80087f4:	4903      	ldr	r1, [pc, #12]	; (8008804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80087f6:	5ccb      	ldrb	r3, [r1, r3]
 80087f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	40021000 	.word	0x40021000
 8008804:	0800d75c 	.word	0x0800d75c

08008808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800880c:	f7ff ffde 	bl	80087cc <HAL_RCC_GetHCLKFreq>
 8008810:	4602      	mov	r2, r0
 8008812:	4b05      	ldr	r3, [pc, #20]	; (8008828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	0adb      	lsrs	r3, r3, #11
 8008818:	f003 0307 	and.w	r3, r3, #7
 800881c:	4903      	ldr	r1, [pc, #12]	; (800882c <HAL_RCC_GetPCLK2Freq+0x24>)
 800881e:	5ccb      	ldrb	r3, [r1, r3]
 8008820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008824:	4618      	mov	r0, r3
 8008826:	bd80      	pop	{r7, pc}
 8008828:	40021000 	.word	0x40021000
 800882c:	0800d75c 	.word	0x0800d75c

08008830 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008838:	4b0a      	ldr	r3, [pc, #40]	; (8008864 <RCC_Delay+0x34>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a0a      	ldr	r2, [pc, #40]	; (8008868 <RCC_Delay+0x38>)
 800883e:	fba2 2303 	umull	r2, r3, r2, r3
 8008842:	0a5b      	lsrs	r3, r3, #9
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	fb02 f303 	mul.w	r3, r2, r3
 800884a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800884c:	bf00      	nop
  }
  while (Delay --);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	1e5a      	subs	r2, r3, #1
 8008852:	60fa      	str	r2, [r7, #12]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d1f9      	bne.n	800884c <RCC_Delay+0x1c>
}
 8008858:	bf00      	nop
 800885a:	bf00      	nop
 800885c:	3714      	adds	r7, #20
 800885e:	46bd      	mov	sp, r7
 8008860:	bc80      	pop	{r7}
 8008862:	4770      	bx	lr
 8008864:	20000018 	.word	0x20000018
 8008868:	10624dd3 	.word	0x10624dd3

0800886c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d101      	bne.n	800887e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e041      	b.n	8008902 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008884:	b2db      	uxtb	r3, r3
 8008886:	2b00      	cmp	r3, #0
 8008888:	d106      	bne.n	8008898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7fd f878 	bl	8005988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2202      	movs	r2, #2
 800889c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	3304      	adds	r3, #4
 80088a8:	4619      	mov	r1, r3
 80088aa:	4610      	mov	r0, r2
 80088ac:	f000 fd88 	bl	80093c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	3708      	adds	r7, #8
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
	...

0800890c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800891a:	b2db      	uxtb	r3, r3
 800891c:	2b01      	cmp	r3, #1
 800891e:	d001      	beq.n	8008924 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	e044      	b.n	80089ae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2202      	movs	r2, #2
 8008928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68da      	ldr	r2, [r3, #12]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f042 0201 	orr.w	r2, r2, #1
 800893a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a1d      	ldr	r2, [pc, #116]	; (80089b8 <HAL_TIM_Base_Start_IT+0xac>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d018      	beq.n	8008978 <HAL_TIM_Base_Start_IT+0x6c>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a1c      	ldr	r2, [pc, #112]	; (80089bc <HAL_TIM_Base_Start_IT+0xb0>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d013      	beq.n	8008978 <HAL_TIM_Base_Start_IT+0x6c>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008958:	d00e      	beq.n	8008978 <HAL_TIM_Base_Start_IT+0x6c>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a18      	ldr	r2, [pc, #96]	; (80089c0 <HAL_TIM_Base_Start_IT+0xb4>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d009      	beq.n	8008978 <HAL_TIM_Base_Start_IT+0x6c>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a16      	ldr	r2, [pc, #88]	; (80089c4 <HAL_TIM_Base_Start_IT+0xb8>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d004      	beq.n	8008978 <HAL_TIM_Base_Start_IT+0x6c>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a15      	ldr	r2, [pc, #84]	; (80089c8 <HAL_TIM_Base_Start_IT+0xbc>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d111      	bne.n	800899c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	f003 0307 	and.w	r3, r3, #7
 8008982:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2b06      	cmp	r3, #6
 8008988:	d010      	beq.n	80089ac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f042 0201 	orr.w	r2, r2, #1
 8008998:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800899a:	e007      	b.n	80089ac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f042 0201 	orr.w	r2, r2, #1
 80089aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3714      	adds	r7, #20
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bc80      	pop	{r7}
 80089b6:	4770      	bx	lr
 80089b8:	40012c00 	.word	0x40012c00
 80089bc:	40013400 	.word	0x40013400
 80089c0:	40000400 	.word	0x40000400
 80089c4:	40000800 	.word	0x40000800
 80089c8:	40000c00 	.word	0x40000c00

080089cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d101      	bne.n	80089de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e041      	b.n	8008a62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d106      	bne.n	80089f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f839 	bl	8008a6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2202      	movs	r2, #2
 80089fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	3304      	adds	r3, #4
 8008a08:	4619      	mov	r1, r3
 8008a0a:	4610      	mov	r0, r2
 8008a0c:	f000 fcd8 	bl	80093c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008a6a:	b480      	push	{r7}
 8008a6c:	b083      	sub	sp, #12
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008a72:	bf00      	nop
 8008a74:	370c      	adds	r7, #12
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bc80      	pop	{r7}
 8008a7a:	4770      	bx	lr

08008a7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d109      	bne.n	8008aa0 <HAL_TIM_PWM_Start+0x24>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	bf14      	ite	ne
 8008a98:	2301      	movne	r3, #1
 8008a9a:	2300      	moveq	r3, #0
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	e022      	b.n	8008ae6 <HAL_TIM_PWM_Start+0x6a>
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	2b04      	cmp	r3, #4
 8008aa4:	d109      	bne.n	8008aba <HAL_TIM_PWM_Start+0x3e>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	bf14      	ite	ne
 8008ab2:	2301      	movne	r3, #1
 8008ab4:	2300      	moveq	r3, #0
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	e015      	b.n	8008ae6 <HAL_TIM_PWM_Start+0x6a>
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	2b08      	cmp	r3, #8
 8008abe:	d109      	bne.n	8008ad4 <HAL_TIM_PWM_Start+0x58>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	bf14      	ite	ne
 8008acc:	2301      	movne	r3, #1
 8008ace:	2300      	moveq	r3, #0
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	e008      	b.n	8008ae6 <HAL_TIM_PWM_Start+0x6a>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	bf14      	ite	ne
 8008ae0:	2301      	movne	r3, #1
 8008ae2:	2300      	moveq	r3, #0
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e072      	b.n	8008bd4 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d104      	bne.n	8008afe <HAL_TIM_PWM_Start+0x82>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2202      	movs	r2, #2
 8008af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008afc:	e013      	b.n	8008b26 <HAL_TIM_PWM_Start+0xaa>
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	2b04      	cmp	r3, #4
 8008b02:	d104      	bne.n	8008b0e <HAL_TIM_PWM_Start+0x92>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2202      	movs	r2, #2
 8008b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b0c:	e00b      	b.n	8008b26 <HAL_TIM_PWM_Start+0xaa>
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	2b08      	cmp	r3, #8
 8008b12:	d104      	bne.n	8008b1e <HAL_TIM_PWM_Start+0xa2>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2202      	movs	r2, #2
 8008b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b1c:	e003      	b.n	8008b26 <HAL_TIM_PWM_Start+0xaa>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2202      	movs	r2, #2
 8008b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	6839      	ldr	r1, [r7, #0]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 ff02 	bl	8009938 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a28      	ldr	r2, [pc, #160]	; (8008bdc <HAL_TIM_PWM_Start+0x160>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d004      	beq.n	8008b48 <HAL_TIM_PWM_Start+0xcc>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a27      	ldr	r2, [pc, #156]	; (8008be0 <HAL_TIM_PWM_Start+0x164>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d101      	bne.n	8008b4c <HAL_TIM_PWM_Start+0xd0>
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e000      	b.n	8008b4e <HAL_TIM_PWM_Start+0xd2>
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d007      	beq.n	8008b62 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a1d      	ldr	r2, [pc, #116]	; (8008bdc <HAL_TIM_PWM_Start+0x160>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d018      	beq.n	8008b9e <HAL_TIM_PWM_Start+0x122>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a1b      	ldr	r2, [pc, #108]	; (8008be0 <HAL_TIM_PWM_Start+0x164>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d013      	beq.n	8008b9e <HAL_TIM_PWM_Start+0x122>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b7e:	d00e      	beq.n	8008b9e <HAL_TIM_PWM_Start+0x122>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a17      	ldr	r2, [pc, #92]	; (8008be4 <HAL_TIM_PWM_Start+0x168>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d009      	beq.n	8008b9e <HAL_TIM_PWM_Start+0x122>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a16      	ldr	r2, [pc, #88]	; (8008be8 <HAL_TIM_PWM_Start+0x16c>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d004      	beq.n	8008b9e <HAL_TIM_PWM_Start+0x122>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a14      	ldr	r2, [pc, #80]	; (8008bec <HAL_TIM_PWM_Start+0x170>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d111      	bne.n	8008bc2 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	f003 0307 	and.w	r3, r3, #7
 8008ba8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2b06      	cmp	r3, #6
 8008bae:	d010      	beq.n	8008bd2 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f042 0201 	orr.w	r2, r2, #1
 8008bbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bc0:	e007      	b.n	8008bd2 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f042 0201 	orr.w	r2, r2, #1
 8008bd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	40012c00 	.word	0x40012c00
 8008be0:	40013400 	.word	0x40013400
 8008be4:	40000400 	.word	0x40000400
 8008be8:	40000800 	.word	0x40000800
 8008bec:	40000c00 	.word	0x40000c00

08008bf0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b086      	sub	sp, #24
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d101      	bne.n	8008c04 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	e093      	b.n	8008d2c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d106      	bne.n	8008c1e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f7fc ff1f 	bl	8005a5c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2202      	movs	r2, #2
 8008c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	6812      	ldr	r2, [r2, #0]
 8008c30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c34:	f023 0307 	bic.w	r3, r3, #7
 8008c38:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	3304      	adds	r3, #4
 8008c42:	4619      	mov	r1, r3
 8008c44:	4610      	mov	r0, r2
 8008c46:	f000 fbbb 	bl	80093c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	6a1b      	ldr	r3, [r3, #32]
 8008c60:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	697a      	ldr	r2, [r7, #20]
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c72:	f023 0303 	bic.w	r3, r3, #3
 8008c76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	689a      	ldr	r2, [r3, #8]
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	021b      	lsls	r3, r3, #8
 8008c82:	4313      	orrs	r3, r2
 8008c84:	693a      	ldr	r2, [r7, #16]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008c90:	f023 030c 	bic.w	r3, r3, #12
 8008c94:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ca0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	68da      	ldr	r2, [r3, #12]
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	69db      	ldr	r3, [r3, #28]
 8008caa:	021b      	lsls	r3, r3, #8
 8008cac:	4313      	orrs	r3, r2
 8008cae:	693a      	ldr	r2, [r7, #16]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	011a      	lsls	r2, r3, #4
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	6a1b      	ldr	r3, [r3, #32]
 8008cbe:	031b      	lsls	r3, r3, #12
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008cce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	685a      	ldr	r2, [r3, #4]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	695b      	ldr	r3, [r3, #20]
 8008cd8:	011b      	lsls	r3, r3, #4
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	697a      	ldr	r2, [r7, #20]
 8008ce8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	693a      	ldr	r2, [r7, #16]
 8008cf0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2201      	movs	r2, #1
 8008d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3718      	adds	r7, #24
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d44:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008d4c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d54:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008d5c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d110      	bne.n	8008d86 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d64:	7bfb      	ldrb	r3, [r7, #15]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d102      	bne.n	8008d70 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d6a:	7b7b      	ldrb	r3, [r7, #13]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d001      	beq.n	8008d74 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e069      	b.n	8008e48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2202      	movs	r2, #2
 8008d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2202      	movs	r2, #2
 8008d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d84:	e031      	b.n	8008dea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	2b04      	cmp	r3, #4
 8008d8a:	d110      	bne.n	8008dae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d8c:	7bbb      	ldrb	r3, [r7, #14]
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d102      	bne.n	8008d98 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d92:	7b3b      	ldrb	r3, [r7, #12]
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d001      	beq.n	8008d9c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e055      	b.n	8008e48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2202      	movs	r2, #2
 8008da0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2202      	movs	r2, #2
 8008da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008dac:	e01d      	b.n	8008dea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008dae:	7bfb      	ldrb	r3, [r7, #15]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d108      	bne.n	8008dc6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008db4:	7bbb      	ldrb	r3, [r7, #14]
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d105      	bne.n	8008dc6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008dba:	7b7b      	ldrb	r3, [r7, #13]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d102      	bne.n	8008dc6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008dc0:	7b3b      	ldrb	r3, [r7, #12]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d001      	beq.n	8008dca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e03e      	b.n	8008e48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2202      	movs	r2, #2
 8008dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2202      	movs	r2, #2
 8008dd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2202      	movs	r2, #2
 8008dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2202      	movs	r2, #2
 8008de6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d003      	beq.n	8008df8 <HAL_TIM_Encoder_Start+0xc4>
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	2b04      	cmp	r3, #4
 8008df4:	d008      	beq.n	8008e08 <HAL_TIM_Encoder_Start+0xd4>
 8008df6:	e00f      	b.n	8008e18 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	2100      	movs	r1, #0
 8008e00:	4618      	mov	r0, r3
 8008e02:	f000 fd99 	bl	8009938 <TIM_CCxChannelCmd>
      break;
 8008e06:	e016      	b.n	8008e36 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	2104      	movs	r1, #4
 8008e10:	4618      	mov	r0, r3
 8008e12:	f000 fd91 	bl	8009938 <TIM_CCxChannelCmd>
      break;
 8008e16:	e00e      	b.n	8008e36 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	2100      	movs	r1, #0
 8008e20:	4618      	mov	r0, r3
 8008e22:	f000 fd89 	bl	8009938 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	2104      	movs	r1, #4
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 fd82 	bl	8009938 <TIM_CCxChannelCmd>
      break;
 8008e34:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f042 0201 	orr.w	r2, r2, #1
 8008e44:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	f003 0302 	and.w	r3, r3, #2
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d122      	bne.n	8008eac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	f003 0302 	and.w	r3, r3, #2
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d11b      	bne.n	8008eac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f06f 0202 	mvn.w	r2, #2
 8008e7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2201      	movs	r2, #1
 8008e82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	699b      	ldr	r3, [r3, #24]
 8008e8a:	f003 0303 	and.w	r3, r3, #3
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d003      	beq.n	8008e9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fa78 	bl	8009388 <HAL_TIM_IC_CaptureCallback>
 8008e98:	e005      	b.n	8008ea6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fa6b 	bl	8009376 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fa7a 	bl	800939a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	f003 0304 	and.w	r3, r3, #4
 8008eb6:	2b04      	cmp	r3, #4
 8008eb8:	d122      	bne.n	8008f00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	f003 0304 	and.w	r3, r3, #4
 8008ec4:	2b04      	cmp	r3, #4
 8008ec6:	d11b      	bne.n	8008f00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f06f 0204 	mvn.w	r2, #4
 8008ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2202      	movs	r2, #2
 8008ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	699b      	ldr	r3, [r3, #24]
 8008ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d003      	beq.n	8008eee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 fa4e 	bl	8009388 <HAL_TIM_IC_CaptureCallback>
 8008eec:	e005      	b.n	8008efa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fa41 	bl	8009376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fa50 	bl	800939a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	f003 0308 	and.w	r3, r3, #8
 8008f0a:	2b08      	cmp	r3, #8
 8008f0c:	d122      	bne.n	8008f54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	f003 0308 	and.w	r3, r3, #8
 8008f18:	2b08      	cmp	r3, #8
 8008f1a:	d11b      	bne.n	8008f54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f06f 0208 	mvn.w	r2, #8
 8008f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2204      	movs	r2, #4
 8008f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	69db      	ldr	r3, [r3, #28]
 8008f32:	f003 0303 	and.w	r3, r3, #3
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d003      	beq.n	8008f42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 fa24 	bl	8009388 <HAL_TIM_IC_CaptureCallback>
 8008f40:	e005      	b.n	8008f4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fa17 	bl	8009376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fa26 	bl	800939a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	f003 0310 	and.w	r3, r3, #16
 8008f5e:	2b10      	cmp	r3, #16
 8008f60:	d122      	bne.n	8008fa8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	f003 0310 	and.w	r3, r3, #16
 8008f6c:	2b10      	cmp	r3, #16
 8008f6e:	d11b      	bne.n	8008fa8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f06f 0210 	mvn.w	r2, #16
 8008f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2208      	movs	r2, #8
 8008f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d003      	beq.n	8008f96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f9fa 	bl	8009388 <HAL_TIM_IC_CaptureCallback>
 8008f94:	e005      	b.n	8008fa2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 f9ed 	bl	8009376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f9fc 	bl	800939a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	f003 0301 	and.w	r3, r3, #1
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d10e      	bne.n	8008fd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	f003 0301 	and.w	r3, r3, #1
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d107      	bne.n	8008fd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f06f 0201 	mvn.w	r2, #1
 8008fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f9c8 	bl	8009364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fde:	2b80      	cmp	r3, #128	; 0x80
 8008fe0:	d10e      	bne.n	8009000 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fec:	2b80      	cmp	r3, #128	; 0x80
 8008fee:	d107      	bne.n	8009000 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 fd86 	bl	8009b0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800900a:	2b40      	cmp	r3, #64	; 0x40
 800900c:	d10e      	bne.n	800902c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009018:	2b40      	cmp	r3, #64	; 0x40
 800901a:	d107      	bne.n	800902c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 f9c0 	bl	80093ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	f003 0320 	and.w	r3, r3, #32
 8009036:	2b20      	cmp	r3, #32
 8009038:	d10e      	bne.n	8009058 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	f003 0320 	and.w	r3, r3, #32
 8009044:	2b20      	cmp	r3, #32
 8009046:	d107      	bne.n	8009058 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f06f 0220 	mvn.w	r2, #32
 8009050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fd51 	bl	8009afa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009058:	bf00      	nop
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009072:	2b01      	cmp	r3, #1
 8009074:	d101      	bne.n	800907a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009076:	2302      	movs	r3, #2
 8009078:	e0ac      	b.n	80091d4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2201      	movs	r2, #1
 800907e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2b0c      	cmp	r3, #12
 8009086:	f200 809f 	bhi.w	80091c8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800908a:	a201      	add	r2, pc, #4	; (adr r2, 8009090 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800908c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009090:	080090c5 	.word	0x080090c5
 8009094:	080091c9 	.word	0x080091c9
 8009098:	080091c9 	.word	0x080091c9
 800909c:	080091c9 	.word	0x080091c9
 80090a0:	08009105 	.word	0x08009105
 80090a4:	080091c9 	.word	0x080091c9
 80090a8:	080091c9 	.word	0x080091c9
 80090ac:	080091c9 	.word	0x080091c9
 80090b0:	08009147 	.word	0x08009147
 80090b4:	080091c9 	.word	0x080091c9
 80090b8:	080091c9 	.word	0x080091c9
 80090bc:	080091c9 	.word	0x080091c9
 80090c0:	08009187 	.word	0x08009187
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68b9      	ldr	r1, [r7, #8]
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 f9f2 	bl	80094b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	699a      	ldr	r2, [r3, #24]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f042 0208 	orr.w	r2, r2, #8
 80090de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	699a      	ldr	r2, [r3, #24]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f022 0204 	bic.w	r2, r2, #4
 80090ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6999      	ldr	r1, [r3, #24]
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	691a      	ldr	r2, [r3, #16]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	430a      	orrs	r2, r1
 8009100:	619a      	str	r2, [r3, #24]
      break;
 8009102:	e062      	b.n	80091ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	68b9      	ldr	r1, [r7, #8]
 800910a:	4618      	mov	r0, r3
 800910c:	f000 fa42 	bl	8009594 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	699a      	ldr	r2, [r3, #24]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800911e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	699a      	ldr	r2, [r3, #24]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800912e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	6999      	ldr	r1, [r3, #24]
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	021a      	lsls	r2, r3, #8
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	430a      	orrs	r2, r1
 8009142:	619a      	str	r2, [r3, #24]
      break;
 8009144:	e041      	b.n	80091ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68b9      	ldr	r1, [r7, #8]
 800914c:	4618      	mov	r0, r3
 800914e:	f000 fa95 	bl	800967c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	69da      	ldr	r2, [r3, #28]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f042 0208 	orr.w	r2, r2, #8
 8009160:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	69da      	ldr	r2, [r3, #28]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f022 0204 	bic.w	r2, r2, #4
 8009170:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	69d9      	ldr	r1, [r3, #28]
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	691a      	ldr	r2, [r3, #16]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	430a      	orrs	r2, r1
 8009182:	61da      	str	r2, [r3, #28]
      break;
 8009184:	e021      	b.n	80091ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	68b9      	ldr	r1, [r7, #8]
 800918c:	4618      	mov	r0, r3
 800918e:	f000 fae9 	bl	8009764 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	69da      	ldr	r2, [r3, #28]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	69da      	ldr	r2, [r3, #28]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	69d9      	ldr	r1, [r3, #28]
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	021a      	lsls	r2, r3, #8
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	430a      	orrs	r2, r1
 80091c4:	61da      	str	r2, [r3, #28]
      break;
 80091c6:	e000      	b.n	80091ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80091c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d101      	bne.n	80091f4 <HAL_TIM_ConfigClockSource+0x18>
 80091f0:	2302      	movs	r3, #2
 80091f2:	e0b3      	b.n	800935c <HAL_TIM_ConfigClockSource+0x180>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2202      	movs	r2, #2
 8009200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009212:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800921a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800922c:	d03e      	beq.n	80092ac <HAL_TIM_ConfigClockSource+0xd0>
 800922e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009232:	f200 8087 	bhi.w	8009344 <HAL_TIM_ConfigClockSource+0x168>
 8009236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800923a:	f000 8085 	beq.w	8009348 <HAL_TIM_ConfigClockSource+0x16c>
 800923e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009242:	d87f      	bhi.n	8009344 <HAL_TIM_ConfigClockSource+0x168>
 8009244:	2b70      	cmp	r3, #112	; 0x70
 8009246:	d01a      	beq.n	800927e <HAL_TIM_ConfigClockSource+0xa2>
 8009248:	2b70      	cmp	r3, #112	; 0x70
 800924a:	d87b      	bhi.n	8009344 <HAL_TIM_ConfigClockSource+0x168>
 800924c:	2b60      	cmp	r3, #96	; 0x60
 800924e:	d050      	beq.n	80092f2 <HAL_TIM_ConfigClockSource+0x116>
 8009250:	2b60      	cmp	r3, #96	; 0x60
 8009252:	d877      	bhi.n	8009344 <HAL_TIM_ConfigClockSource+0x168>
 8009254:	2b50      	cmp	r3, #80	; 0x50
 8009256:	d03c      	beq.n	80092d2 <HAL_TIM_ConfigClockSource+0xf6>
 8009258:	2b50      	cmp	r3, #80	; 0x50
 800925a:	d873      	bhi.n	8009344 <HAL_TIM_ConfigClockSource+0x168>
 800925c:	2b40      	cmp	r3, #64	; 0x40
 800925e:	d058      	beq.n	8009312 <HAL_TIM_ConfigClockSource+0x136>
 8009260:	2b40      	cmp	r3, #64	; 0x40
 8009262:	d86f      	bhi.n	8009344 <HAL_TIM_ConfigClockSource+0x168>
 8009264:	2b30      	cmp	r3, #48	; 0x30
 8009266:	d064      	beq.n	8009332 <HAL_TIM_ConfigClockSource+0x156>
 8009268:	2b30      	cmp	r3, #48	; 0x30
 800926a:	d86b      	bhi.n	8009344 <HAL_TIM_ConfigClockSource+0x168>
 800926c:	2b20      	cmp	r3, #32
 800926e:	d060      	beq.n	8009332 <HAL_TIM_ConfigClockSource+0x156>
 8009270:	2b20      	cmp	r3, #32
 8009272:	d867      	bhi.n	8009344 <HAL_TIM_ConfigClockSource+0x168>
 8009274:	2b00      	cmp	r3, #0
 8009276:	d05c      	beq.n	8009332 <HAL_TIM_ConfigClockSource+0x156>
 8009278:	2b10      	cmp	r3, #16
 800927a:	d05a      	beq.n	8009332 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800927c:	e062      	b.n	8009344 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6818      	ldr	r0, [r3, #0]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	6899      	ldr	r1, [r3, #8]
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	685a      	ldr	r2, [r3, #4]
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	f000 fb34 	bl	80098fa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80092a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	609a      	str	r2, [r3, #8]
      break;
 80092aa:	e04e      	b.n	800934a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6818      	ldr	r0, [r3, #0]
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	6899      	ldr	r1, [r3, #8]
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	685a      	ldr	r2, [r3, #4]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	f000 fb1d 	bl	80098fa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	689a      	ldr	r2, [r3, #8]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80092ce:	609a      	str	r2, [r3, #8]
      break;
 80092d0:	e03b      	b.n	800934a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6818      	ldr	r0, [r3, #0]
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	6859      	ldr	r1, [r3, #4]
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	461a      	mov	r2, r3
 80092e0:	f000 fa94 	bl	800980c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2150      	movs	r1, #80	; 0x50
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 faeb 	bl	80098c6 <TIM_ITRx_SetConfig>
      break;
 80092f0:	e02b      	b.n	800934a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6818      	ldr	r0, [r3, #0]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	6859      	ldr	r1, [r3, #4]
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	461a      	mov	r2, r3
 8009300:	f000 fab2 	bl	8009868 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2160      	movs	r1, #96	; 0x60
 800930a:	4618      	mov	r0, r3
 800930c:	f000 fadb 	bl	80098c6 <TIM_ITRx_SetConfig>
      break;
 8009310:	e01b      	b.n	800934a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6818      	ldr	r0, [r3, #0]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	6859      	ldr	r1, [r3, #4]
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	461a      	mov	r2, r3
 8009320:	f000 fa74 	bl	800980c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2140      	movs	r1, #64	; 0x40
 800932a:	4618      	mov	r0, r3
 800932c:	f000 facb 	bl	80098c6 <TIM_ITRx_SetConfig>
      break;
 8009330:	e00b      	b.n	800934a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4619      	mov	r1, r3
 800933c:	4610      	mov	r0, r2
 800933e:	f000 fac2 	bl	80098c6 <TIM_ITRx_SetConfig>
        break;
 8009342:	e002      	b.n	800934a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009344:	bf00      	nop
 8009346:	e000      	b.n	800934a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009348:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2201      	movs	r2, #1
 800934e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	4618      	mov	r0, r3
 800935e:	3710      	adds	r7, #16
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800936c:	bf00      	nop
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	bc80      	pop	{r7}
 8009374:	4770      	bx	lr

08009376 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009376:	b480      	push	{r7}
 8009378:	b083      	sub	sp, #12
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800937e:	bf00      	nop
 8009380:	370c      	adds	r7, #12
 8009382:	46bd      	mov	sp, r7
 8009384:	bc80      	pop	{r7}
 8009386:	4770      	bx	lr

08009388 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	bc80      	pop	{r7}
 8009398:	4770      	bx	lr

0800939a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800939a:	b480      	push	{r7}
 800939c:	b083      	sub	sp, #12
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093a2:	bf00      	nop
 80093a4:	370c      	adds	r7, #12
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bc80      	pop	{r7}
 80093aa:	4770      	bx	lr

080093ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80093b4:	bf00      	nop
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bc80      	pop	{r7}
 80093bc:	4770      	bx	lr
	...

080093c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a33      	ldr	r2, [pc, #204]	; (80094a0 <TIM_Base_SetConfig+0xe0>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d013      	beq.n	8009400 <TIM_Base_SetConfig+0x40>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a32      	ldr	r2, [pc, #200]	; (80094a4 <TIM_Base_SetConfig+0xe4>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d00f      	beq.n	8009400 <TIM_Base_SetConfig+0x40>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093e6:	d00b      	beq.n	8009400 <TIM_Base_SetConfig+0x40>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4a2f      	ldr	r2, [pc, #188]	; (80094a8 <TIM_Base_SetConfig+0xe8>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d007      	beq.n	8009400 <TIM_Base_SetConfig+0x40>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4a2e      	ldr	r2, [pc, #184]	; (80094ac <TIM_Base_SetConfig+0xec>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d003      	beq.n	8009400 <TIM_Base_SetConfig+0x40>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a2d      	ldr	r2, [pc, #180]	; (80094b0 <TIM_Base_SetConfig+0xf0>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d108      	bne.n	8009412 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	4313      	orrs	r3, r2
 8009410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a22      	ldr	r2, [pc, #136]	; (80094a0 <TIM_Base_SetConfig+0xe0>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d013      	beq.n	8009442 <TIM_Base_SetConfig+0x82>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a21      	ldr	r2, [pc, #132]	; (80094a4 <TIM_Base_SetConfig+0xe4>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d00f      	beq.n	8009442 <TIM_Base_SetConfig+0x82>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009428:	d00b      	beq.n	8009442 <TIM_Base_SetConfig+0x82>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4a1e      	ldr	r2, [pc, #120]	; (80094a8 <TIM_Base_SetConfig+0xe8>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d007      	beq.n	8009442 <TIM_Base_SetConfig+0x82>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a1d      	ldr	r2, [pc, #116]	; (80094ac <TIM_Base_SetConfig+0xec>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d003      	beq.n	8009442 <TIM_Base_SetConfig+0x82>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a1c      	ldr	r2, [pc, #112]	; (80094b0 <TIM_Base_SetConfig+0xf0>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d108      	bne.n	8009454 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	4313      	orrs	r3, r2
 8009452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	695b      	ldr	r3, [r3, #20]
 800945e:	4313      	orrs	r3, r2
 8009460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	689a      	ldr	r2, [r3, #8]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a09      	ldr	r2, [pc, #36]	; (80094a0 <TIM_Base_SetConfig+0xe0>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d003      	beq.n	8009488 <TIM_Base_SetConfig+0xc8>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a08      	ldr	r2, [pc, #32]	; (80094a4 <TIM_Base_SetConfig+0xe4>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d103      	bne.n	8009490 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	691a      	ldr	r2, [r3, #16]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	615a      	str	r2, [r3, #20]
}
 8009496:	bf00      	nop
 8009498:	3714      	adds	r7, #20
 800949a:	46bd      	mov	sp, r7
 800949c:	bc80      	pop	{r7}
 800949e:	4770      	bx	lr
 80094a0:	40012c00 	.word	0x40012c00
 80094a4:	40013400 	.word	0x40013400
 80094a8:	40000400 	.word	0x40000400
 80094ac:	40000800 	.word	0x40000800
 80094b0:	40000c00 	.word	0x40000c00

080094b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b087      	sub	sp, #28
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	f023 0201 	bic.w	r2, r3, #1
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	699b      	ldr	r3, [r3, #24]
 80094da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f023 0303 	bic.w	r3, r3, #3
 80094ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	f023 0302 	bic.w	r3, r3, #2
 80094fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	697a      	ldr	r2, [r7, #20]
 8009504:	4313      	orrs	r3, r2
 8009506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a20      	ldr	r2, [pc, #128]	; (800958c <TIM_OC1_SetConfig+0xd8>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d003      	beq.n	8009518 <TIM_OC1_SetConfig+0x64>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a1f      	ldr	r2, [pc, #124]	; (8009590 <TIM_OC1_SetConfig+0xdc>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d10c      	bne.n	8009532 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	f023 0308 	bic.w	r3, r3, #8
 800951e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	697a      	ldr	r2, [r7, #20]
 8009526:	4313      	orrs	r3, r2
 8009528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	f023 0304 	bic.w	r3, r3, #4
 8009530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a15      	ldr	r2, [pc, #84]	; (800958c <TIM_OC1_SetConfig+0xd8>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d003      	beq.n	8009542 <TIM_OC1_SetConfig+0x8e>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a14      	ldr	r2, [pc, #80]	; (8009590 <TIM_OC1_SetConfig+0xdc>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d111      	bne.n	8009566 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009548:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009550:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	695b      	ldr	r3, [r3, #20]
 8009556:	693a      	ldr	r2, [r7, #16]
 8009558:	4313      	orrs	r3, r2
 800955a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	699b      	ldr	r3, [r3, #24]
 8009560:	693a      	ldr	r2, [r7, #16]
 8009562:	4313      	orrs	r3, r2
 8009564:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	693a      	ldr	r2, [r7, #16]
 800956a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	685a      	ldr	r2, [r3, #4]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	697a      	ldr	r2, [r7, #20]
 800957e:	621a      	str	r2, [r3, #32]
}
 8009580:	bf00      	nop
 8009582:	371c      	adds	r7, #28
 8009584:	46bd      	mov	sp, r7
 8009586:	bc80      	pop	{r7}
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	40012c00 	.word	0x40012c00
 8009590:	40013400 	.word	0x40013400

08009594 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009594:	b480      	push	{r7}
 8009596:	b087      	sub	sp, #28
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a1b      	ldr	r3, [r3, #32]
 80095a2:	f023 0210 	bic.w	r2, r3, #16
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a1b      	ldr	r3, [r3, #32]
 80095ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	021b      	lsls	r3, r3, #8
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	f023 0320 	bic.w	r3, r3, #32
 80095de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	011b      	lsls	r3, r3, #4
 80095e6:	697a      	ldr	r2, [r7, #20]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a21      	ldr	r2, [pc, #132]	; (8009674 <TIM_OC2_SetConfig+0xe0>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d003      	beq.n	80095fc <TIM_OC2_SetConfig+0x68>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a20      	ldr	r2, [pc, #128]	; (8009678 <TIM_OC2_SetConfig+0xe4>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d10d      	bne.n	8009618 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	011b      	lsls	r3, r3, #4
 800960a:	697a      	ldr	r2, [r7, #20]
 800960c:	4313      	orrs	r3, r2
 800960e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009616:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a16      	ldr	r2, [pc, #88]	; (8009674 <TIM_OC2_SetConfig+0xe0>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d003      	beq.n	8009628 <TIM_OC2_SetConfig+0x94>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a15      	ldr	r2, [pc, #84]	; (8009678 <TIM_OC2_SetConfig+0xe4>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d113      	bne.n	8009650 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800962e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009636:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	695b      	ldr	r3, [r3, #20]
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	693a      	ldr	r2, [r7, #16]
 8009640:	4313      	orrs	r3, r2
 8009642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	693a      	ldr	r2, [r7, #16]
 800964c:	4313      	orrs	r3, r2
 800964e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	685a      	ldr	r2, [r3, #4]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	621a      	str	r2, [r3, #32]
}
 800966a:	bf00      	nop
 800966c:	371c      	adds	r7, #28
 800966e:	46bd      	mov	sp, r7
 8009670:	bc80      	pop	{r7}
 8009672:	4770      	bx	lr
 8009674:	40012c00 	.word	0x40012c00
 8009678:	40013400 	.word	0x40013400

0800967c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800967c:	b480      	push	{r7}
 800967e:	b087      	sub	sp, #28
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6a1b      	ldr	r3, [r3, #32]
 800968a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a1b      	ldr	r3, [r3, #32]
 8009696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	69db      	ldr	r3, [r3, #28]
 80096a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f023 0303 	bic.w	r3, r3, #3
 80096b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	021b      	lsls	r3, r3, #8
 80096cc:	697a      	ldr	r2, [r7, #20]
 80096ce:	4313      	orrs	r3, r2
 80096d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4a21      	ldr	r2, [pc, #132]	; (800975c <TIM_OC3_SetConfig+0xe0>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d003      	beq.n	80096e2 <TIM_OC3_SetConfig+0x66>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4a20      	ldr	r2, [pc, #128]	; (8009760 <TIM_OC3_SetConfig+0xe4>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d10d      	bne.n	80096fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	021b      	lsls	r3, r3, #8
 80096f0:	697a      	ldr	r2, [r7, #20]
 80096f2:	4313      	orrs	r3, r2
 80096f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a16      	ldr	r2, [pc, #88]	; (800975c <TIM_OC3_SetConfig+0xe0>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d003      	beq.n	800970e <TIM_OC3_SetConfig+0x92>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4a15      	ldr	r2, [pc, #84]	; (8009760 <TIM_OC3_SetConfig+0xe4>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d113      	bne.n	8009736 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800971c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	695b      	ldr	r3, [r3, #20]
 8009722:	011b      	lsls	r3, r3, #4
 8009724:	693a      	ldr	r2, [r7, #16]
 8009726:	4313      	orrs	r3, r2
 8009728:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	699b      	ldr	r3, [r3, #24]
 800972e:	011b      	lsls	r3, r3, #4
 8009730:	693a      	ldr	r2, [r7, #16]
 8009732:	4313      	orrs	r3, r2
 8009734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	693a      	ldr	r2, [r7, #16]
 800973a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	685a      	ldr	r2, [r3, #4]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	697a      	ldr	r2, [r7, #20]
 800974e:	621a      	str	r2, [r3, #32]
}
 8009750:	bf00      	nop
 8009752:	371c      	adds	r7, #28
 8009754:	46bd      	mov	sp, r7
 8009756:	bc80      	pop	{r7}
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	40012c00 	.word	0x40012c00
 8009760:	40013400 	.word	0x40013400

08009764 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009764:	b480      	push	{r7}
 8009766:	b087      	sub	sp, #28
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a1b      	ldr	r3, [r3, #32]
 8009772:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a1b      	ldr	r3, [r3, #32]
 800977e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	69db      	ldr	r3, [r3, #28]
 800978a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800979a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	021b      	lsls	r3, r3, #8
 80097a2:	68fa      	ldr	r2, [r7, #12]
 80097a4:	4313      	orrs	r3, r2
 80097a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	031b      	lsls	r3, r3, #12
 80097b6:	693a      	ldr	r2, [r7, #16]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4a11      	ldr	r2, [pc, #68]	; (8009804 <TIM_OC4_SetConfig+0xa0>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d003      	beq.n	80097cc <TIM_OC4_SetConfig+0x68>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4a10      	ldr	r2, [pc, #64]	; (8009808 <TIM_OC4_SetConfig+0xa4>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d109      	bne.n	80097e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	695b      	ldr	r3, [r3, #20]
 80097d8:	019b      	lsls	r3, r3, #6
 80097da:	697a      	ldr	r2, [r7, #20]
 80097dc:	4313      	orrs	r3, r2
 80097de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	697a      	ldr	r2, [r7, #20]
 80097e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	685a      	ldr	r2, [r3, #4]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	693a      	ldr	r2, [r7, #16]
 80097f8:	621a      	str	r2, [r3, #32]
}
 80097fa:	bf00      	nop
 80097fc:	371c      	adds	r7, #28
 80097fe:	46bd      	mov	sp, r7
 8009800:	bc80      	pop	{r7}
 8009802:	4770      	bx	lr
 8009804:	40012c00 	.word	0x40012c00
 8009808:	40013400 	.word	0x40013400

0800980c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800980c:	b480      	push	{r7}
 800980e:	b087      	sub	sp, #28
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6a1b      	ldr	r3, [r3, #32]
 800981c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	6a1b      	ldr	r3, [r3, #32]
 8009822:	f023 0201 	bic.w	r2, r3, #1
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	699b      	ldr	r3, [r3, #24]
 800982e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	011b      	lsls	r3, r3, #4
 800983c:	693a      	ldr	r2, [r7, #16]
 800983e:	4313      	orrs	r3, r2
 8009840:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	f023 030a 	bic.w	r3, r3, #10
 8009848:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	4313      	orrs	r3, r2
 8009850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	693a      	ldr	r2, [r7, #16]
 8009856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	697a      	ldr	r2, [r7, #20]
 800985c:	621a      	str	r2, [r3, #32]
}
 800985e:	bf00      	nop
 8009860:	371c      	adds	r7, #28
 8009862:	46bd      	mov	sp, r7
 8009864:	bc80      	pop	{r7}
 8009866:	4770      	bx	lr

08009868 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009868:	b480      	push	{r7}
 800986a:	b087      	sub	sp, #28
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6a1b      	ldr	r3, [r3, #32]
 8009878:	f023 0210 	bic.w	r2, r3, #16
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	699b      	ldr	r3, [r3, #24]
 8009884:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6a1b      	ldr	r3, [r3, #32]
 800988a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009892:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	031b      	lsls	r3, r3, #12
 8009898:	697a      	ldr	r2, [r7, #20]
 800989a:	4313      	orrs	r3, r2
 800989c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	011b      	lsls	r3, r3, #4
 80098aa:	693a      	ldr	r2, [r7, #16]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	697a      	ldr	r2, [r7, #20]
 80098b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	693a      	ldr	r2, [r7, #16]
 80098ba:	621a      	str	r2, [r3, #32]
}
 80098bc:	bf00      	nop
 80098be:	371c      	adds	r7, #28
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bc80      	pop	{r7}
 80098c4:	4770      	bx	lr

080098c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098c6:	b480      	push	{r7}
 80098c8:	b085      	sub	sp, #20
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
 80098ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098de:	683a      	ldr	r2, [r7, #0]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	f043 0307 	orr.w	r3, r3, #7
 80098e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	609a      	str	r2, [r3, #8]
}
 80098f0:	bf00      	nop
 80098f2:	3714      	adds	r7, #20
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bc80      	pop	{r7}
 80098f8:	4770      	bx	lr

080098fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80098fa:	b480      	push	{r7}
 80098fc:	b087      	sub	sp, #28
 80098fe:	af00      	add	r7, sp, #0
 8009900:	60f8      	str	r0, [r7, #12]
 8009902:	60b9      	str	r1, [r7, #8]
 8009904:	607a      	str	r2, [r7, #4]
 8009906:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009914:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	021a      	lsls	r2, r3, #8
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	431a      	orrs	r2, r3
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	4313      	orrs	r3, r2
 8009922:	697a      	ldr	r2, [r7, #20]
 8009924:	4313      	orrs	r3, r2
 8009926:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	697a      	ldr	r2, [r7, #20]
 800992c:	609a      	str	r2, [r3, #8]
}
 800992e:	bf00      	nop
 8009930:	371c      	adds	r7, #28
 8009932:	46bd      	mov	sp, r7
 8009934:	bc80      	pop	{r7}
 8009936:	4770      	bx	lr

08009938 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009938:	b480      	push	{r7}
 800993a:	b087      	sub	sp, #28
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	f003 031f 	and.w	r3, r3, #31
 800994a:	2201      	movs	r2, #1
 800994c:	fa02 f303 	lsl.w	r3, r2, r3
 8009950:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6a1a      	ldr	r2, [r3, #32]
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	43db      	mvns	r3, r3
 800995a:	401a      	ands	r2, r3
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6a1a      	ldr	r2, [r3, #32]
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	f003 031f 	and.w	r3, r3, #31
 800996a:	6879      	ldr	r1, [r7, #4]
 800996c:	fa01 f303 	lsl.w	r3, r1, r3
 8009970:	431a      	orrs	r2, r3
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	621a      	str	r2, [r3, #32]
}
 8009976:	bf00      	nop
 8009978:	371c      	adds	r7, #28
 800997a:	46bd      	mov	sp, r7
 800997c:	bc80      	pop	{r7}
 800997e:	4770      	bx	lr

08009980 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009980:	b480      	push	{r7}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009990:	2b01      	cmp	r3, #1
 8009992:	d101      	bne.n	8009998 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009994:	2302      	movs	r3, #2
 8009996:	e050      	b.n	8009a3a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2202      	movs	r2, #2
 80099a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	4313      	orrs	r3, r2
 80099c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a1b      	ldr	r2, [pc, #108]	; (8009a44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d018      	beq.n	8009a0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a19      	ldr	r2, [pc, #100]	; (8009a48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d013      	beq.n	8009a0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099ee:	d00e      	beq.n	8009a0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a15      	ldr	r2, [pc, #84]	; (8009a4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d009      	beq.n	8009a0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a14      	ldr	r2, [pc, #80]	; (8009a50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d004      	beq.n	8009a0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a12      	ldr	r2, [pc, #72]	; (8009a54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d10c      	bne.n	8009a28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68ba      	ldr	r2, [r7, #8]
 8009a26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3714      	adds	r7, #20
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bc80      	pop	{r7}
 8009a42:	4770      	bx	lr
 8009a44:	40012c00 	.word	0x40012c00
 8009a48:	40013400 	.word	0x40013400
 8009a4c:	40000400 	.word	0x40000400
 8009a50:	40000800 	.word	0x40000800
 8009a54:	40000c00 	.word	0x40000c00

08009a58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009a62:	2300      	movs	r3, #0
 8009a64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d101      	bne.n	8009a74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009a70:	2302      	movs	r3, #2
 8009a72:	e03d      	b.n	8009af0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	4313      	orrs	r3, r2
 8009a88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	4313      	orrs	r3, r2
 8009a96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	695b      	ldr	r3, [r3, #20]
 8009acc:	4313      	orrs	r3, r2
 8009ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	69db      	ldr	r3, [r3, #28]
 8009ada:	4313      	orrs	r3, r2
 8009adc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68fa      	ldr	r2, [r7, #12]
 8009ae4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3714      	adds	r7, #20
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bc80      	pop	{r7}
 8009af8:	4770      	bx	lr

08009afa <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009afa:	b480      	push	{r7}
 8009afc:	b083      	sub	sp, #12
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b02:	bf00      	nop
 8009b04:	370c      	adds	r7, #12
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bc80      	pop	{r7}
 8009b0a:	4770      	bx	lr

08009b0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b14:	bf00      	nop
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bc80      	pop	{r7}
 8009b1c:	4770      	bx	lr

08009b1e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b1e:	b580      	push	{r7, lr}
 8009b20:	b082      	sub	sp, #8
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d101      	bne.n	8009b30 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e03f      	b.n	8009bb0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d106      	bne.n	8009b4a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f7fc f8cf 	bl	8005ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2224      	movs	r2, #36	; 0x24
 8009b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68da      	ldr	r2, [r3, #12]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b60:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fe0e 	bl	800a784 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	691a      	ldr	r2, [r3, #16]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b76:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	695a      	ldr	r2, [r3, #20]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b86:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	68da      	ldr	r2, [r3, #12]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b96:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2220      	movs	r2, #32
 8009ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2220      	movs	r2, #32
 8009baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3708      	adds	r7, #8
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d101      	bne.n	8009bca <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e021      	b.n	8009c0e <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2224      	movs	r2, #36	; 0x24
 8009bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	68da      	ldr	r2, [r3, #12]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009be0:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f7fc f97e 	bl	8005ee4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b08a      	sub	sp, #40	; 0x28
 8009c1a:	af02      	add	r7, sp, #8
 8009c1c:	60f8      	str	r0, [r7, #12]
 8009c1e:	60b9      	str	r1, [r7, #8]
 8009c20:	603b      	str	r3, [r7, #0]
 8009c22:	4613      	mov	r3, r2
 8009c24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009c26:	2300      	movs	r3, #0
 8009c28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	2b20      	cmp	r3, #32
 8009c34:	d17c      	bne.n	8009d30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d002      	beq.n	8009c42 <HAL_UART_Transmit+0x2c>
 8009c3c:	88fb      	ldrh	r3, [r7, #6]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d101      	bne.n	8009c46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	e075      	b.n	8009d32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d101      	bne.n	8009c54 <HAL_UART_Transmit+0x3e>
 8009c50:	2302      	movs	r3, #2
 8009c52:	e06e      	b.n	8009d32 <HAL_UART_Transmit+0x11c>
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2201      	movs	r2, #1
 8009c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2221      	movs	r2, #33	; 0x21
 8009c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c6a:	f7fc fca9 	bl	80065c0 <HAL_GetTick>
 8009c6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	88fa      	ldrh	r2, [r7, #6]
 8009c74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	88fa      	ldrh	r2, [r7, #6]
 8009c7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c84:	d108      	bne.n	8009c98 <HAL_UART_Transmit+0x82>
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d104      	bne.n	8009c98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	61bb      	str	r3, [r7, #24]
 8009c96:	e003      	b.n	8009ca0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009ca8:	e02a      	b.n	8009d00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	2180      	movs	r1, #128	; 0x80
 8009cb4:	68f8      	ldr	r0, [r7, #12]
 8009cb6:	f000 fb18 	bl	800a2ea <UART_WaitOnFlagUntilTimeout>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d001      	beq.n	8009cc4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009cc0:	2303      	movs	r3, #3
 8009cc2:	e036      	b.n	8009d32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d10b      	bne.n	8009ce2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	881b      	ldrh	r3, [r3, #0]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	3302      	adds	r3, #2
 8009cde:	61bb      	str	r3, [r7, #24]
 8009ce0:	e007      	b.n	8009cf2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	781a      	ldrb	r2, [r3, #0]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	3301      	adds	r3, #1
 8009cf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	b29a      	uxth	r2, r3
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1cf      	bne.n	8009caa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	9300      	str	r3, [sp, #0]
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	2200      	movs	r2, #0
 8009d12:	2140      	movs	r1, #64	; 0x40
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	f000 fae8 	bl	800a2ea <UART_WaitOnFlagUntilTimeout>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d001      	beq.n	8009d24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e006      	b.n	8009d32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2220      	movs	r2, #32
 8009d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	e000      	b.n	8009d32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009d30:	2302      	movs	r3, #2
  }
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3720      	adds	r7, #32
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b084      	sub	sp, #16
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	60f8      	str	r0, [r7, #12]
 8009d42:	60b9      	str	r1, [r7, #8]
 8009d44:	4613      	mov	r3, r2
 8009d46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	2b20      	cmp	r3, #32
 8009d52:	d11d      	bne.n	8009d90 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d002      	beq.n	8009d60 <HAL_UART_Receive_IT+0x26>
 8009d5a:	88fb      	ldrh	r3, [r7, #6]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d101      	bne.n	8009d64 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009d60:	2301      	movs	r3, #1
 8009d62:	e016      	b.n	8009d92 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d101      	bne.n	8009d72 <HAL_UART_Receive_IT+0x38>
 8009d6e:	2302      	movs	r3, #2
 8009d70:	e00f      	b.n	8009d92 <HAL_UART_Receive_IT+0x58>
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8009d80:	88fb      	ldrh	r3, [r7, #6]
 8009d82:	461a      	mov	r2, r3
 8009d84:	68b9      	ldr	r1, [r7, #8]
 8009d86:	68f8      	ldr	r0, [r7, #12]
 8009d88:	f000 faf9 	bl	800a37e <UART_Start_Receive_IT>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	e000      	b.n	8009d92 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009d90:	2302      	movs	r3, #2
  }
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3710      	adds	r7, #16
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b084      	sub	sp, #16
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	60f8      	str	r0, [r7, #12]
 8009da2:	60b9      	str	r1, [r7, #8]
 8009da4:	4613      	mov	r3, r2
 8009da6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	2b20      	cmp	r3, #32
 8009db2:	d11d      	bne.n	8009df0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d002      	beq.n	8009dc0 <HAL_UART_Receive_DMA+0x26>
 8009dba:	88fb      	ldrh	r3, [r7, #6]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d101      	bne.n	8009dc4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e016      	b.n	8009df2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d101      	bne.n	8009dd2 <HAL_UART_Receive_DMA+0x38>
 8009dce:	2302      	movs	r3, #2
 8009dd0:	e00f      	b.n	8009df2 <HAL_UART_Receive_DMA+0x58>
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8009de0:	88fb      	ldrh	r3, [r7, #6]
 8009de2:	461a      	mov	r2, r3
 8009de4:	68b9      	ldr	r1, [r7, #8]
 8009de6:	68f8      	ldr	r0, [r7, #12]
 8009de8:	f000 fb02 	bl	800a3f0 <UART_Start_Receive_DMA>
 8009dec:	4603      	mov	r3, r0
 8009dee:	e000      	b.n	8009df2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009df0:	2302      	movs	r3, #2
  }
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
	...

08009dfc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b08a      	sub	sp, #40	; 0x28
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	695b      	ldr	r3, [r3, #20]
 8009e1a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009e20:	2300      	movs	r3, #0
 8009e22:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e26:	f003 030f 	and.w	r3, r3, #15
 8009e2a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8009e2c:	69bb      	ldr	r3, [r7, #24]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d10d      	bne.n	8009e4e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e34:	f003 0320 	and.w	r3, r3, #32
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d008      	beq.n	8009e4e <HAL_UART_IRQHandler+0x52>
 8009e3c:	6a3b      	ldr	r3, [r7, #32]
 8009e3e:	f003 0320 	and.w	r3, r3, #32
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d003      	beq.n	8009e4e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 fbf2 	bl	800a630 <UART_Receive_IT>
      return;
 8009e4c:	e17b      	b.n	800a146 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	f000 80b1 	beq.w	8009fb8 <HAL_UART_IRQHandler+0x1bc>
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	f003 0301 	and.w	r3, r3, #1
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d105      	bne.n	8009e6c <HAL_UART_IRQHandler+0x70>
 8009e60:	6a3b      	ldr	r3, [r7, #32]
 8009e62:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f000 80a6 	beq.w	8009fb8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6e:	f003 0301 	and.w	r3, r3, #1
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00a      	beq.n	8009e8c <HAL_UART_IRQHandler+0x90>
 8009e76:	6a3b      	ldr	r3, [r7, #32]
 8009e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d005      	beq.n	8009e8c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e84:	f043 0201 	orr.w	r2, r3, #1
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8e:	f003 0304 	and.w	r3, r3, #4
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00a      	beq.n	8009eac <HAL_UART_IRQHandler+0xb0>
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	f003 0301 	and.w	r3, r3, #1
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d005      	beq.n	8009eac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea4:	f043 0202 	orr.w	r2, r3, #2
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eae:	f003 0302 	and.w	r3, r3, #2
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d00a      	beq.n	8009ecc <HAL_UART_IRQHandler+0xd0>
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	f003 0301 	and.w	r3, r3, #1
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d005      	beq.n	8009ecc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec4:	f043 0204 	orr.w	r2, r3, #4
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ece:	f003 0308 	and.w	r3, r3, #8
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00f      	beq.n	8009ef6 <HAL_UART_IRQHandler+0xfa>
 8009ed6:	6a3b      	ldr	r3, [r7, #32]
 8009ed8:	f003 0320 	and.w	r3, r3, #32
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d104      	bne.n	8009eea <HAL_UART_IRQHandler+0xee>
 8009ee0:	69fb      	ldr	r3, [r7, #28]
 8009ee2:	f003 0301 	and.w	r3, r3, #1
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d005      	beq.n	8009ef6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eee:	f043 0208 	orr.w	r2, r3, #8
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f000 811e 	beq.w	800a13c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f02:	f003 0320 	and.w	r3, r3, #32
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d007      	beq.n	8009f1a <HAL_UART_IRQHandler+0x11e>
 8009f0a:	6a3b      	ldr	r3, [r7, #32]
 8009f0c:	f003 0320 	and.w	r3, r3, #32
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d002      	beq.n	8009f1a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 fb8b 	bl	800a630 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	695b      	ldr	r3, [r3, #20]
 8009f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	bf14      	ite	ne
 8009f28:	2301      	movne	r3, #1
 8009f2a:	2300      	moveq	r3, #0
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f34:	f003 0308 	and.w	r3, r3, #8
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d102      	bne.n	8009f42 <HAL_UART_IRQHandler+0x146>
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d031      	beq.n	8009fa6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 facd 	bl	800a4e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	695b      	ldr	r3, [r3, #20]
 8009f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d023      	beq.n	8009f9e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	695a      	ldr	r2, [r3, #20]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f64:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d013      	beq.n	8009f96 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f72:	4a76      	ldr	r2, [pc, #472]	; (800a14c <HAL_UART_IRQHandler+0x350>)
 8009f74:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7fc fe16 	bl	8006bac <HAL_DMA_Abort_IT>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d016      	beq.n	8009fb4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009f90:	4610      	mov	r0, r2
 8009f92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f94:	e00e      	b.n	8009fb4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f7fa fb70 	bl	800467c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f9c:	e00a      	b.n	8009fb4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f7fa fb6c 	bl	800467c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fa4:	e006      	b.n	8009fb4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f7fa fb68 	bl	800467c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009fb2:	e0c3      	b.n	800a13c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fb4:	bf00      	nop
    return;
 8009fb6:	e0c1      	b.n	800a13c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	f040 80a1 	bne.w	800a104 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8009fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc4:	f003 0310 	and.w	r3, r3, #16
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	f000 809b 	beq.w	800a104 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8009fce:	6a3b      	ldr	r3, [r7, #32]
 8009fd0:	f003 0310 	and.w	r3, r3, #16
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	f000 8095 	beq.w	800a104 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009fda:	2300      	movs	r3, #0
 8009fdc:	60fb      	str	r3, [r7, #12]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	60fb      	str	r3, [r7, #12]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	60fb      	str	r3, [r7, #12]
 8009fee:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	695b      	ldr	r3, [r3, #20]
 8009ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d04e      	beq.n	800a09c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800a008:	8a3b      	ldrh	r3, [r7, #16]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	f000 8098 	beq.w	800a140 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a014:	8a3a      	ldrh	r2, [r7, #16]
 800a016:	429a      	cmp	r2, r3
 800a018:	f080 8092 	bcs.w	800a140 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	8a3a      	ldrh	r2, [r7, #16]
 800a020:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a026:	699b      	ldr	r3, [r3, #24]
 800a028:	2b20      	cmp	r3, #32
 800a02a:	d02b      	beq.n	800a084 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	68da      	ldr	r2, [r3, #12]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a03a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	695a      	ldr	r2, [r3, #20]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f022 0201 	bic.w	r2, r2, #1
 800a04a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	695a      	ldr	r2, [r3, #20]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a05a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2220      	movs	r2, #32
 800a060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	68da      	ldr	r2, [r3, #12]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f022 0210 	bic.w	r2, r2, #16
 800a078:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07e:	4618      	mov	r0, r3
 800a080:	f7fc fd59 	bl	8006b36 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	1ad3      	subs	r3, r2, r3
 800a090:	b29b      	uxth	r3, r3
 800a092:	4619      	mov	r1, r3
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 f86d 	bl	800a174 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a09a:	e051      	b.n	800a140 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d047      	beq.n	800a144 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800a0b4:	8a7b      	ldrh	r3, [r7, #18]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d044      	beq.n	800a144 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	68da      	ldr	r2, [r3, #12]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a0c8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	695a      	ldr	r2, [r3, #20]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f022 0201 	bic.w	r2, r2, #1
 800a0d8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2220      	movs	r2, #32
 800a0de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	68da      	ldr	r2, [r3, #12]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f022 0210 	bic.w	r2, r2, #16
 800a0f6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a0f8:	8a7b      	ldrh	r3, [r7, #18]
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 f839 	bl	800a174 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a102:	e01f      	b.n	800a144 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d008      	beq.n	800a120 <HAL_UART_IRQHandler+0x324>
 800a10e:	6a3b      	ldr	r3, [r7, #32]
 800a110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a114:	2b00      	cmp	r3, #0
 800a116:	d003      	beq.n	800a120 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 fa22 	bl	800a562 <UART_Transmit_IT>
    return;
 800a11e:	e012      	b.n	800a146 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a126:	2b00      	cmp	r3, #0
 800a128:	d00d      	beq.n	800a146 <HAL_UART_IRQHandler+0x34a>
 800a12a:	6a3b      	ldr	r3, [r7, #32]
 800a12c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a130:	2b00      	cmp	r3, #0
 800a132:	d008      	beq.n	800a146 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 fa63 	bl	800a600 <UART_EndTransmit_IT>
    return;
 800a13a:	e004      	b.n	800a146 <HAL_UART_IRQHandler+0x34a>
    return;
 800a13c:	bf00      	nop
 800a13e:	e002      	b.n	800a146 <HAL_UART_IRQHandler+0x34a>
      return;
 800a140:	bf00      	nop
 800a142:	e000      	b.n	800a146 <HAL_UART_IRQHandler+0x34a>
      return;
 800a144:	bf00      	nop
  }
}
 800a146:	3728      	adds	r7, #40	; 0x28
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	0800a53b 	.word	0x0800a53b

0800a150 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a158:	bf00      	nop
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bc80      	pop	{r7}
 800a160:	4770      	bx	lr

0800a162 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a162:	b480      	push	{r7}
 800a164:	b083      	sub	sp, #12
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a16a:	bf00      	nop
 800a16c:	370c      	adds	r7, #12
 800a16e:	46bd      	mov	sp, r7
 800a170:	bc80      	pop	{r7}
 800a172:	4770      	bx	lr

0800a174 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	460b      	mov	r3, r1
 800a17e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a180:	bf00      	nop
 800a182:	370c      	adds	r7, #12
 800a184:	46bd      	mov	sp, r7
 800a186:	bc80      	pop	{r7}
 800a188:	4770      	bx	lr

0800a18a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b084      	sub	sp, #16
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a196:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f003 0320 	and.w	r3, r3, #32
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d12a      	bne.n	800a1fc <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	68da      	ldr	r2, [r3, #12]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a1ba:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	695a      	ldr	r2, [r3, #20]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f022 0201 	bic.w	r2, r2, #1
 800a1ca:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	695a      	ldr	r2, [r3, #20]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1da:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2220      	movs	r2, #32
 800a1e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d107      	bne.n	800a1fc <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	68da      	ldr	r2, [r3, #12]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f022 0210 	bic.w	r2, r2, #16
 800a1fa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a200:	2b01      	cmp	r3, #1
 800a202:	d106      	bne.n	800a212 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a208:	4619      	mov	r1, r3
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f7ff ffb2 	bl	800a174 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a210:	e002      	b.n	800a218 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f7fa f9cc 	bl	80045b0 <HAL_UART_RxCpltCallback>
}
 800a218:	bf00      	nop
 800a21a:	3710      	adds	r7, #16
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a232:	2b01      	cmp	r3, #1
 800a234:	d108      	bne.n	800a248 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a23a:	085b      	lsrs	r3, r3, #1
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	4619      	mov	r1, r3
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f7ff ff97 	bl	800a174 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a246:	e002      	b.n	800a24e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f7ff ff8a 	bl	800a162 <HAL_UART_RxHalfCpltCallback>
}
 800a24e:	bf00      	nop
 800a250:	3710      	adds	r7, #16
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b084      	sub	sp, #16
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a25e:	2300      	movs	r3, #0
 800a260:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a266:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	695b      	ldr	r3, [r3, #20]
 800a26e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a272:	2b00      	cmp	r3, #0
 800a274:	bf14      	ite	ne
 800a276:	2301      	movne	r3, #1
 800a278:	2300      	moveq	r3, #0
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a284:	b2db      	uxtb	r3, r3
 800a286:	2b21      	cmp	r3, #33	; 0x21
 800a288:	d108      	bne.n	800a29c <UART_DMAError+0x46>
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d005      	beq.n	800a29c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	2200      	movs	r2, #0
 800a294:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a296:	68b8      	ldr	r0, [r7, #8]
 800a298:	f000 f90e 	bl	800a4b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	695b      	ldr	r3, [r3, #20]
 800a2a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	bf14      	ite	ne
 800a2aa:	2301      	movne	r3, #1
 800a2ac:	2300      	moveq	r3, #0
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	2b22      	cmp	r3, #34	; 0x22
 800a2bc:	d108      	bne.n	800a2d0 <UART_DMAError+0x7a>
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d005      	beq.n	800a2d0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a2ca:	68b8      	ldr	r0, [r7, #8]
 800a2cc:	f000 f909 	bl	800a4e2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2d4:	f043 0210 	orr.w	r2, r3, #16
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2dc:	68b8      	ldr	r0, [r7, #8]
 800a2de:	f7fa f9cd 	bl	800467c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2e2:	bf00      	nop
 800a2e4:	3710      	adds	r7, #16
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}

0800a2ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b084      	sub	sp, #16
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	60f8      	str	r0, [r7, #12]
 800a2f2:	60b9      	str	r1, [r7, #8]
 800a2f4:	603b      	str	r3, [r7, #0]
 800a2f6:	4613      	mov	r3, r2
 800a2f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2fa:	e02c      	b.n	800a356 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2fc:	69bb      	ldr	r3, [r7, #24]
 800a2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a302:	d028      	beq.n	800a356 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a304:	69bb      	ldr	r3, [r7, #24]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d007      	beq.n	800a31a <UART_WaitOnFlagUntilTimeout+0x30>
 800a30a:	f7fc f959 	bl	80065c0 <HAL_GetTick>
 800a30e:	4602      	mov	r2, r0
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	1ad3      	subs	r3, r2, r3
 800a314:	69ba      	ldr	r2, [r7, #24]
 800a316:	429a      	cmp	r2, r3
 800a318:	d21d      	bcs.n	800a356 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	68da      	ldr	r2, [r3, #12]
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a328:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	695a      	ldr	r2, [r3, #20]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f022 0201 	bic.w	r2, r2, #1
 800a338:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2220      	movs	r2, #32
 800a33e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2220      	movs	r2, #32
 800a346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a352:	2303      	movs	r3, #3
 800a354:	e00f      	b.n	800a376 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	4013      	ands	r3, r2
 800a360:	68ba      	ldr	r2, [r7, #8]
 800a362:	429a      	cmp	r2, r3
 800a364:	bf0c      	ite	eq
 800a366:	2301      	moveq	r3, #1
 800a368:	2300      	movne	r3, #0
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	461a      	mov	r2, r3
 800a36e:	79fb      	ldrb	r3, [r7, #7]
 800a370:	429a      	cmp	r2, r3
 800a372:	d0c3      	beq.n	800a2fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a374:	2300      	movs	r3, #0
}
 800a376:	4618      	mov	r0, r3
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a37e:	b480      	push	{r7}
 800a380:	b085      	sub	sp, #20
 800a382:	af00      	add	r7, sp, #0
 800a384:	60f8      	str	r0, [r7, #12]
 800a386:	60b9      	str	r1, [r7, #8]
 800a388:	4613      	mov	r3, r2
 800a38a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	68ba      	ldr	r2, [r7, #8]
 800a390:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	88fa      	ldrh	r2, [r7, #6]
 800a396:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	88fa      	ldrh	r2, [r7, #6]
 800a39c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2222      	movs	r2, #34	; 0x22
 800a3a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	68da      	ldr	r2, [r3, #12]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3c2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	695a      	ldr	r2, [r3, #20]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f042 0201 	orr.w	r2, r2, #1
 800a3d2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	68da      	ldr	r2, [r3, #12]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f042 0220 	orr.w	r2, r2, #32
 800a3e2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3714      	adds	r7, #20
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bc80      	pop	{r7}
 800a3ee:	4770      	bx	lr

0800a3f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b086      	sub	sp, #24
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	60b9      	str	r1, [r7, #8]
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a3fe:	68ba      	ldr	r2, [r7, #8]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	88fa      	ldrh	r2, [r7, #6]
 800a408:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2222      	movs	r2, #34	; 0x22
 800a414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a41c:	4a23      	ldr	r2, [pc, #140]	; (800a4ac <UART_Start_Receive_DMA+0xbc>)
 800a41e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a424:	4a22      	ldr	r2, [pc, #136]	; (800a4b0 <UART_Start_Receive_DMA+0xc0>)
 800a426:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a42c:	4a21      	ldr	r2, [pc, #132]	; (800a4b4 <UART_Start_Receive_DMA+0xc4>)
 800a42e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a434:	2200      	movs	r2, #0
 800a436:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a438:	f107 0308 	add.w	r3, r7, #8
 800a43c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	3304      	adds	r3, #4
 800a448:	4619      	mov	r1, r3
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	88fb      	ldrh	r3, [r7, #6]
 800a450:	f7fc fb12 	bl	8006a78 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a454:	2300      	movs	r3, #0
 800a456:	613b      	str	r3, [r7, #16]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	613b      	str	r3, [r7, #16]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	613b      	str	r3, [r7, #16]
 800a468:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	68da      	ldr	r2, [r3, #12]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a480:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	695a      	ldr	r2, [r3, #20]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f042 0201 	orr.w	r2, r2, #1
 800a490:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	695a      	ldr	r2, [r3, #20]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4a0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3718      	adds	r7, #24
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	0800a18b 	.word	0x0800a18b
 800a4b0:	0800a221 	.word	0x0800a221
 800a4b4:	0800a257 	.word	0x0800a257

0800a4b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68da      	ldr	r2, [r3, #12]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a4ce:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2220      	movs	r2, #32
 800a4d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a4d8:	bf00      	nop
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bc80      	pop	{r7}
 800a4e0:	4770      	bx	lr

0800a4e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a4e2:	b480      	push	{r7}
 800a4e4:	b083      	sub	sp, #12
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	68da      	ldr	r2, [r3, #12]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a4f8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	695a      	ldr	r2, [r3, #20]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f022 0201 	bic.w	r2, r2, #1
 800a508:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d107      	bne.n	800a522 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	68da      	ldr	r2, [r3, #12]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f022 0210 	bic.w	r2, r2, #16
 800a520:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2220      	movs	r2, #32
 800a526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a530:	bf00      	nop
 800a532:	370c      	adds	r7, #12
 800a534:	46bd      	mov	sp, r7
 800a536:	bc80      	pop	{r7}
 800a538:	4770      	bx	lr

0800a53a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b084      	sub	sp, #16
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a546:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2200      	movs	r2, #0
 800a54c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2200      	movs	r2, #0
 800a552:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f7fa f891 	bl	800467c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a55a:	bf00      	nop
 800a55c:	3710      	adds	r7, #16
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a562:	b480      	push	{r7}
 800a564:	b085      	sub	sp, #20
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a570:	b2db      	uxtb	r3, r3
 800a572:	2b21      	cmp	r3, #33	; 0x21
 800a574:	d13e      	bne.n	800a5f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a57e:	d114      	bne.n	800a5aa <UART_Transmit_IT+0x48>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	691b      	ldr	r3, [r3, #16]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d110      	bne.n	800a5aa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6a1b      	ldr	r3, [r3, #32]
 800a58c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	881b      	ldrh	r3, [r3, #0]
 800a592:	461a      	mov	r2, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a59c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a1b      	ldr	r3, [r3, #32]
 800a5a2:	1c9a      	adds	r2, r3, #2
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	621a      	str	r2, [r3, #32]
 800a5a8:	e008      	b.n	800a5bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a1b      	ldr	r3, [r3, #32]
 800a5ae:	1c59      	adds	r1, r3, #1
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	6211      	str	r1, [r2, #32]
 800a5b4:	781a      	ldrb	r2, [r3, #0]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	3b01      	subs	r3, #1
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d10f      	bne.n	800a5f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68da      	ldr	r2, [r3, #12]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	68da      	ldr	r2, [r3, #12]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	e000      	b.n	800a5f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a5f4:	2302      	movs	r3, #2
  }
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3714      	adds	r7, #20
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bc80      	pop	{r7}
 800a5fe:	4770      	bx	lr

0800a600 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	68da      	ldr	r2, [r3, #12]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a616:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2220      	movs	r2, #32
 800a61c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f7ff fd95 	bl	800a150 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3708      	adds	r7, #8
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	2b22      	cmp	r3, #34	; 0x22
 800a642:	f040 8099 	bne.w	800a778 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a64e:	d117      	bne.n	800a680 <UART_Receive_IT+0x50>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	691b      	ldr	r3, [r3, #16]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d113      	bne.n	800a680 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a658:	2300      	movs	r3, #0
 800a65a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a660:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	b29b      	uxth	r3, r3
 800a66a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a66e:	b29a      	uxth	r2, r3
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a678:	1c9a      	adds	r2, r3, #2
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	629a      	str	r2, [r3, #40]	; 0x28
 800a67e:	e026      	b.n	800a6ce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a684:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800a686:	2300      	movs	r3, #0
 800a688:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a692:	d007      	beq.n	800a6a4 <UART_Receive_IT+0x74>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d10a      	bne.n	800a6b2 <UART_Receive_IT+0x82>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d106      	bne.n	800a6b2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	b2da      	uxtb	r2, r3
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	701a      	strb	r2, [r3, #0]
 800a6b0:	e008      	b.n	800a6c4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6be:	b2da      	uxtb	r2, r3
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c8:	1c5a      	adds	r2, r3, #1
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	4619      	mov	r1, r3
 800a6dc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d148      	bne.n	800a774 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	68da      	ldr	r2, [r3, #12]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f022 0220 	bic.w	r2, r2, #32
 800a6f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	68da      	ldr	r2, [r3, #12]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a700:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	695a      	ldr	r2, [r3, #20]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f022 0201 	bic.w	r2, r2, #1
 800a710:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2220      	movs	r2, #32
 800a716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d123      	bne.n	800a76a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2200      	movs	r2, #0
 800a726:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	68da      	ldr	r2, [r3, #12]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f022 0210 	bic.w	r2, r2, #16
 800a736:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f003 0310 	and.w	r3, r3, #16
 800a742:	2b10      	cmp	r3, #16
 800a744:	d10a      	bne.n	800a75c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a746:	2300      	movs	r3, #0
 800a748:	60fb      	str	r3, [r7, #12]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	60fb      	str	r3, [r7, #12]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	60fb      	str	r3, [r7, #12]
 800a75a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a760:	4619      	mov	r1, r3
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f7ff fd06 	bl	800a174 <HAL_UARTEx_RxEventCallback>
 800a768:	e002      	b.n	800a770 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f7f9 ff20 	bl	80045b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a770:	2300      	movs	r3, #0
 800a772:	e002      	b.n	800a77a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800a774:	2300      	movs	r3, #0
 800a776:	e000      	b.n	800a77a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800a778:	2302      	movs	r3, #2
  }
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3718      	adds	r7, #24
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
	...

0800a784 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	68da      	ldr	r2, [r3, #12]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	430a      	orrs	r2, r1
 800a7a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	689a      	ldr	r2, [r3, #8]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	691b      	ldr	r3, [r3, #16]
 800a7aa:	431a      	orrs	r2, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	695b      	ldr	r3, [r3, #20]
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a7be:	f023 030c 	bic.w	r3, r3, #12
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	6812      	ldr	r2, [r2, #0]
 800a7c6:	68b9      	ldr	r1, [r7, #8]
 800a7c8:	430b      	orrs	r3, r1
 800a7ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	699a      	ldr	r2, [r3, #24]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	430a      	orrs	r2, r1
 800a7e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4a2c      	ldr	r2, [pc, #176]	; (800a898 <UART_SetConfig+0x114>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d103      	bne.n	800a7f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a7ec:	f7fe f80c 	bl	8008808 <HAL_RCC_GetPCLK2Freq>
 800a7f0:	60f8      	str	r0, [r7, #12]
 800a7f2:	e002      	b.n	800a7fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a7f4:	f7fd fff4 	bl	80087e0 <HAL_RCC_GetPCLK1Freq>
 800a7f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a7fa:	68fa      	ldr	r2, [r7, #12]
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	4413      	add	r3, r2
 800a802:	009a      	lsls	r2, r3, #2
 800a804:	441a      	add	r2, r3
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a810:	4a22      	ldr	r2, [pc, #136]	; (800a89c <UART_SetConfig+0x118>)
 800a812:	fba2 2303 	umull	r2, r3, r2, r3
 800a816:	095b      	lsrs	r3, r3, #5
 800a818:	0119      	lsls	r1, r3, #4
 800a81a:	68fa      	ldr	r2, [r7, #12]
 800a81c:	4613      	mov	r3, r2
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	4413      	add	r3, r2
 800a822:	009a      	lsls	r2, r3, #2
 800a824:	441a      	add	r2, r3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a830:	4b1a      	ldr	r3, [pc, #104]	; (800a89c <UART_SetConfig+0x118>)
 800a832:	fba3 0302 	umull	r0, r3, r3, r2
 800a836:	095b      	lsrs	r3, r3, #5
 800a838:	2064      	movs	r0, #100	; 0x64
 800a83a:	fb00 f303 	mul.w	r3, r0, r3
 800a83e:	1ad3      	subs	r3, r2, r3
 800a840:	011b      	lsls	r3, r3, #4
 800a842:	3332      	adds	r3, #50	; 0x32
 800a844:	4a15      	ldr	r2, [pc, #84]	; (800a89c <UART_SetConfig+0x118>)
 800a846:	fba2 2303 	umull	r2, r3, r2, r3
 800a84a:	095b      	lsrs	r3, r3, #5
 800a84c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a850:	4419      	add	r1, r3
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	4613      	mov	r3, r2
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	4413      	add	r3, r2
 800a85a:	009a      	lsls	r2, r3, #2
 800a85c:	441a      	add	r2, r3
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	fbb2 f2f3 	udiv	r2, r2, r3
 800a868:	4b0c      	ldr	r3, [pc, #48]	; (800a89c <UART_SetConfig+0x118>)
 800a86a:	fba3 0302 	umull	r0, r3, r3, r2
 800a86e:	095b      	lsrs	r3, r3, #5
 800a870:	2064      	movs	r0, #100	; 0x64
 800a872:	fb00 f303 	mul.w	r3, r0, r3
 800a876:	1ad3      	subs	r3, r2, r3
 800a878:	011b      	lsls	r3, r3, #4
 800a87a:	3332      	adds	r3, #50	; 0x32
 800a87c:	4a07      	ldr	r2, [pc, #28]	; (800a89c <UART_SetConfig+0x118>)
 800a87e:	fba2 2303 	umull	r2, r3, r2, r3
 800a882:	095b      	lsrs	r3, r3, #5
 800a884:	f003 020f 	and.w	r2, r3, #15
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	440a      	add	r2, r1
 800a88e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a890:	bf00      	nop
 800a892:	3710      	adds	r7, #16
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	40013800 	.word	0x40013800
 800a89c:	51eb851f 	.word	0x51eb851f

0800a8a0 <__assert_func>:
 800a8a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a8a2:	4614      	mov	r4, r2
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	4b09      	ldr	r3, [pc, #36]	; (800a8cc <__assert_func+0x2c>)
 800a8a8:	4605      	mov	r5, r0
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	68d8      	ldr	r0, [r3, #12]
 800a8ae:	b14c      	cbz	r4, 800a8c4 <__assert_func+0x24>
 800a8b0:	4b07      	ldr	r3, [pc, #28]	; (800a8d0 <__assert_func+0x30>)
 800a8b2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a8b6:	9100      	str	r1, [sp, #0]
 800a8b8:	462b      	mov	r3, r5
 800a8ba:	4906      	ldr	r1, [pc, #24]	; (800a8d4 <__assert_func+0x34>)
 800a8bc:	f000 f814 	bl	800a8e8 <fiprintf>
 800a8c0:	f000 fc2c 	bl	800b11c <abort>
 800a8c4:	4b04      	ldr	r3, [pc, #16]	; (800a8d8 <__assert_func+0x38>)
 800a8c6:	461c      	mov	r4, r3
 800a8c8:	e7f3      	b.n	800a8b2 <__assert_func+0x12>
 800a8ca:	bf00      	nop
 800a8cc:	20000024 	.word	0x20000024
 800a8d0:	0800d764 	.word	0x0800d764
 800a8d4:	0800d771 	.word	0x0800d771
 800a8d8:	0800d79f 	.word	0x0800d79f

0800a8dc <__errno>:
 800a8dc:	4b01      	ldr	r3, [pc, #4]	; (800a8e4 <__errno+0x8>)
 800a8de:	6818      	ldr	r0, [r3, #0]
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	20000024 	.word	0x20000024

0800a8e8 <fiprintf>:
 800a8e8:	b40e      	push	{r1, r2, r3}
 800a8ea:	b503      	push	{r0, r1, lr}
 800a8ec:	4601      	mov	r1, r0
 800a8ee:	ab03      	add	r3, sp, #12
 800a8f0:	4805      	ldr	r0, [pc, #20]	; (800a908 <fiprintf+0x20>)
 800a8f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8f6:	6800      	ldr	r0, [r0, #0]
 800a8f8:	9301      	str	r3, [sp, #4]
 800a8fa:	f000 f869 	bl	800a9d0 <_vfiprintf_r>
 800a8fe:	b002      	add	sp, #8
 800a900:	f85d eb04 	ldr.w	lr, [sp], #4
 800a904:	b003      	add	sp, #12
 800a906:	4770      	bx	lr
 800a908:	20000024 	.word	0x20000024

0800a90c <__libc_init_array>:
 800a90c:	b570      	push	{r4, r5, r6, lr}
 800a90e:	2600      	movs	r6, #0
 800a910:	4d0c      	ldr	r5, [pc, #48]	; (800a944 <__libc_init_array+0x38>)
 800a912:	4c0d      	ldr	r4, [pc, #52]	; (800a948 <__libc_init_array+0x3c>)
 800a914:	1b64      	subs	r4, r4, r5
 800a916:	10a4      	asrs	r4, r4, #2
 800a918:	42a6      	cmp	r6, r4
 800a91a:	d109      	bne.n	800a930 <__libc_init_array+0x24>
 800a91c:	f002 fbb2 	bl	800d084 <_init>
 800a920:	2600      	movs	r6, #0
 800a922:	4d0a      	ldr	r5, [pc, #40]	; (800a94c <__libc_init_array+0x40>)
 800a924:	4c0a      	ldr	r4, [pc, #40]	; (800a950 <__libc_init_array+0x44>)
 800a926:	1b64      	subs	r4, r4, r5
 800a928:	10a4      	asrs	r4, r4, #2
 800a92a:	42a6      	cmp	r6, r4
 800a92c:	d105      	bne.n	800a93a <__libc_init_array+0x2e>
 800a92e:	bd70      	pop	{r4, r5, r6, pc}
 800a930:	f855 3b04 	ldr.w	r3, [r5], #4
 800a934:	4798      	blx	r3
 800a936:	3601      	adds	r6, #1
 800a938:	e7ee      	b.n	800a918 <__libc_init_array+0xc>
 800a93a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a93e:	4798      	blx	r3
 800a940:	3601      	adds	r6, #1
 800a942:	e7f2      	b.n	800a92a <__libc_init_array+0x1e>
 800a944:	0800da50 	.word	0x0800da50
 800a948:	0800da50 	.word	0x0800da50
 800a94c:	0800da50 	.word	0x0800da50
 800a950:	0800da54 	.word	0x0800da54

0800a954 <memcpy>:
 800a954:	440a      	add	r2, r1
 800a956:	4291      	cmp	r1, r2
 800a958:	f100 33ff 	add.w	r3, r0, #4294967295
 800a95c:	d100      	bne.n	800a960 <memcpy+0xc>
 800a95e:	4770      	bx	lr
 800a960:	b510      	push	{r4, lr}
 800a962:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a966:	4291      	cmp	r1, r2
 800a968:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a96c:	d1f9      	bne.n	800a962 <memcpy+0xe>
 800a96e:	bd10      	pop	{r4, pc}

0800a970 <memset>:
 800a970:	4603      	mov	r3, r0
 800a972:	4402      	add	r2, r0
 800a974:	4293      	cmp	r3, r2
 800a976:	d100      	bne.n	800a97a <memset+0xa>
 800a978:	4770      	bx	lr
 800a97a:	f803 1b01 	strb.w	r1, [r3], #1
 800a97e:	e7f9      	b.n	800a974 <memset+0x4>

0800a980 <__sfputc_r>:
 800a980:	6893      	ldr	r3, [r2, #8]
 800a982:	b410      	push	{r4}
 800a984:	3b01      	subs	r3, #1
 800a986:	2b00      	cmp	r3, #0
 800a988:	6093      	str	r3, [r2, #8]
 800a98a:	da07      	bge.n	800a99c <__sfputc_r+0x1c>
 800a98c:	6994      	ldr	r4, [r2, #24]
 800a98e:	42a3      	cmp	r3, r4
 800a990:	db01      	blt.n	800a996 <__sfputc_r+0x16>
 800a992:	290a      	cmp	r1, #10
 800a994:	d102      	bne.n	800a99c <__sfputc_r+0x1c>
 800a996:	bc10      	pop	{r4}
 800a998:	f000 bb00 	b.w	800af9c <__swbuf_r>
 800a99c:	6813      	ldr	r3, [r2, #0]
 800a99e:	1c58      	adds	r0, r3, #1
 800a9a0:	6010      	str	r0, [r2, #0]
 800a9a2:	7019      	strb	r1, [r3, #0]
 800a9a4:	4608      	mov	r0, r1
 800a9a6:	bc10      	pop	{r4}
 800a9a8:	4770      	bx	lr

0800a9aa <__sfputs_r>:
 800a9aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ac:	4606      	mov	r6, r0
 800a9ae:	460f      	mov	r7, r1
 800a9b0:	4614      	mov	r4, r2
 800a9b2:	18d5      	adds	r5, r2, r3
 800a9b4:	42ac      	cmp	r4, r5
 800a9b6:	d101      	bne.n	800a9bc <__sfputs_r+0x12>
 800a9b8:	2000      	movs	r0, #0
 800a9ba:	e007      	b.n	800a9cc <__sfputs_r+0x22>
 800a9bc:	463a      	mov	r2, r7
 800a9be:	4630      	mov	r0, r6
 800a9c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9c4:	f7ff ffdc 	bl	800a980 <__sfputc_r>
 800a9c8:	1c43      	adds	r3, r0, #1
 800a9ca:	d1f3      	bne.n	800a9b4 <__sfputs_r+0xa>
 800a9cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9d0 <_vfiprintf_r>:
 800a9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d4:	460d      	mov	r5, r1
 800a9d6:	4614      	mov	r4, r2
 800a9d8:	4698      	mov	r8, r3
 800a9da:	4606      	mov	r6, r0
 800a9dc:	b09d      	sub	sp, #116	; 0x74
 800a9de:	b118      	cbz	r0, 800a9e8 <_vfiprintf_r+0x18>
 800a9e0:	6983      	ldr	r3, [r0, #24]
 800a9e2:	b90b      	cbnz	r3, 800a9e8 <_vfiprintf_r+0x18>
 800a9e4:	f000 fcb8 	bl	800b358 <__sinit>
 800a9e8:	4b89      	ldr	r3, [pc, #548]	; (800ac10 <_vfiprintf_r+0x240>)
 800a9ea:	429d      	cmp	r5, r3
 800a9ec:	d11b      	bne.n	800aa26 <_vfiprintf_r+0x56>
 800a9ee:	6875      	ldr	r5, [r6, #4]
 800a9f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9f2:	07d9      	lsls	r1, r3, #31
 800a9f4:	d405      	bmi.n	800aa02 <_vfiprintf_r+0x32>
 800a9f6:	89ab      	ldrh	r3, [r5, #12]
 800a9f8:	059a      	lsls	r2, r3, #22
 800a9fa:	d402      	bmi.n	800aa02 <_vfiprintf_r+0x32>
 800a9fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9fe:	f000 fd49 	bl	800b494 <__retarget_lock_acquire_recursive>
 800aa02:	89ab      	ldrh	r3, [r5, #12]
 800aa04:	071b      	lsls	r3, r3, #28
 800aa06:	d501      	bpl.n	800aa0c <_vfiprintf_r+0x3c>
 800aa08:	692b      	ldr	r3, [r5, #16]
 800aa0a:	b9eb      	cbnz	r3, 800aa48 <_vfiprintf_r+0x78>
 800aa0c:	4629      	mov	r1, r5
 800aa0e:	4630      	mov	r0, r6
 800aa10:	f000 fb16 	bl	800b040 <__swsetup_r>
 800aa14:	b1c0      	cbz	r0, 800aa48 <_vfiprintf_r+0x78>
 800aa16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa18:	07dc      	lsls	r4, r3, #31
 800aa1a:	d50e      	bpl.n	800aa3a <_vfiprintf_r+0x6a>
 800aa1c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa20:	b01d      	add	sp, #116	; 0x74
 800aa22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa26:	4b7b      	ldr	r3, [pc, #492]	; (800ac14 <_vfiprintf_r+0x244>)
 800aa28:	429d      	cmp	r5, r3
 800aa2a:	d101      	bne.n	800aa30 <_vfiprintf_r+0x60>
 800aa2c:	68b5      	ldr	r5, [r6, #8]
 800aa2e:	e7df      	b.n	800a9f0 <_vfiprintf_r+0x20>
 800aa30:	4b79      	ldr	r3, [pc, #484]	; (800ac18 <_vfiprintf_r+0x248>)
 800aa32:	429d      	cmp	r5, r3
 800aa34:	bf08      	it	eq
 800aa36:	68f5      	ldreq	r5, [r6, #12]
 800aa38:	e7da      	b.n	800a9f0 <_vfiprintf_r+0x20>
 800aa3a:	89ab      	ldrh	r3, [r5, #12]
 800aa3c:	0598      	lsls	r0, r3, #22
 800aa3e:	d4ed      	bmi.n	800aa1c <_vfiprintf_r+0x4c>
 800aa40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa42:	f000 fd28 	bl	800b496 <__retarget_lock_release_recursive>
 800aa46:	e7e9      	b.n	800aa1c <_vfiprintf_r+0x4c>
 800aa48:	2300      	movs	r3, #0
 800aa4a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa4c:	2320      	movs	r3, #32
 800aa4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa52:	2330      	movs	r3, #48	; 0x30
 800aa54:	f04f 0901 	mov.w	r9, #1
 800aa58:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa5c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ac1c <_vfiprintf_r+0x24c>
 800aa60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa64:	4623      	mov	r3, r4
 800aa66:	469a      	mov	sl, r3
 800aa68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa6c:	b10a      	cbz	r2, 800aa72 <_vfiprintf_r+0xa2>
 800aa6e:	2a25      	cmp	r2, #37	; 0x25
 800aa70:	d1f9      	bne.n	800aa66 <_vfiprintf_r+0x96>
 800aa72:	ebba 0b04 	subs.w	fp, sl, r4
 800aa76:	d00b      	beq.n	800aa90 <_vfiprintf_r+0xc0>
 800aa78:	465b      	mov	r3, fp
 800aa7a:	4622      	mov	r2, r4
 800aa7c:	4629      	mov	r1, r5
 800aa7e:	4630      	mov	r0, r6
 800aa80:	f7ff ff93 	bl	800a9aa <__sfputs_r>
 800aa84:	3001      	adds	r0, #1
 800aa86:	f000 80aa 	beq.w	800abde <_vfiprintf_r+0x20e>
 800aa8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa8c:	445a      	add	r2, fp
 800aa8e:	9209      	str	r2, [sp, #36]	; 0x24
 800aa90:	f89a 3000 	ldrb.w	r3, [sl]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f000 80a2 	beq.w	800abde <_vfiprintf_r+0x20e>
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	f04f 32ff 	mov.w	r2, #4294967295
 800aaa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aaa4:	f10a 0a01 	add.w	sl, sl, #1
 800aaa8:	9304      	str	r3, [sp, #16]
 800aaaa:	9307      	str	r3, [sp, #28]
 800aaac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aab0:	931a      	str	r3, [sp, #104]	; 0x68
 800aab2:	4654      	mov	r4, sl
 800aab4:	2205      	movs	r2, #5
 800aab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaba:	4858      	ldr	r0, [pc, #352]	; (800ac1c <_vfiprintf_r+0x24c>)
 800aabc:	f000 fd52 	bl	800b564 <memchr>
 800aac0:	9a04      	ldr	r2, [sp, #16]
 800aac2:	b9d8      	cbnz	r0, 800aafc <_vfiprintf_r+0x12c>
 800aac4:	06d1      	lsls	r1, r2, #27
 800aac6:	bf44      	itt	mi
 800aac8:	2320      	movmi	r3, #32
 800aaca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aace:	0713      	lsls	r3, r2, #28
 800aad0:	bf44      	itt	mi
 800aad2:	232b      	movmi	r3, #43	; 0x2b
 800aad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aad8:	f89a 3000 	ldrb.w	r3, [sl]
 800aadc:	2b2a      	cmp	r3, #42	; 0x2a
 800aade:	d015      	beq.n	800ab0c <_vfiprintf_r+0x13c>
 800aae0:	4654      	mov	r4, sl
 800aae2:	2000      	movs	r0, #0
 800aae4:	f04f 0c0a 	mov.w	ip, #10
 800aae8:	9a07      	ldr	r2, [sp, #28]
 800aaea:	4621      	mov	r1, r4
 800aaec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aaf0:	3b30      	subs	r3, #48	; 0x30
 800aaf2:	2b09      	cmp	r3, #9
 800aaf4:	d94e      	bls.n	800ab94 <_vfiprintf_r+0x1c4>
 800aaf6:	b1b0      	cbz	r0, 800ab26 <_vfiprintf_r+0x156>
 800aaf8:	9207      	str	r2, [sp, #28]
 800aafa:	e014      	b.n	800ab26 <_vfiprintf_r+0x156>
 800aafc:	eba0 0308 	sub.w	r3, r0, r8
 800ab00:	fa09 f303 	lsl.w	r3, r9, r3
 800ab04:	4313      	orrs	r3, r2
 800ab06:	46a2      	mov	sl, r4
 800ab08:	9304      	str	r3, [sp, #16]
 800ab0a:	e7d2      	b.n	800aab2 <_vfiprintf_r+0xe2>
 800ab0c:	9b03      	ldr	r3, [sp, #12]
 800ab0e:	1d19      	adds	r1, r3, #4
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	9103      	str	r1, [sp, #12]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	bfbb      	ittet	lt
 800ab18:	425b      	neglt	r3, r3
 800ab1a:	f042 0202 	orrlt.w	r2, r2, #2
 800ab1e:	9307      	strge	r3, [sp, #28]
 800ab20:	9307      	strlt	r3, [sp, #28]
 800ab22:	bfb8      	it	lt
 800ab24:	9204      	strlt	r2, [sp, #16]
 800ab26:	7823      	ldrb	r3, [r4, #0]
 800ab28:	2b2e      	cmp	r3, #46	; 0x2e
 800ab2a:	d10c      	bne.n	800ab46 <_vfiprintf_r+0x176>
 800ab2c:	7863      	ldrb	r3, [r4, #1]
 800ab2e:	2b2a      	cmp	r3, #42	; 0x2a
 800ab30:	d135      	bne.n	800ab9e <_vfiprintf_r+0x1ce>
 800ab32:	9b03      	ldr	r3, [sp, #12]
 800ab34:	3402      	adds	r4, #2
 800ab36:	1d1a      	adds	r2, r3, #4
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	9203      	str	r2, [sp, #12]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	bfb8      	it	lt
 800ab40:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab44:	9305      	str	r3, [sp, #20]
 800ab46:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ac20 <_vfiprintf_r+0x250>
 800ab4a:	2203      	movs	r2, #3
 800ab4c:	4650      	mov	r0, sl
 800ab4e:	7821      	ldrb	r1, [r4, #0]
 800ab50:	f000 fd08 	bl	800b564 <memchr>
 800ab54:	b140      	cbz	r0, 800ab68 <_vfiprintf_r+0x198>
 800ab56:	2340      	movs	r3, #64	; 0x40
 800ab58:	eba0 000a 	sub.w	r0, r0, sl
 800ab5c:	fa03 f000 	lsl.w	r0, r3, r0
 800ab60:	9b04      	ldr	r3, [sp, #16]
 800ab62:	3401      	adds	r4, #1
 800ab64:	4303      	orrs	r3, r0
 800ab66:	9304      	str	r3, [sp, #16]
 800ab68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab6c:	2206      	movs	r2, #6
 800ab6e:	482d      	ldr	r0, [pc, #180]	; (800ac24 <_vfiprintf_r+0x254>)
 800ab70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab74:	f000 fcf6 	bl	800b564 <memchr>
 800ab78:	2800      	cmp	r0, #0
 800ab7a:	d03f      	beq.n	800abfc <_vfiprintf_r+0x22c>
 800ab7c:	4b2a      	ldr	r3, [pc, #168]	; (800ac28 <_vfiprintf_r+0x258>)
 800ab7e:	bb1b      	cbnz	r3, 800abc8 <_vfiprintf_r+0x1f8>
 800ab80:	9b03      	ldr	r3, [sp, #12]
 800ab82:	3307      	adds	r3, #7
 800ab84:	f023 0307 	bic.w	r3, r3, #7
 800ab88:	3308      	adds	r3, #8
 800ab8a:	9303      	str	r3, [sp, #12]
 800ab8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab8e:	443b      	add	r3, r7
 800ab90:	9309      	str	r3, [sp, #36]	; 0x24
 800ab92:	e767      	b.n	800aa64 <_vfiprintf_r+0x94>
 800ab94:	460c      	mov	r4, r1
 800ab96:	2001      	movs	r0, #1
 800ab98:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab9c:	e7a5      	b.n	800aaea <_vfiprintf_r+0x11a>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	f04f 0c0a 	mov.w	ip, #10
 800aba4:	4619      	mov	r1, r3
 800aba6:	3401      	adds	r4, #1
 800aba8:	9305      	str	r3, [sp, #20]
 800abaa:	4620      	mov	r0, r4
 800abac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abb0:	3a30      	subs	r2, #48	; 0x30
 800abb2:	2a09      	cmp	r2, #9
 800abb4:	d903      	bls.n	800abbe <_vfiprintf_r+0x1ee>
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d0c5      	beq.n	800ab46 <_vfiprintf_r+0x176>
 800abba:	9105      	str	r1, [sp, #20]
 800abbc:	e7c3      	b.n	800ab46 <_vfiprintf_r+0x176>
 800abbe:	4604      	mov	r4, r0
 800abc0:	2301      	movs	r3, #1
 800abc2:	fb0c 2101 	mla	r1, ip, r1, r2
 800abc6:	e7f0      	b.n	800abaa <_vfiprintf_r+0x1da>
 800abc8:	ab03      	add	r3, sp, #12
 800abca:	9300      	str	r3, [sp, #0]
 800abcc:	462a      	mov	r2, r5
 800abce:	4630      	mov	r0, r6
 800abd0:	4b16      	ldr	r3, [pc, #88]	; (800ac2c <_vfiprintf_r+0x25c>)
 800abd2:	a904      	add	r1, sp, #16
 800abd4:	f3af 8000 	nop.w
 800abd8:	4607      	mov	r7, r0
 800abda:	1c78      	adds	r0, r7, #1
 800abdc:	d1d6      	bne.n	800ab8c <_vfiprintf_r+0x1bc>
 800abde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abe0:	07d9      	lsls	r1, r3, #31
 800abe2:	d405      	bmi.n	800abf0 <_vfiprintf_r+0x220>
 800abe4:	89ab      	ldrh	r3, [r5, #12]
 800abe6:	059a      	lsls	r2, r3, #22
 800abe8:	d402      	bmi.n	800abf0 <_vfiprintf_r+0x220>
 800abea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abec:	f000 fc53 	bl	800b496 <__retarget_lock_release_recursive>
 800abf0:	89ab      	ldrh	r3, [r5, #12]
 800abf2:	065b      	lsls	r3, r3, #25
 800abf4:	f53f af12 	bmi.w	800aa1c <_vfiprintf_r+0x4c>
 800abf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abfa:	e711      	b.n	800aa20 <_vfiprintf_r+0x50>
 800abfc:	ab03      	add	r3, sp, #12
 800abfe:	9300      	str	r3, [sp, #0]
 800ac00:	462a      	mov	r2, r5
 800ac02:	4630      	mov	r0, r6
 800ac04:	4b09      	ldr	r3, [pc, #36]	; (800ac2c <_vfiprintf_r+0x25c>)
 800ac06:	a904      	add	r1, sp, #16
 800ac08:	f000 f882 	bl	800ad10 <_printf_i>
 800ac0c:	e7e4      	b.n	800abd8 <_vfiprintf_r+0x208>
 800ac0e:	bf00      	nop
 800ac10:	0800d7f8 	.word	0x0800d7f8
 800ac14:	0800d818 	.word	0x0800d818
 800ac18:	0800d7d8 	.word	0x0800d7d8
 800ac1c:	0800d7a4 	.word	0x0800d7a4
 800ac20:	0800d7aa 	.word	0x0800d7aa
 800ac24:	0800d7ae 	.word	0x0800d7ae
 800ac28:	00000000 	.word	0x00000000
 800ac2c:	0800a9ab 	.word	0x0800a9ab

0800ac30 <_printf_common>:
 800ac30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac34:	4616      	mov	r6, r2
 800ac36:	4699      	mov	r9, r3
 800ac38:	688a      	ldr	r2, [r1, #8]
 800ac3a:	690b      	ldr	r3, [r1, #16]
 800ac3c:	4607      	mov	r7, r0
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	bfb8      	it	lt
 800ac42:	4613      	movlt	r3, r2
 800ac44:	6033      	str	r3, [r6, #0]
 800ac46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac4a:	460c      	mov	r4, r1
 800ac4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac50:	b10a      	cbz	r2, 800ac56 <_printf_common+0x26>
 800ac52:	3301      	adds	r3, #1
 800ac54:	6033      	str	r3, [r6, #0]
 800ac56:	6823      	ldr	r3, [r4, #0]
 800ac58:	0699      	lsls	r1, r3, #26
 800ac5a:	bf42      	ittt	mi
 800ac5c:	6833      	ldrmi	r3, [r6, #0]
 800ac5e:	3302      	addmi	r3, #2
 800ac60:	6033      	strmi	r3, [r6, #0]
 800ac62:	6825      	ldr	r5, [r4, #0]
 800ac64:	f015 0506 	ands.w	r5, r5, #6
 800ac68:	d106      	bne.n	800ac78 <_printf_common+0x48>
 800ac6a:	f104 0a19 	add.w	sl, r4, #25
 800ac6e:	68e3      	ldr	r3, [r4, #12]
 800ac70:	6832      	ldr	r2, [r6, #0]
 800ac72:	1a9b      	subs	r3, r3, r2
 800ac74:	42ab      	cmp	r3, r5
 800ac76:	dc28      	bgt.n	800acca <_printf_common+0x9a>
 800ac78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac7c:	1e13      	subs	r3, r2, #0
 800ac7e:	6822      	ldr	r2, [r4, #0]
 800ac80:	bf18      	it	ne
 800ac82:	2301      	movne	r3, #1
 800ac84:	0692      	lsls	r2, r2, #26
 800ac86:	d42d      	bmi.n	800ace4 <_printf_common+0xb4>
 800ac88:	4649      	mov	r1, r9
 800ac8a:	4638      	mov	r0, r7
 800ac8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac90:	47c0      	blx	r8
 800ac92:	3001      	adds	r0, #1
 800ac94:	d020      	beq.n	800acd8 <_printf_common+0xa8>
 800ac96:	6823      	ldr	r3, [r4, #0]
 800ac98:	68e5      	ldr	r5, [r4, #12]
 800ac9a:	f003 0306 	and.w	r3, r3, #6
 800ac9e:	2b04      	cmp	r3, #4
 800aca0:	bf18      	it	ne
 800aca2:	2500      	movne	r5, #0
 800aca4:	6832      	ldr	r2, [r6, #0]
 800aca6:	f04f 0600 	mov.w	r6, #0
 800acaa:	68a3      	ldr	r3, [r4, #8]
 800acac:	bf08      	it	eq
 800acae:	1aad      	subeq	r5, r5, r2
 800acb0:	6922      	ldr	r2, [r4, #16]
 800acb2:	bf08      	it	eq
 800acb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acb8:	4293      	cmp	r3, r2
 800acba:	bfc4      	itt	gt
 800acbc:	1a9b      	subgt	r3, r3, r2
 800acbe:	18ed      	addgt	r5, r5, r3
 800acc0:	341a      	adds	r4, #26
 800acc2:	42b5      	cmp	r5, r6
 800acc4:	d11a      	bne.n	800acfc <_printf_common+0xcc>
 800acc6:	2000      	movs	r0, #0
 800acc8:	e008      	b.n	800acdc <_printf_common+0xac>
 800acca:	2301      	movs	r3, #1
 800accc:	4652      	mov	r2, sl
 800acce:	4649      	mov	r1, r9
 800acd0:	4638      	mov	r0, r7
 800acd2:	47c0      	blx	r8
 800acd4:	3001      	adds	r0, #1
 800acd6:	d103      	bne.n	800ace0 <_printf_common+0xb0>
 800acd8:	f04f 30ff 	mov.w	r0, #4294967295
 800acdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ace0:	3501      	adds	r5, #1
 800ace2:	e7c4      	b.n	800ac6e <_printf_common+0x3e>
 800ace4:	2030      	movs	r0, #48	; 0x30
 800ace6:	18e1      	adds	r1, r4, r3
 800ace8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800acec:	1c5a      	adds	r2, r3, #1
 800acee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800acf2:	4422      	add	r2, r4
 800acf4:	3302      	adds	r3, #2
 800acf6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800acfa:	e7c5      	b.n	800ac88 <_printf_common+0x58>
 800acfc:	2301      	movs	r3, #1
 800acfe:	4622      	mov	r2, r4
 800ad00:	4649      	mov	r1, r9
 800ad02:	4638      	mov	r0, r7
 800ad04:	47c0      	blx	r8
 800ad06:	3001      	adds	r0, #1
 800ad08:	d0e6      	beq.n	800acd8 <_printf_common+0xa8>
 800ad0a:	3601      	adds	r6, #1
 800ad0c:	e7d9      	b.n	800acc2 <_printf_common+0x92>
	...

0800ad10 <_printf_i>:
 800ad10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad14:	7e0f      	ldrb	r7, [r1, #24]
 800ad16:	4691      	mov	r9, r2
 800ad18:	2f78      	cmp	r7, #120	; 0x78
 800ad1a:	4680      	mov	r8, r0
 800ad1c:	460c      	mov	r4, r1
 800ad1e:	469a      	mov	sl, r3
 800ad20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad26:	d807      	bhi.n	800ad38 <_printf_i+0x28>
 800ad28:	2f62      	cmp	r7, #98	; 0x62
 800ad2a:	d80a      	bhi.n	800ad42 <_printf_i+0x32>
 800ad2c:	2f00      	cmp	r7, #0
 800ad2e:	f000 80d9 	beq.w	800aee4 <_printf_i+0x1d4>
 800ad32:	2f58      	cmp	r7, #88	; 0x58
 800ad34:	f000 80a4 	beq.w	800ae80 <_printf_i+0x170>
 800ad38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad40:	e03a      	b.n	800adb8 <_printf_i+0xa8>
 800ad42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad46:	2b15      	cmp	r3, #21
 800ad48:	d8f6      	bhi.n	800ad38 <_printf_i+0x28>
 800ad4a:	a101      	add	r1, pc, #4	; (adr r1, 800ad50 <_printf_i+0x40>)
 800ad4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad50:	0800ada9 	.word	0x0800ada9
 800ad54:	0800adbd 	.word	0x0800adbd
 800ad58:	0800ad39 	.word	0x0800ad39
 800ad5c:	0800ad39 	.word	0x0800ad39
 800ad60:	0800ad39 	.word	0x0800ad39
 800ad64:	0800ad39 	.word	0x0800ad39
 800ad68:	0800adbd 	.word	0x0800adbd
 800ad6c:	0800ad39 	.word	0x0800ad39
 800ad70:	0800ad39 	.word	0x0800ad39
 800ad74:	0800ad39 	.word	0x0800ad39
 800ad78:	0800ad39 	.word	0x0800ad39
 800ad7c:	0800aecb 	.word	0x0800aecb
 800ad80:	0800aded 	.word	0x0800aded
 800ad84:	0800aead 	.word	0x0800aead
 800ad88:	0800ad39 	.word	0x0800ad39
 800ad8c:	0800ad39 	.word	0x0800ad39
 800ad90:	0800aeed 	.word	0x0800aeed
 800ad94:	0800ad39 	.word	0x0800ad39
 800ad98:	0800aded 	.word	0x0800aded
 800ad9c:	0800ad39 	.word	0x0800ad39
 800ada0:	0800ad39 	.word	0x0800ad39
 800ada4:	0800aeb5 	.word	0x0800aeb5
 800ada8:	682b      	ldr	r3, [r5, #0]
 800adaa:	1d1a      	adds	r2, r3, #4
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	602a      	str	r2, [r5, #0]
 800adb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800adb8:	2301      	movs	r3, #1
 800adba:	e0a4      	b.n	800af06 <_printf_i+0x1f6>
 800adbc:	6820      	ldr	r0, [r4, #0]
 800adbe:	6829      	ldr	r1, [r5, #0]
 800adc0:	0606      	lsls	r6, r0, #24
 800adc2:	f101 0304 	add.w	r3, r1, #4
 800adc6:	d50a      	bpl.n	800adde <_printf_i+0xce>
 800adc8:	680e      	ldr	r6, [r1, #0]
 800adca:	602b      	str	r3, [r5, #0]
 800adcc:	2e00      	cmp	r6, #0
 800adce:	da03      	bge.n	800add8 <_printf_i+0xc8>
 800add0:	232d      	movs	r3, #45	; 0x2d
 800add2:	4276      	negs	r6, r6
 800add4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800add8:	230a      	movs	r3, #10
 800adda:	485e      	ldr	r0, [pc, #376]	; (800af54 <_printf_i+0x244>)
 800addc:	e019      	b.n	800ae12 <_printf_i+0x102>
 800adde:	680e      	ldr	r6, [r1, #0]
 800ade0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ade4:	602b      	str	r3, [r5, #0]
 800ade6:	bf18      	it	ne
 800ade8:	b236      	sxthne	r6, r6
 800adea:	e7ef      	b.n	800adcc <_printf_i+0xbc>
 800adec:	682b      	ldr	r3, [r5, #0]
 800adee:	6820      	ldr	r0, [r4, #0]
 800adf0:	1d19      	adds	r1, r3, #4
 800adf2:	6029      	str	r1, [r5, #0]
 800adf4:	0601      	lsls	r1, r0, #24
 800adf6:	d501      	bpl.n	800adfc <_printf_i+0xec>
 800adf8:	681e      	ldr	r6, [r3, #0]
 800adfa:	e002      	b.n	800ae02 <_printf_i+0xf2>
 800adfc:	0646      	lsls	r6, r0, #25
 800adfe:	d5fb      	bpl.n	800adf8 <_printf_i+0xe8>
 800ae00:	881e      	ldrh	r6, [r3, #0]
 800ae02:	2f6f      	cmp	r7, #111	; 0x6f
 800ae04:	bf0c      	ite	eq
 800ae06:	2308      	moveq	r3, #8
 800ae08:	230a      	movne	r3, #10
 800ae0a:	4852      	ldr	r0, [pc, #328]	; (800af54 <_printf_i+0x244>)
 800ae0c:	2100      	movs	r1, #0
 800ae0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae12:	6865      	ldr	r5, [r4, #4]
 800ae14:	2d00      	cmp	r5, #0
 800ae16:	bfa8      	it	ge
 800ae18:	6821      	ldrge	r1, [r4, #0]
 800ae1a:	60a5      	str	r5, [r4, #8]
 800ae1c:	bfa4      	itt	ge
 800ae1e:	f021 0104 	bicge.w	r1, r1, #4
 800ae22:	6021      	strge	r1, [r4, #0]
 800ae24:	b90e      	cbnz	r6, 800ae2a <_printf_i+0x11a>
 800ae26:	2d00      	cmp	r5, #0
 800ae28:	d04d      	beq.n	800aec6 <_printf_i+0x1b6>
 800ae2a:	4615      	mov	r5, r2
 800ae2c:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae30:	fb03 6711 	mls	r7, r3, r1, r6
 800ae34:	5dc7      	ldrb	r7, [r0, r7]
 800ae36:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae3a:	4637      	mov	r7, r6
 800ae3c:	42bb      	cmp	r3, r7
 800ae3e:	460e      	mov	r6, r1
 800ae40:	d9f4      	bls.n	800ae2c <_printf_i+0x11c>
 800ae42:	2b08      	cmp	r3, #8
 800ae44:	d10b      	bne.n	800ae5e <_printf_i+0x14e>
 800ae46:	6823      	ldr	r3, [r4, #0]
 800ae48:	07de      	lsls	r6, r3, #31
 800ae4a:	d508      	bpl.n	800ae5e <_printf_i+0x14e>
 800ae4c:	6923      	ldr	r3, [r4, #16]
 800ae4e:	6861      	ldr	r1, [r4, #4]
 800ae50:	4299      	cmp	r1, r3
 800ae52:	bfde      	ittt	le
 800ae54:	2330      	movle	r3, #48	; 0x30
 800ae56:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae5e:	1b52      	subs	r2, r2, r5
 800ae60:	6122      	str	r2, [r4, #16]
 800ae62:	464b      	mov	r3, r9
 800ae64:	4621      	mov	r1, r4
 800ae66:	4640      	mov	r0, r8
 800ae68:	f8cd a000 	str.w	sl, [sp]
 800ae6c:	aa03      	add	r2, sp, #12
 800ae6e:	f7ff fedf 	bl	800ac30 <_printf_common>
 800ae72:	3001      	adds	r0, #1
 800ae74:	d14c      	bne.n	800af10 <_printf_i+0x200>
 800ae76:	f04f 30ff 	mov.w	r0, #4294967295
 800ae7a:	b004      	add	sp, #16
 800ae7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae80:	4834      	ldr	r0, [pc, #208]	; (800af54 <_printf_i+0x244>)
 800ae82:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ae86:	6829      	ldr	r1, [r5, #0]
 800ae88:	6823      	ldr	r3, [r4, #0]
 800ae8a:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae8e:	6029      	str	r1, [r5, #0]
 800ae90:	061d      	lsls	r5, r3, #24
 800ae92:	d514      	bpl.n	800aebe <_printf_i+0x1ae>
 800ae94:	07df      	lsls	r7, r3, #31
 800ae96:	bf44      	itt	mi
 800ae98:	f043 0320 	orrmi.w	r3, r3, #32
 800ae9c:	6023      	strmi	r3, [r4, #0]
 800ae9e:	b91e      	cbnz	r6, 800aea8 <_printf_i+0x198>
 800aea0:	6823      	ldr	r3, [r4, #0]
 800aea2:	f023 0320 	bic.w	r3, r3, #32
 800aea6:	6023      	str	r3, [r4, #0]
 800aea8:	2310      	movs	r3, #16
 800aeaa:	e7af      	b.n	800ae0c <_printf_i+0xfc>
 800aeac:	6823      	ldr	r3, [r4, #0]
 800aeae:	f043 0320 	orr.w	r3, r3, #32
 800aeb2:	6023      	str	r3, [r4, #0]
 800aeb4:	2378      	movs	r3, #120	; 0x78
 800aeb6:	4828      	ldr	r0, [pc, #160]	; (800af58 <_printf_i+0x248>)
 800aeb8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aebc:	e7e3      	b.n	800ae86 <_printf_i+0x176>
 800aebe:	0659      	lsls	r1, r3, #25
 800aec0:	bf48      	it	mi
 800aec2:	b2b6      	uxthmi	r6, r6
 800aec4:	e7e6      	b.n	800ae94 <_printf_i+0x184>
 800aec6:	4615      	mov	r5, r2
 800aec8:	e7bb      	b.n	800ae42 <_printf_i+0x132>
 800aeca:	682b      	ldr	r3, [r5, #0]
 800aecc:	6826      	ldr	r6, [r4, #0]
 800aece:	1d18      	adds	r0, r3, #4
 800aed0:	6961      	ldr	r1, [r4, #20]
 800aed2:	6028      	str	r0, [r5, #0]
 800aed4:	0635      	lsls	r5, r6, #24
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	d501      	bpl.n	800aede <_printf_i+0x1ce>
 800aeda:	6019      	str	r1, [r3, #0]
 800aedc:	e002      	b.n	800aee4 <_printf_i+0x1d4>
 800aede:	0670      	lsls	r0, r6, #25
 800aee0:	d5fb      	bpl.n	800aeda <_printf_i+0x1ca>
 800aee2:	8019      	strh	r1, [r3, #0]
 800aee4:	2300      	movs	r3, #0
 800aee6:	4615      	mov	r5, r2
 800aee8:	6123      	str	r3, [r4, #16]
 800aeea:	e7ba      	b.n	800ae62 <_printf_i+0x152>
 800aeec:	682b      	ldr	r3, [r5, #0]
 800aeee:	2100      	movs	r1, #0
 800aef0:	1d1a      	adds	r2, r3, #4
 800aef2:	602a      	str	r2, [r5, #0]
 800aef4:	681d      	ldr	r5, [r3, #0]
 800aef6:	6862      	ldr	r2, [r4, #4]
 800aef8:	4628      	mov	r0, r5
 800aefa:	f000 fb33 	bl	800b564 <memchr>
 800aefe:	b108      	cbz	r0, 800af04 <_printf_i+0x1f4>
 800af00:	1b40      	subs	r0, r0, r5
 800af02:	6060      	str	r0, [r4, #4]
 800af04:	6863      	ldr	r3, [r4, #4]
 800af06:	6123      	str	r3, [r4, #16]
 800af08:	2300      	movs	r3, #0
 800af0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af0e:	e7a8      	b.n	800ae62 <_printf_i+0x152>
 800af10:	462a      	mov	r2, r5
 800af12:	4649      	mov	r1, r9
 800af14:	4640      	mov	r0, r8
 800af16:	6923      	ldr	r3, [r4, #16]
 800af18:	47d0      	blx	sl
 800af1a:	3001      	adds	r0, #1
 800af1c:	d0ab      	beq.n	800ae76 <_printf_i+0x166>
 800af1e:	6823      	ldr	r3, [r4, #0]
 800af20:	079b      	lsls	r3, r3, #30
 800af22:	d413      	bmi.n	800af4c <_printf_i+0x23c>
 800af24:	68e0      	ldr	r0, [r4, #12]
 800af26:	9b03      	ldr	r3, [sp, #12]
 800af28:	4298      	cmp	r0, r3
 800af2a:	bfb8      	it	lt
 800af2c:	4618      	movlt	r0, r3
 800af2e:	e7a4      	b.n	800ae7a <_printf_i+0x16a>
 800af30:	2301      	movs	r3, #1
 800af32:	4632      	mov	r2, r6
 800af34:	4649      	mov	r1, r9
 800af36:	4640      	mov	r0, r8
 800af38:	47d0      	blx	sl
 800af3a:	3001      	adds	r0, #1
 800af3c:	d09b      	beq.n	800ae76 <_printf_i+0x166>
 800af3e:	3501      	adds	r5, #1
 800af40:	68e3      	ldr	r3, [r4, #12]
 800af42:	9903      	ldr	r1, [sp, #12]
 800af44:	1a5b      	subs	r3, r3, r1
 800af46:	42ab      	cmp	r3, r5
 800af48:	dcf2      	bgt.n	800af30 <_printf_i+0x220>
 800af4a:	e7eb      	b.n	800af24 <_printf_i+0x214>
 800af4c:	2500      	movs	r5, #0
 800af4e:	f104 0619 	add.w	r6, r4, #25
 800af52:	e7f5      	b.n	800af40 <_printf_i+0x230>
 800af54:	0800d7b5 	.word	0x0800d7b5
 800af58:	0800d7c6 	.word	0x0800d7c6

0800af5c <siprintf>:
 800af5c:	b40e      	push	{r1, r2, r3}
 800af5e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800af62:	b500      	push	{lr}
 800af64:	b09c      	sub	sp, #112	; 0x70
 800af66:	ab1d      	add	r3, sp, #116	; 0x74
 800af68:	9002      	str	r0, [sp, #8]
 800af6a:	9006      	str	r0, [sp, #24]
 800af6c:	9107      	str	r1, [sp, #28]
 800af6e:	9104      	str	r1, [sp, #16]
 800af70:	4808      	ldr	r0, [pc, #32]	; (800af94 <siprintf+0x38>)
 800af72:	4909      	ldr	r1, [pc, #36]	; (800af98 <siprintf+0x3c>)
 800af74:	f853 2b04 	ldr.w	r2, [r3], #4
 800af78:	9105      	str	r1, [sp, #20]
 800af7a:	6800      	ldr	r0, [r0, #0]
 800af7c:	a902      	add	r1, sp, #8
 800af7e:	9301      	str	r3, [sp, #4]
 800af80:	f000 fc7e 	bl	800b880 <_svfiprintf_r>
 800af84:	2200      	movs	r2, #0
 800af86:	9b02      	ldr	r3, [sp, #8]
 800af88:	701a      	strb	r2, [r3, #0]
 800af8a:	b01c      	add	sp, #112	; 0x70
 800af8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800af90:	b003      	add	sp, #12
 800af92:	4770      	bx	lr
 800af94:	20000024 	.word	0x20000024
 800af98:	ffff0208 	.word	0xffff0208

0800af9c <__swbuf_r>:
 800af9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af9e:	460e      	mov	r6, r1
 800afa0:	4614      	mov	r4, r2
 800afa2:	4605      	mov	r5, r0
 800afa4:	b118      	cbz	r0, 800afae <__swbuf_r+0x12>
 800afa6:	6983      	ldr	r3, [r0, #24]
 800afa8:	b90b      	cbnz	r3, 800afae <__swbuf_r+0x12>
 800afaa:	f000 f9d5 	bl	800b358 <__sinit>
 800afae:	4b21      	ldr	r3, [pc, #132]	; (800b034 <__swbuf_r+0x98>)
 800afb0:	429c      	cmp	r4, r3
 800afb2:	d12b      	bne.n	800b00c <__swbuf_r+0x70>
 800afb4:	686c      	ldr	r4, [r5, #4]
 800afb6:	69a3      	ldr	r3, [r4, #24]
 800afb8:	60a3      	str	r3, [r4, #8]
 800afba:	89a3      	ldrh	r3, [r4, #12]
 800afbc:	071a      	lsls	r2, r3, #28
 800afbe:	d52f      	bpl.n	800b020 <__swbuf_r+0x84>
 800afc0:	6923      	ldr	r3, [r4, #16]
 800afc2:	b36b      	cbz	r3, 800b020 <__swbuf_r+0x84>
 800afc4:	6923      	ldr	r3, [r4, #16]
 800afc6:	6820      	ldr	r0, [r4, #0]
 800afc8:	b2f6      	uxtb	r6, r6
 800afca:	1ac0      	subs	r0, r0, r3
 800afcc:	6963      	ldr	r3, [r4, #20]
 800afce:	4637      	mov	r7, r6
 800afd0:	4283      	cmp	r3, r0
 800afd2:	dc04      	bgt.n	800afde <__swbuf_r+0x42>
 800afd4:	4621      	mov	r1, r4
 800afd6:	4628      	mov	r0, r5
 800afd8:	f000 f92a 	bl	800b230 <_fflush_r>
 800afdc:	bb30      	cbnz	r0, 800b02c <__swbuf_r+0x90>
 800afde:	68a3      	ldr	r3, [r4, #8]
 800afe0:	3001      	adds	r0, #1
 800afe2:	3b01      	subs	r3, #1
 800afe4:	60a3      	str	r3, [r4, #8]
 800afe6:	6823      	ldr	r3, [r4, #0]
 800afe8:	1c5a      	adds	r2, r3, #1
 800afea:	6022      	str	r2, [r4, #0]
 800afec:	701e      	strb	r6, [r3, #0]
 800afee:	6963      	ldr	r3, [r4, #20]
 800aff0:	4283      	cmp	r3, r0
 800aff2:	d004      	beq.n	800affe <__swbuf_r+0x62>
 800aff4:	89a3      	ldrh	r3, [r4, #12]
 800aff6:	07db      	lsls	r3, r3, #31
 800aff8:	d506      	bpl.n	800b008 <__swbuf_r+0x6c>
 800affa:	2e0a      	cmp	r6, #10
 800affc:	d104      	bne.n	800b008 <__swbuf_r+0x6c>
 800affe:	4621      	mov	r1, r4
 800b000:	4628      	mov	r0, r5
 800b002:	f000 f915 	bl	800b230 <_fflush_r>
 800b006:	b988      	cbnz	r0, 800b02c <__swbuf_r+0x90>
 800b008:	4638      	mov	r0, r7
 800b00a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b00c:	4b0a      	ldr	r3, [pc, #40]	; (800b038 <__swbuf_r+0x9c>)
 800b00e:	429c      	cmp	r4, r3
 800b010:	d101      	bne.n	800b016 <__swbuf_r+0x7a>
 800b012:	68ac      	ldr	r4, [r5, #8]
 800b014:	e7cf      	b.n	800afb6 <__swbuf_r+0x1a>
 800b016:	4b09      	ldr	r3, [pc, #36]	; (800b03c <__swbuf_r+0xa0>)
 800b018:	429c      	cmp	r4, r3
 800b01a:	bf08      	it	eq
 800b01c:	68ec      	ldreq	r4, [r5, #12]
 800b01e:	e7ca      	b.n	800afb6 <__swbuf_r+0x1a>
 800b020:	4621      	mov	r1, r4
 800b022:	4628      	mov	r0, r5
 800b024:	f000 f80c 	bl	800b040 <__swsetup_r>
 800b028:	2800      	cmp	r0, #0
 800b02a:	d0cb      	beq.n	800afc4 <__swbuf_r+0x28>
 800b02c:	f04f 37ff 	mov.w	r7, #4294967295
 800b030:	e7ea      	b.n	800b008 <__swbuf_r+0x6c>
 800b032:	bf00      	nop
 800b034:	0800d7f8 	.word	0x0800d7f8
 800b038:	0800d818 	.word	0x0800d818
 800b03c:	0800d7d8 	.word	0x0800d7d8

0800b040 <__swsetup_r>:
 800b040:	4b32      	ldr	r3, [pc, #200]	; (800b10c <__swsetup_r+0xcc>)
 800b042:	b570      	push	{r4, r5, r6, lr}
 800b044:	681d      	ldr	r5, [r3, #0]
 800b046:	4606      	mov	r6, r0
 800b048:	460c      	mov	r4, r1
 800b04a:	b125      	cbz	r5, 800b056 <__swsetup_r+0x16>
 800b04c:	69ab      	ldr	r3, [r5, #24]
 800b04e:	b913      	cbnz	r3, 800b056 <__swsetup_r+0x16>
 800b050:	4628      	mov	r0, r5
 800b052:	f000 f981 	bl	800b358 <__sinit>
 800b056:	4b2e      	ldr	r3, [pc, #184]	; (800b110 <__swsetup_r+0xd0>)
 800b058:	429c      	cmp	r4, r3
 800b05a:	d10f      	bne.n	800b07c <__swsetup_r+0x3c>
 800b05c:	686c      	ldr	r4, [r5, #4]
 800b05e:	89a3      	ldrh	r3, [r4, #12]
 800b060:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b064:	0719      	lsls	r1, r3, #28
 800b066:	d42c      	bmi.n	800b0c2 <__swsetup_r+0x82>
 800b068:	06dd      	lsls	r5, r3, #27
 800b06a:	d411      	bmi.n	800b090 <__swsetup_r+0x50>
 800b06c:	2309      	movs	r3, #9
 800b06e:	6033      	str	r3, [r6, #0]
 800b070:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b074:	f04f 30ff 	mov.w	r0, #4294967295
 800b078:	81a3      	strh	r3, [r4, #12]
 800b07a:	e03e      	b.n	800b0fa <__swsetup_r+0xba>
 800b07c:	4b25      	ldr	r3, [pc, #148]	; (800b114 <__swsetup_r+0xd4>)
 800b07e:	429c      	cmp	r4, r3
 800b080:	d101      	bne.n	800b086 <__swsetup_r+0x46>
 800b082:	68ac      	ldr	r4, [r5, #8]
 800b084:	e7eb      	b.n	800b05e <__swsetup_r+0x1e>
 800b086:	4b24      	ldr	r3, [pc, #144]	; (800b118 <__swsetup_r+0xd8>)
 800b088:	429c      	cmp	r4, r3
 800b08a:	bf08      	it	eq
 800b08c:	68ec      	ldreq	r4, [r5, #12]
 800b08e:	e7e6      	b.n	800b05e <__swsetup_r+0x1e>
 800b090:	0758      	lsls	r0, r3, #29
 800b092:	d512      	bpl.n	800b0ba <__swsetup_r+0x7a>
 800b094:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b096:	b141      	cbz	r1, 800b0aa <__swsetup_r+0x6a>
 800b098:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b09c:	4299      	cmp	r1, r3
 800b09e:	d002      	beq.n	800b0a6 <__swsetup_r+0x66>
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	f000 fa87 	bl	800b5b4 <_free_r>
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	6363      	str	r3, [r4, #52]	; 0x34
 800b0aa:	89a3      	ldrh	r3, [r4, #12]
 800b0ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b0b0:	81a3      	strh	r3, [r4, #12]
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	6063      	str	r3, [r4, #4]
 800b0b6:	6923      	ldr	r3, [r4, #16]
 800b0b8:	6023      	str	r3, [r4, #0]
 800b0ba:	89a3      	ldrh	r3, [r4, #12]
 800b0bc:	f043 0308 	orr.w	r3, r3, #8
 800b0c0:	81a3      	strh	r3, [r4, #12]
 800b0c2:	6923      	ldr	r3, [r4, #16]
 800b0c4:	b94b      	cbnz	r3, 800b0da <__swsetup_r+0x9a>
 800b0c6:	89a3      	ldrh	r3, [r4, #12]
 800b0c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b0cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0d0:	d003      	beq.n	800b0da <__swsetup_r+0x9a>
 800b0d2:	4621      	mov	r1, r4
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	f000 fa05 	bl	800b4e4 <__smakebuf_r>
 800b0da:	89a0      	ldrh	r0, [r4, #12]
 800b0dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0e0:	f010 0301 	ands.w	r3, r0, #1
 800b0e4:	d00a      	beq.n	800b0fc <__swsetup_r+0xbc>
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	60a3      	str	r3, [r4, #8]
 800b0ea:	6963      	ldr	r3, [r4, #20]
 800b0ec:	425b      	negs	r3, r3
 800b0ee:	61a3      	str	r3, [r4, #24]
 800b0f0:	6923      	ldr	r3, [r4, #16]
 800b0f2:	b943      	cbnz	r3, 800b106 <__swsetup_r+0xc6>
 800b0f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b0f8:	d1ba      	bne.n	800b070 <__swsetup_r+0x30>
 800b0fa:	bd70      	pop	{r4, r5, r6, pc}
 800b0fc:	0781      	lsls	r1, r0, #30
 800b0fe:	bf58      	it	pl
 800b100:	6963      	ldrpl	r3, [r4, #20]
 800b102:	60a3      	str	r3, [r4, #8]
 800b104:	e7f4      	b.n	800b0f0 <__swsetup_r+0xb0>
 800b106:	2000      	movs	r0, #0
 800b108:	e7f7      	b.n	800b0fa <__swsetup_r+0xba>
 800b10a:	bf00      	nop
 800b10c:	20000024 	.word	0x20000024
 800b110:	0800d7f8 	.word	0x0800d7f8
 800b114:	0800d818 	.word	0x0800d818
 800b118:	0800d7d8 	.word	0x0800d7d8

0800b11c <abort>:
 800b11c:	2006      	movs	r0, #6
 800b11e:	b508      	push	{r3, lr}
 800b120:	f000 fce6 	bl	800baf0 <raise>
 800b124:	2001      	movs	r0, #1
 800b126:	f7fa ffd2 	bl	80060ce <_exit>
	...

0800b12c <__sflush_r>:
 800b12c:	898a      	ldrh	r2, [r1, #12]
 800b12e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b130:	4605      	mov	r5, r0
 800b132:	0710      	lsls	r0, r2, #28
 800b134:	460c      	mov	r4, r1
 800b136:	d457      	bmi.n	800b1e8 <__sflush_r+0xbc>
 800b138:	684b      	ldr	r3, [r1, #4]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	dc04      	bgt.n	800b148 <__sflush_r+0x1c>
 800b13e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b140:	2b00      	cmp	r3, #0
 800b142:	dc01      	bgt.n	800b148 <__sflush_r+0x1c>
 800b144:	2000      	movs	r0, #0
 800b146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b148:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b14a:	2e00      	cmp	r6, #0
 800b14c:	d0fa      	beq.n	800b144 <__sflush_r+0x18>
 800b14e:	2300      	movs	r3, #0
 800b150:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b154:	682f      	ldr	r7, [r5, #0]
 800b156:	602b      	str	r3, [r5, #0]
 800b158:	d032      	beq.n	800b1c0 <__sflush_r+0x94>
 800b15a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b15c:	89a3      	ldrh	r3, [r4, #12]
 800b15e:	075a      	lsls	r2, r3, #29
 800b160:	d505      	bpl.n	800b16e <__sflush_r+0x42>
 800b162:	6863      	ldr	r3, [r4, #4]
 800b164:	1ac0      	subs	r0, r0, r3
 800b166:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b168:	b10b      	cbz	r3, 800b16e <__sflush_r+0x42>
 800b16a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b16c:	1ac0      	subs	r0, r0, r3
 800b16e:	2300      	movs	r3, #0
 800b170:	4602      	mov	r2, r0
 800b172:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b174:	4628      	mov	r0, r5
 800b176:	6a21      	ldr	r1, [r4, #32]
 800b178:	47b0      	blx	r6
 800b17a:	1c43      	adds	r3, r0, #1
 800b17c:	89a3      	ldrh	r3, [r4, #12]
 800b17e:	d106      	bne.n	800b18e <__sflush_r+0x62>
 800b180:	6829      	ldr	r1, [r5, #0]
 800b182:	291d      	cmp	r1, #29
 800b184:	d82c      	bhi.n	800b1e0 <__sflush_r+0xb4>
 800b186:	4a29      	ldr	r2, [pc, #164]	; (800b22c <__sflush_r+0x100>)
 800b188:	40ca      	lsrs	r2, r1
 800b18a:	07d6      	lsls	r6, r2, #31
 800b18c:	d528      	bpl.n	800b1e0 <__sflush_r+0xb4>
 800b18e:	2200      	movs	r2, #0
 800b190:	6062      	str	r2, [r4, #4]
 800b192:	6922      	ldr	r2, [r4, #16]
 800b194:	04d9      	lsls	r1, r3, #19
 800b196:	6022      	str	r2, [r4, #0]
 800b198:	d504      	bpl.n	800b1a4 <__sflush_r+0x78>
 800b19a:	1c42      	adds	r2, r0, #1
 800b19c:	d101      	bne.n	800b1a2 <__sflush_r+0x76>
 800b19e:	682b      	ldr	r3, [r5, #0]
 800b1a0:	b903      	cbnz	r3, 800b1a4 <__sflush_r+0x78>
 800b1a2:	6560      	str	r0, [r4, #84]	; 0x54
 800b1a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1a6:	602f      	str	r7, [r5, #0]
 800b1a8:	2900      	cmp	r1, #0
 800b1aa:	d0cb      	beq.n	800b144 <__sflush_r+0x18>
 800b1ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1b0:	4299      	cmp	r1, r3
 800b1b2:	d002      	beq.n	800b1ba <__sflush_r+0x8e>
 800b1b4:	4628      	mov	r0, r5
 800b1b6:	f000 f9fd 	bl	800b5b4 <_free_r>
 800b1ba:	2000      	movs	r0, #0
 800b1bc:	6360      	str	r0, [r4, #52]	; 0x34
 800b1be:	e7c2      	b.n	800b146 <__sflush_r+0x1a>
 800b1c0:	6a21      	ldr	r1, [r4, #32]
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	4628      	mov	r0, r5
 800b1c6:	47b0      	blx	r6
 800b1c8:	1c41      	adds	r1, r0, #1
 800b1ca:	d1c7      	bne.n	800b15c <__sflush_r+0x30>
 800b1cc:	682b      	ldr	r3, [r5, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d0c4      	beq.n	800b15c <__sflush_r+0x30>
 800b1d2:	2b1d      	cmp	r3, #29
 800b1d4:	d001      	beq.n	800b1da <__sflush_r+0xae>
 800b1d6:	2b16      	cmp	r3, #22
 800b1d8:	d101      	bne.n	800b1de <__sflush_r+0xb2>
 800b1da:	602f      	str	r7, [r5, #0]
 800b1dc:	e7b2      	b.n	800b144 <__sflush_r+0x18>
 800b1de:	89a3      	ldrh	r3, [r4, #12]
 800b1e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1e4:	81a3      	strh	r3, [r4, #12]
 800b1e6:	e7ae      	b.n	800b146 <__sflush_r+0x1a>
 800b1e8:	690f      	ldr	r7, [r1, #16]
 800b1ea:	2f00      	cmp	r7, #0
 800b1ec:	d0aa      	beq.n	800b144 <__sflush_r+0x18>
 800b1ee:	0793      	lsls	r3, r2, #30
 800b1f0:	bf18      	it	ne
 800b1f2:	2300      	movne	r3, #0
 800b1f4:	680e      	ldr	r6, [r1, #0]
 800b1f6:	bf08      	it	eq
 800b1f8:	694b      	ldreq	r3, [r1, #20]
 800b1fa:	1bf6      	subs	r6, r6, r7
 800b1fc:	600f      	str	r7, [r1, #0]
 800b1fe:	608b      	str	r3, [r1, #8]
 800b200:	2e00      	cmp	r6, #0
 800b202:	dd9f      	ble.n	800b144 <__sflush_r+0x18>
 800b204:	4633      	mov	r3, r6
 800b206:	463a      	mov	r2, r7
 800b208:	4628      	mov	r0, r5
 800b20a:	6a21      	ldr	r1, [r4, #32]
 800b20c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b210:	47e0      	blx	ip
 800b212:	2800      	cmp	r0, #0
 800b214:	dc06      	bgt.n	800b224 <__sflush_r+0xf8>
 800b216:	89a3      	ldrh	r3, [r4, #12]
 800b218:	f04f 30ff 	mov.w	r0, #4294967295
 800b21c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b220:	81a3      	strh	r3, [r4, #12]
 800b222:	e790      	b.n	800b146 <__sflush_r+0x1a>
 800b224:	4407      	add	r7, r0
 800b226:	1a36      	subs	r6, r6, r0
 800b228:	e7ea      	b.n	800b200 <__sflush_r+0xd4>
 800b22a:	bf00      	nop
 800b22c:	20400001 	.word	0x20400001

0800b230 <_fflush_r>:
 800b230:	b538      	push	{r3, r4, r5, lr}
 800b232:	690b      	ldr	r3, [r1, #16]
 800b234:	4605      	mov	r5, r0
 800b236:	460c      	mov	r4, r1
 800b238:	b913      	cbnz	r3, 800b240 <_fflush_r+0x10>
 800b23a:	2500      	movs	r5, #0
 800b23c:	4628      	mov	r0, r5
 800b23e:	bd38      	pop	{r3, r4, r5, pc}
 800b240:	b118      	cbz	r0, 800b24a <_fflush_r+0x1a>
 800b242:	6983      	ldr	r3, [r0, #24]
 800b244:	b90b      	cbnz	r3, 800b24a <_fflush_r+0x1a>
 800b246:	f000 f887 	bl	800b358 <__sinit>
 800b24a:	4b14      	ldr	r3, [pc, #80]	; (800b29c <_fflush_r+0x6c>)
 800b24c:	429c      	cmp	r4, r3
 800b24e:	d11b      	bne.n	800b288 <_fflush_r+0x58>
 800b250:	686c      	ldr	r4, [r5, #4]
 800b252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d0ef      	beq.n	800b23a <_fflush_r+0xa>
 800b25a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b25c:	07d0      	lsls	r0, r2, #31
 800b25e:	d404      	bmi.n	800b26a <_fflush_r+0x3a>
 800b260:	0599      	lsls	r1, r3, #22
 800b262:	d402      	bmi.n	800b26a <_fflush_r+0x3a>
 800b264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b266:	f000 f915 	bl	800b494 <__retarget_lock_acquire_recursive>
 800b26a:	4628      	mov	r0, r5
 800b26c:	4621      	mov	r1, r4
 800b26e:	f7ff ff5d 	bl	800b12c <__sflush_r>
 800b272:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b274:	4605      	mov	r5, r0
 800b276:	07da      	lsls	r2, r3, #31
 800b278:	d4e0      	bmi.n	800b23c <_fflush_r+0xc>
 800b27a:	89a3      	ldrh	r3, [r4, #12]
 800b27c:	059b      	lsls	r3, r3, #22
 800b27e:	d4dd      	bmi.n	800b23c <_fflush_r+0xc>
 800b280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b282:	f000 f908 	bl	800b496 <__retarget_lock_release_recursive>
 800b286:	e7d9      	b.n	800b23c <_fflush_r+0xc>
 800b288:	4b05      	ldr	r3, [pc, #20]	; (800b2a0 <_fflush_r+0x70>)
 800b28a:	429c      	cmp	r4, r3
 800b28c:	d101      	bne.n	800b292 <_fflush_r+0x62>
 800b28e:	68ac      	ldr	r4, [r5, #8]
 800b290:	e7df      	b.n	800b252 <_fflush_r+0x22>
 800b292:	4b04      	ldr	r3, [pc, #16]	; (800b2a4 <_fflush_r+0x74>)
 800b294:	429c      	cmp	r4, r3
 800b296:	bf08      	it	eq
 800b298:	68ec      	ldreq	r4, [r5, #12]
 800b29a:	e7da      	b.n	800b252 <_fflush_r+0x22>
 800b29c:	0800d7f8 	.word	0x0800d7f8
 800b2a0:	0800d818 	.word	0x0800d818
 800b2a4:	0800d7d8 	.word	0x0800d7d8

0800b2a8 <std>:
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	b510      	push	{r4, lr}
 800b2ac:	4604      	mov	r4, r0
 800b2ae:	e9c0 3300 	strd	r3, r3, [r0]
 800b2b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2b6:	6083      	str	r3, [r0, #8]
 800b2b8:	8181      	strh	r1, [r0, #12]
 800b2ba:	6643      	str	r3, [r0, #100]	; 0x64
 800b2bc:	81c2      	strh	r2, [r0, #14]
 800b2be:	6183      	str	r3, [r0, #24]
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	2208      	movs	r2, #8
 800b2c4:	305c      	adds	r0, #92	; 0x5c
 800b2c6:	f7ff fb53 	bl	800a970 <memset>
 800b2ca:	4b05      	ldr	r3, [pc, #20]	; (800b2e0 <std+0x38>)
 800b2cc:	6224      	str	r4, [r4, #32]
 800b2ce:	6263      	str	r3, [r4, #36]	; 0x24
 800b2d0:	4b04      	ldr	r3, [pc, #16]	; (800b2e4 <std+0x3c>)
 800b2d2:	62a3      	str	r3, [r4, #40]	; 0x28
 800b2d4:	4b04      	ldr	r3, [pc, #16]	; (800b2e8 <std+0x40>)
 800b2d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b2d8:	4b04      	ldr	r3, [pc, #16]	; (800b2ec <std+0x44>)
 800b2da:	6323      	str	r3, [r4, #48]	; 0x30
 800b2dc:	bd10      	pop	{r4, pc}
 800b2de:	bf00      	nop
 800b2e0:	0800bb29 	.word	0x0800bb29
 800b2e4:	0800bb4b 	.word	0x0800bb4b
 800b2e8:	0800bb83 	.word	0x0800bb83
 800b2ec:	0800bba7 	.word	0x0800bba7

0800b2f0 <_cleanup_r>:
 800b2f0:	4901      	ldr	r1, [pc, #4]	; (800b2f8 <_cleanup_r+0x8>)
 800b2f2:	f000 b8af 	b.w	800b454 <_fwalk_reent>
 800b2f6:	bf00      	nop
 800b2f8:	0800b231 	.word	0x0800b231

0800b2fc <__sfmoreglue>:
 800b2fc:	2268      	movs	r2, #104	; 0x68
 800b2fe:	b570      	push	{r4, r5, r6, lr}
 800b300:	1e4d      	subs	r5, r1, #1
 800b302:	4355      	muls	r5, r2
 800b304:	460e      	mov	r6, r1
 800b306:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b30a:	f000 f9bb 	bl	800b684 <_malloc_r>
 800b30e:	4604      	mov	r4, r0
 800b310:	b140      	cbz	r0, 800b324 <__sfmoreglue+0x28>
 800b312:	2100      	movs	r1, #0
 800b314:	e9c0 1600 	strd	r1, r6, [r0]
 800b318:	300c      	adds	r0, #12
 800b31a:	60a0      	str	r0, [r4, #8]
 800b31c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b320:	f7ff fb26 	bl	800a970 <memset>
 800b324:	4620      	mov	r0, r4
 800b326:	bd70      	pop	{r4, r5, r6, pc}

0800b328 <__sfp_lock_acquire>:
 800b328:	4801      	ldr	r0, [pc, #4]	; (800b330 <__sfp_lock_acquire+0x8>)
 800b32a:	f000 b8b3 	b.w	800b494 <__retarget_lock_acquire_recursive>
 800b32e:	bf00      	nop
 800b330:	20001489 	.word	0x20001489

0800b334 <__sfp_lock_release>:
 800b334:	4801      	ldr	r0, [pc, #4]	; (800b33c <__sfp_lock_release+0x8>)
 800b336:	f000 b8ae 	b.w	800b496 <__retarget_lock_release_recursive>
 800b33a:	bf00      	nop
 800b33c:	20001489 	.word	0x20001489

0800b340 <__sinit_lock_acquire>:
 800b340:	4801      	ldr	r0, [pc, #4]	; (800b348 <__sinit_lock_acquire+0x8>)
 800b342:	f000 b8a7 	b.w	800b494 <__retarget_lock_acquire_recursive>
 800b346:	bf00      	nop
 800b348:	2000148a 	.word	0x2000148a

0800b34c <__sinit_lock_release>:
 800b34c:	4801      	ldr	r0, [pc, #4]	; (800b354 <__sinit_lock_release+0x8>)
 800b34e:	f000 b8a2 	b.w	800b496 <__retarget_lock_release_recursive>
 800b352:	bf00      	nop
 800b354:	2000148a 	.word	0x2000148a

0800b358 <__sinit>:
 800b358:	b510      	push	{r4, lr}
 800b35a:	4604      	mov	r4, r0
 800b35c:	f7ff fff0 	bl	800b340 <__sinit_lock_acquire>
 800b360:	69a3      	ldr	r3, [r4, #24]
 800b362:	b11b      	cbz	r3, 800b36c <__sinit+0x14>
 800b364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b368:	f7ff bff0 	b.w	800b34c <__sinit_lock_release>
 800b36c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b370:	6523      	str	r3, [r4, #80]	; 0x50
 800b372:	4b13      	ldr	r3, [pc, #76]	; (800b3c0 <__sinit+0x68>)
 800b374:	4a13      	ldr	r2, [pc, #76]	; (800b3c4 <__sinit+0x6c>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	62a2      	str	r2, [r4, #40]	; 0x28
 800b37a:	42a3      	cmp	r3, r4
 800b37c:	bf08      	it	eq
 800b37e:	2301      	moveq	r3, #1
 800b380:	4620      	mov	r0, r4
 800b382:	bf08      	it	eq
 800b384:	61a3      	streq	r3, [r4, #24]
 800b386:	f000 f81f 	bl	800b3c8 <__sfp>
 800b38a:	6060      	str	r0, [r4, #4]
 800b38c:	4620      	mov	r0, r4
 800b38e:	f000 f81b 	bl	800b3c8 <__sfp>
 800b392:	60a0      	str	r0, [r4, #8]
 800b394:	4620      	mov	r0, r4
 800b396:	f000 f817 	bl	800b3c8 <__sfp>
 800b39a:	2200      	movs	r2, #0
 800b39c:	2104      	movs	r1, #4
 800b39e:	60e0      	str	r0, [r4, #12]
 800b3a0:	6860      	ldr	r0, [r4, #4]
 800b3a2:	f7ff ff81 	bl	800b2a8 <std>
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	2109      	movs	r1, #9
 800b3aa:	68a0      	ldr	r0, [r4, #8]
 800b3ac:	f7ff ff7c 	bl	800b2a8 <std>
 800b3b0:	2202      	movs	r2, #2
 800b3b2:	2112      	movs	r1, #18
 800b3b4:	68e0      	ldr	r0, [r4, #12]
 800b3b6:	f7ff ff77 	bl	800b2a8 <std>
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	61a3      	str	r3, [r4, #24]
 800b3be:	e7d1      	b.n	800b364 <__sinit+0xc>
 800b3c0:	0800d7a0 	.word	0x0800d7a0
 800b3c4:	0800b2f1 	.word	0x0800b2f1

0800b3c8 <__sfp>:
 800b3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ca:	4607      	mov	r7, r0
 800b3cc:	f7ff ffac 	bl	800b328 <__sfp_lock_acquire>
 800b3d0:	4b1e      	ldr	r3, [pc, #120]	; (800b44c <__sfp+0x84>)
 800b3d2:	681e      	ldr	r6, [r3, #0]
 800b3d4:	69b3      	ldr	r3, [r6, #24]
 800b3d6:	b913      	cbnz	r3, 800b3de <__sfp+0x16>
 800b3d8:	4630      	mov	r0, r6
 800b3da:	f7ff ffbd 	bl	800b358 <__sinit>
 800b3de:	3648      	adds	r6, #72	; 0x48
 800b3e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b3e4:	3b01      	subs	r3, #1
 800b3e6:	d503      	bpl.n	800b3f0 <__sfp+0x28>
 800b3e8:	6833      	ldr	r3, [r6, #0]
 800b3ea:	b30b      	cbz	r3, 800b430 <__sfp+0x68>
 800b3ec:	6836      	ldr	r6, [r6, #0]
 800b3ee:	e7f7      	b.n	800b3e0 <__sfp+0x18>
 800b3f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b3f4:	b9d5      	cbnz	r5, 800b42c <__sfp+0x64>
 800b3f6:	4b16      	ldr	r3, [pc, #88]	; (800b450 <__sfp+0x88>)
 800b3f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b3fc:	60e3      	str	r3, [r4, #12]
 800b3fe:	6665      	str	r5, [r4, #100]	; 0x64
 800b400:	f000 f847 	bl	800b492 <__retarget_lock_init_recursive>
 800b404:	f7ff ff96 	bl	800b334 <__sfp_lock_release>
 800b408:	2208      	movs	r2, #8
 800b40a:	4629      	mov	r1, r5
 800b40c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b410:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b414:	6025      	str	r5, [r4, #0]
 800b416:	61a5      	str	r5, [r4, #24]
 800b418:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b41c:	f7ff faa8 	bl	800a970 <memset>
 800b420:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b424:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b428:	4620      	mov	r0, r4
 800b42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b42c:	3468      	adds	r4, #104	; 0x68
 800b42e:	e7d9      	b.n	800b3e4 <__sfp+0x1c>
 800b430:	2104      	movs	r1, #4
 800b432:	4638      	mov	r0, r7
 800b434:	f7ff ff62 	bl	800b2fc <__sfmoreglue>
 800b438:	4604      	mov	r4, r0
 800b43a:	6030      	str	r0, [r6, #0]
 800b43c:	2800      	cmp	r0, #0
 800b43e:	d1d5      	bne.n	800b3ec <__sfp+0x24>
 800b440:	f7ff ff78 	bl	800b334 <__sfp_lock_release>
 800b444:	230c      	movs	r3, #12
 800b446:	603b      	str	r3, [r7, #0]
 800b448:	e7ee      	b.n	800b428 <__sfp+0x60>
 800b44a:	bf00      	nop
 800b44c:	0800d7a0 	.word	0x0800d7a0
 800b450:	ffff0001 	.word	0xffff0001

0800b454 <_fwalk_reent>:
 800b454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b458:	4606      	mov	r6, r0
 800b45a:	4688      	mov	r8, r1
 800b45c:	2700      	movs	r7, #0
 800b45e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b462:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b466:	f1b9 0901 	subs.w	r9, r9, #1
 800b46a:	d505      	bpl.n	800b478 <_fwalk_reent+0x24>
 800b46c:	6824      	ldr	r4, [r4, #0]
 800b46e:	2c00      	cmp	r4, #0
 800b470:	d1f7      	bne.n	800b462 <_fwalk_reent+0xe>
 800b472:	4638      	mov	r0, r7
 800b474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b478:	89ab      	ldrh	r3, [r5, #12]
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	d907      	bls.n	800b48e <_fwalk_reent+0x3a>
 800b47e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b482:	3301      	adds	r3, #1
 800b484:	d003      	beq.n	800b48e <_fwalk_reent+0x3a>
 800b486:	4629      	mov	r1, r5
 800b488:	4630      	mov	r0, r6
 800b48a:	47c0      	blx	r8
 800b48c:	4307      	orrs	r7, r0
 800b48e:	3568      	adds	r5, #104	; 0x68
 800b490:	e7e9      	b.n	800b466 <_fwalk_reent+0x12>

0800b492 <__retarget_lock_init_recursive>:
 800b492:	4770      	bx	lr

0800b494 <__retarget_lock_acquire_recursive>:
 800b494:	4770      	bx	lr

0800b496 <__retarget_lock_release_recursive>:
 800b496:	4770      	bx	lr

0800b498 <__swhatbuf_r>:
 800b498:	b570      	push	{r4, r5, r6, lr}
 800b49a:	460e      	mov	r6, r1
 800b49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4a0:	4614      	mov	r4, r2
 800b4a2:	2900      	cmp	r1, #0
 800b4a4:	461d      	mov	r5, r3
 800b4a6:	b096      	sub	sp, #88	; 0x58
 800b4a8:	da08      	bge.n	800b4bc <__swhatbuf_r+0x24>
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b4b0:	602a      	str	r2, [r5, #0]
 800b4b2:	061a      	lsls	r2, r3, #24
 800b4b4:	d410      	bmi.n	800b4d8 <__swhatbuf_r+0x40>
 800b4b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4ba:	e00e      	b.n	800b4da <__swhatbuf_r+0x42>
 800b4bc:	466a      	mov	r2, sp
 800b4be:	f000 fb99 	bl	800bbf4 <_fstat_r>
 800b4c2:	2800      	cmp	r0, #0
 800b4c4:	dbf1      	blt.n	800b4aa <__swhatbuf_r+0x12>
 800b4c6:	9a01      	ldr	r2, [sp, #4]
 800b4c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b4cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b4d0:	425a      	negs	r2, r3
 800b4d2:	415a      	adcs	r2, r3
 800b4d4:	602a      	str	r2, [r5, #0]
 800b4d6:	e7ee      	b.n	800b4b6 <__swhatbuf_r+0x1e>
 800b4d8:	2340      	movs	r3, #64	; 0x40
 800b4da:	2000      	movs	r0, #0
 800b4dc:	6023      	str	r3, [r4, #0]
 800b4de:	b016      	add	sp, #88	; 0x58
 800b4e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b4e4 <__smakebuf_r>:
 800b4e4:	898b      	ldrh	r3, [r1, #12]
 800b4e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4e8:	079d      	lsls	r5, r3, #30
 800b4ea:	4606      	mov	r6, r0
 800b4ec:	460c      	mov	r4, r1
 800b4ee:	d507      	bpl.n	800b500 <__smakebuf_r+0x1c>
 800b4f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b4f4:	6023      	str	r3, [r4, #0]
 800b4f6:	6123      	str	r3, [r4, #16]
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	6163      	str	r3, [r4, #20]
 800b4fc:	b002      	add	sp, #8
 800b4fe:	bd70      	pop	{r4, r5, r6, pc}
 800b500:	466a      	mov	r2, sp
 800b502:	ab01      	add	r3, sp, #4
 800b504:	f7ff ffc8 	bl	800b498 <__swhatbuf_r>
 800b508:	9900      	ldr	r1, [sp, #0]
 800b50a:	4605      	mov	r5, r0
 800b50c:	4630      	mov	r0, r6
 800b50e:	f000 f8b9 	bl	800b684 <_malloc_r>
 800b512:	b948      	cbnz	r0, 800b528 <__smakebuf_r+0x44>
 800b514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b518:	059a      	lsls	r2, r3, #22
 800b51a:	d4ef      	bmi.n	800b4fc <__smakebuf_r+0x18>
 800b51c:	f023 0303 	bic.w	r3, r3, #3
 800b520:	f043 0302 	orr.w	r3, r3, #2
 800b524:	81a3      	strh	r3, [r4, #12]
 800b526:	e7e3      	b.n	800b4f0 <__smakebuf_r+0xc>
 800b528:	4b0d      	ldr	r3, [pc, #52]	; (800b560 <__smakebuf_r+0x7c>)
 800b52a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b52c:	89a3      	ldrh	r3, [r4, #12]
 800b52e:	6020      	str	r0, [r4, #0]
 800b530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b534:	81a3      	strh	r3, [r4, #12]
 800b536:	9b00      	ldr	r3, [sp, #0]
 800b538:	6120      	str	r0, [r4, #16]
 800b53a:	6163      	str	r3, [r4, #20]
 800b53c:	9b01      	ldr	r3, [sp, #4]
 800b53e:	b15b      	cbz	r3, 800b558 <__smakebuf_r+0x74>
 800b540:	4630      	mov	r0, r6
 800b542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b546:	f000 fb67 	bl	800bc18 <_isatty_r>
 800b54a:	b128      	cbz	r0, 800b558 <__smakebuf_r+0x74>
 800b54c:	89a3      	ldrh	r3, [r4, #12]
 800b54e:	f023 0303 	bic.w	r3, r3, #3
 800b552:	f043 0301 	orr.w	r3, r3, #1
 800b556:	81a3      	strh	r3, [r4, #12]
 800b558:	89a0      	ldrh	r0, [r4, #12]
 800b55a:	4305      	orrs	r5, r0
 800b55c:	81a5      	strh	r5, [r4, #12]
 800b55e:	e7cd      	b.n	800b4fc <__smakebuf_r+0x18>
 800b560:	0800b2f1 	.word	0x0800b2f1

0800b564 <memchr>:
 800b564:	4603      	mov	r3, r0
 800b566:	b510      	push	{r4, lr}
 800b568:	b2c9      	uxtb	r1, r1
 800b56a:	4402      	add	r2, r0
 800b56c:	4293      	cmp	r3, r2
 800b56e:	4618      	mov	r0, r3
 800b570:	d101      	bne.n	800b576 <memchr+0x12>
 800b572:	2000      	movs	r0, #0
 800b574:	e003      	b.n	800b57e <memchr+0x1a>
 800b576:	7804      	ldrb	r4, [r0, #0]
 800b578:	3301      	adds	r3, #1
 800b57a:	428c      	cmp	r4, r1
 800b57c:	d1f6      	bne.n	800b56c <memchr+0x8>
 800b57e:	bd10      	pop	{r4, pc}

0800b580 <memmove>:
 800b580:	4288      	cmp	r0, r1
 800b582:	b510      	push	{r4, lr}
 800b584:	eb01 0402 	add.w	r4, r1, r2
 800b588:	d902      	bls.n	800b590 <memmove+0x10>
 800b58a:	4284      	cmp	r4, r0
 800b58c:	4623      	mov	r3, r4
 800b58e:	d807      	bhi.n	800b5a0 <memmove+0x20>
 800b590:	1e43      	subs	r3, r0, #1
 800b592:	42a1      	cmp	r1, r4
 800b594:	d008      	beq.n	800b5a8 <memmove+0x28>
 800b596:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b59a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b59e:	e7f8      	b.n	800b592 <memmove+0x12>
 800b5a0:	4601      	mov	r1, r0
 800b5a2:	4402      	add	r2, r0
 800b5a4:	428a      	cmp	r2, r1
 800b5a6:	d100      	bne.n	800b5aa <memmove+0x2a>
 800b5a8:	bd10      	pop	{r4, pc}
 800b5aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b5b2:	e7f7      	b.n	800b5a4 <memmove+0x24>

0800b5b4 <_free_r>:
 800b5b4:	b538      	push	{r3, r4, r5, lr}
 800b5b6:	4605      	mov	r5, r0
 800b5b8:	2900      	cmp	r1, #0
 800b5ba:	d040      	beq.n	800b63e <_free_r+0x8a>
 800b5bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5c0:	1f0c      	subs	r4, r1, #4
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	bfb8      	it	lt
 800b5c6:	18e4      	addlt	r4, r4, r3
 800b5c8:	f000 fb48 	bl	800bc5c <__malloc_lock>
 800b5cc:	4a1c      	ldr	r2, [pc, #112]	; (800b640 <_free_r+0x8c>)
 800b5ce:	6813      	ldr	r3, [r2, #0]
 800b5d0:	b933      	cbnz	r3, 800b5e0 <_free_r+0x2c>
 800b5d2:	6063      	str	r3, [r4, #4]
 800b5d4:	6014      	str	r4, [r2, #0]
 800b5d6:	4628      	mov	r0, r5
 800b5d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5dc:	f000 bb44 	b.w	800bc68 <__malloc_unlock>
 800b5e0:	42a3      	cmp	r3, r4
 800b5e2:	d908      	bls.n	800b5f6 <_free_r+0x42>
 800b5e4:	6820      	ldr	r0, [r4, #0]
 800b5e6:	1821      	adds	r1, r4, r0
 800b5e8:	428b      	cmp	r3, r1
 800b5ea:	bf01      	itttt	eq
 800b5ec:	6819      	ldreq	r1, [r3, #0]
 800b5ee:	685b      	ldreq	r3, [r3, #4]
 800b5f0:	1809      	addeq	r1, r1, r0
 800b5f2:	6021      	streq	r1, [r4, #0]
 800b5f4:	e7ed      	b.n	800b5d2 <_free_r+0x1e>
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	b10b      	cbz	r3, 800b600 <_free_r+0x4c>
 800b5fc:	42a3      	cmp	r3, r4
 800b5fe:	d9fa      	bls.n	800b5f6 <_free_r+0x42>
 800b600:	6811      	ldr	r1, [r2, #0]
 800b602:	1850      	adds	r0, r2, r1
 800b604:	42a0      	cmp	r0, r4
 800b606:	d10b      	bne.n	800b620 <_free_r+0x6c>
 800b608:	6820      	ldr	r0, [r4, #0]
 800b60a:	4401      	add	r1, r0
 800b60c:	1850      	adds	r0, r2, r1
 800b60e:	4283      	cmp	r3, r0
 800b610:	6011      	str	r1, [r2, #0]
 800b612:	d1e0      	bne.n	800b5d6 <_free_r+0x22>
 800b614:	6818      	ldr	r0, [r3, #0]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	4401      	add	r1, r0
 800b61a:	6011      	str	r1, [r2, #0]
 800b61c:	6053      	str	r3, [r2, #4]
 800b61e:	e7da      	b.n	800b5d6 <_free_r+0x22>
 800b620:	d902      	bls.n	800b628 <_free_r+0x74>
 800b622:	230c      	movs	r3, #12
 800b624:	602b      	str	r3, [r5, #0]
 800b626:	e7d6      	b.n	800b5d6 <_free_r+0x22>
 800b628:	6820      	ldr	r0, [r4, #0]
 800b62a:	1821      	adds	r1, r4, r0
 800b62c:	428b      	cmp	r3, r1
 800b62e:	bf01      	itttt	eq
 800b630:	6819      	ldreq	r1, [r3, #0]
 800b632:	685b      	ldreq	r3, [r3, #4]
 800b634:	1809      	addeq	r1, r1, r0
 800b636:	6021      	streq	r1, [r4, #0]
 800b638:	6063      	str	r3, [r4, #4]
 800b63a:	6054      	str	r4, [r2, #4]
 800b63c:	e7cb      	b.n	800b5d6 <_free_r+0x22>
 800b63e:	bd38      	pop	{r3, r4, r5, pc}
 800b640:	2000148c 	.word	0x2000148c

0800b644 <sbrk_aligned>:
 800b644:	b570      	push	{r4, r5, r6, lr}
 800b646:	4e0e      	ldr	r6, [pc, #56]	; (800b680 <sbrk_aligned+0x3c>)
 800b648:	460c      	mov	r4, r1
 800b64a:	6831      	ldr	r1, [r6, #0]
 800b64c:	4605      	mov	r5, r0
 800b64e:	b911      	cbnz	r1, 800b656 <sbrk_aligned+0x12>
 800b650:	f000 fa16 	bl	800ba80 <_sbrk_r>
 800b654:	6030      	str	r0, [r6, #0]
 800b656:	4621      	mov	r1, r4
 800b658:	4628      	mov	r0, r5
 800b65a:	f000 fa11 	bl	800ba80 <_sbrk_r>
 800b65e:	1c43      	adds	r3, r0, #1
 800b660:	d00a      	beq.n	800b678 <sbrk_aligned+0x34>
 800b662:	1cc4      	adds	r4, r0, #3
 800b664:	f024 0403 	bic.w	r4, r4, #3
 800b668:	42a0      	cmp	r0, r4
 800b66a:	d007      	beq.n	800b67c <sbrk_aligned+0x38>
 800b66c:	1a21      	subs	r1, r4, r0
 800b66e:	4628      	mov	r0, r5
 800b670:	f000 fa06 	bl	800ba80 <_sbrk_r>
 800b674:	3001      	adds	r0, #1
 800b676:	d101      	bne.n	800b67c <sbrk_aligned+0x38>
 800b678:	f04f 34ff 	mov.w	r4, #4294967295
 800b67c:	4620      	mov	r0, r4
 800b67e:	bd70      	pop	{r4, r5, r6, pc}
 800b680:	20001490 	.word	0x20001490

0800b684 <_malloc_r>:
 800b684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b688:	1ccd      	adds	r5, r1, #3
 800b68a:	f025 0503 	bic.w	r5, r5, #3
 800b68e:	3508      	adds	r5, #8
 800b690:	2d0c      	cmp	r5, #12
 800b692:	bf38      	it	cc
 800b694:	250c      	movcc	r5, #12
 800b696:	2d00      	cmp	r5, #0
 800b698:	4607      	mov	r7, r0
 800b69a:	db01      	blt.n	800b6a0 <_malloc_r+0x1c>
 800b69c:	42a9      	cmp	r1, r5
 800b69e:	d905      	bls.n	800b6ac <_malloc_r+0x28>
 800b6a0:	230c      	movs	r3, #12
 800b6a2:	2600      	movs	r6, #0
 800b6a4:	603b      	str	r3, [r7, #0]
 800b6a6:	4630      	mov	r0, r6
 800b6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6ac:	4e2e      	ldr	r6, [pc, #184]	; (800b768 <_malloc_r+0xe4>)
 800b6ae:	f000 fad5 	bl	800bc5c <__malloc_lock>
 800b6b2:	6833      	ldr	r3, [r6, #0]
 800b6b4:	461c      	mov	r4, r3
 800b6b6:	bb34      	cbnz	r4, 800b706 <_malloc_r+0x82>
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	4638      	mov	r0, r7
 800b6bc:	f7ff ffc2 	bl	800b644 <sbrk_aligned>
 800b6c0:	1c43      	adds	r3, r0, #1
 800b6c2:	4604      	mov	r4, r0
 800b6c4:	d14d      	bne.n	800b762 <_malloc_r+0xde>
 800b6c6:	6834      	ldr	r4, [r6, #0]
 800b6c8:	4626      	mov	r6, r4
 800b6ca:	2e00      	cmp	r6, #0
 800b6cc:	d140      	bne.n	800b750 <_malloc_r+0xcc>
 800b6ce:	6823      	ldr	r3, [r4, #0]
 800b6d0:	4631      	mov	r1, r6
 800b6d2:	4638      	mov	r0, r7
 800b6d4:	eb04 0803 	add.w	r8, r4, r3
 800b6d8:	f000 f9d2 	bl	800ba80 <_sbrk_r>
 800b6dc:	4580      	cmp	r8, r0
 800b6de:	d13a      	bne.n	800b756 <_malloc_r+0xd2>
 800b6e0:	6821      	ldr	r1, [r4, #0]
 800b6e2:	3503      	adds	r5, #3
 800b6e4:	1a6d      	subs	r5, r5, r1
 800b6e6:	f025 0503 	bic.w	r5, r5, #3
 800b6ea:	3508      	adds	r5, #8
 800b6ec:	2d0c      	cmp	r5, #12
 800b6ee:	bf38      	it	cc
 800b6f0:	250c      	movcc	r5, #12
 800b6f2:	4638      	mov	r0, r7
 800b6f4:	4629      	mov	r1, r5
 800b6f6:	f7ff ffa5 	bl	800b644 <sbrk_aligned>
 800b6fa:	3001      	adds	r0, #1
 800b6fc:	d02b      	beq.n	800b756 <_malloc_r+0xd2>
 800b6fe:	6823      	ldr	r3, [r4, #0]
 800b700:	442b      	add	r3, r5
 800b702:	6023      	str	r3, [r4, #0]
 800b704:	e00e      	b.n	800b724 <_malloc_r+0xa0>
 800b706:	6822      	ldr	r2, [r4, #0]
 800b708:	1b52      	subs	r2, r2, r5
 800b70a:	d41e      	bmi.n	800b74a <_malloc_r+0xc6>
 800b70c:	2a0b      	cmp	r2, #11
 800b70e:	d916      	bls.n	800b73e <_malloc_r+0xba>
 800b710:	1961      	adds	r1, r4, r5
 800b712:	42a3      	cmp	r3, r4
 800b714:	6025      	str	r5, [r4, #0]
 800b716:	bf18      	it	ne
 800b718:	6059      	strne	r1, [r3, #4]
 800b71a:	6863      	ldr	r3, [r4, #4]
 800b71c:	bf08      	it	eq
 800b71e:	6031      	streq	r1, [r6, #0]
 800b720:	5162      	str	r2, [r4, r5]
 800b722:	604b      	str	r3, [r1, #4]
 800b724:	4638      	mov	r0, r7
 800b726:	f104 060b 	add.w	r6, r4, #11
 800b72a:	f000 fa9d 	bl	800bc68 <__malloc_unlock>
 800b72e:	f026 0607 	bic.w	r6, r6, #7
 800b732:	1d23      	adds	r3, r4, #4
 800b734:	1af2      	subs	r2, r6, r3
 800b736:	d0b6      	beq.n	800b6a6 <_malloc_r+0x22>
 800b738:	1b9b      	subs	r3, r3, r6
 800b73a:	50a3      	str	r3, [r4, r2]
 800b73c:	e7b3      	b.n	800b6a6 <_malloc_r+0x22>
 800b73e:	6862      	ldr	r2, [r4, #4]
 800b740:	42a3      	cmp	r3, r4
 800b742:	bf0c      	ite	eq
 800b744:	6032      	streq	r2, [r6, #0]
 800b746:	605a      	strne	r2, [r3, #4]
 800b748:	e7ec      	b.n	800b724 <_malloc_r+0xa0>
 800b74a:	4623      	mov	r3, r4
 800b74c:	6864      	ldr	r4, [r4, #4]
 800b74e:	e7b2      	b.n	800b6b6 <_malloc_r+0x32>
 800b750:	4634      	mov	r4, r6
 800b752:	6876      	ldr	r6, [r6, #4]
 800b754:	e7b9      	b.n	800b6ca <_malloc_r+0x46>
 800b756:	230c      	movs	r3, #12
 800b758:	4638      	mov	r0, r7
 800b75a:	603b      	str	r3, [r7, #0]
 800b75c:	f000 fa84 	bl	800bc68 <__malloc_unlock>
 800b760:	e7a1      	b.n	800b6a6 <_malloc_r+0x22>
 800b762:	6025      	str	r5, [r4, #0]
 800b764:	e7de      	b.n	800b724 <_malloc_r+0xa0>
 800b766:	bf00      	nop
 800b768:	2000148c 	.word	0x2000148c

0800b76c <_realloc_r>:
 800b76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b770:	4680      	mov	r8, r0
 800b772:	4614      	mov	r4, r2
 800b774:	460e      	mov	r6, r1
 800b776:	b921      	cbnz	r1, 800b782 <_realloc_r+0x16>
 800b778:	4611      	mov	r1, r2
 800b77a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b77e:	f7ff bf81 	b.w	800b684 <_malloc_r>
 800b782:	b92a      	cbnz	r2, 800b790 <_realloc_r+0x24>
 800b784:	f7ff ff16 	bl	800b5b4 <_free_r>
 800b788:	4625      	mov	r5, r4
 800b78a:	4628      	mov	r0, r5
 800b78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b790:	f000 fa70 	bl	800bc74 <_malloc_usable_size_r>
 800b794:	4284      	cmp	r4, r0
 800b796:	4607      	mov	r7, r0
 800b798:	d802      	bhi.n	800b7a0 <_realloc_r+0x34>
 800b79a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b79e:	d812      	bhi.n	800b7c6 <_realloc_r+0x5a>
 800b7a0:	4621      	mov	r1, r4
 800b7a2:	4640      	mov	r0, r8
 800b7a4:	f7ff ff6e 	bl	800b684 <_malloc_r>
 800b7a8:	4605      	mov	r5, r0
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	d0ed      	beq.n	800b78a <_realloc_r+0x1e>
 800b7ae:	42bc      	cmp	r4, r7
 800b7b0:	4622      	mov	r2, r4
 800b7b2:	4631      	mov	r1, r6
 800b7b4:	bf28      	it	cs
 800b7b6:	463a      	movcs	r2, r7
 800b7b8:	f7ff f8cc 	bl	800a954 <memcpy>
 800b7bc:	4631      	mov	r1, r6
 800b7be:	4640      	mov	r0, r8
 800b7c0:	f7ff fef8 	bl	800b5b4 <_free_r>
 800b7c4:	e7e1      	b.n	800b78a <_realloc_r+0x1e>
 800b7c6:	4635      	mov	r5, r6
 800b7c8:	e7df      	b.n	800b78a <_realloc_r+0x1e>

0800b7ca <__ssputs_r>:
 800b7ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7ce:	688e      	ldr	r6, [r1, #8]
 800b7d0:	4682      	mov	sl, r0
 800b7d2:	429e      	cmp	r6, r3
 800b7d4:	460c      	mov	r4, r1
 800b7d6:	4690      	mov	r8, r2
 800b7d8:	461f      	mov	r7, r3
 800b7da:	d838      	bhi.n	800b84e <__ssputs_r+0x84>
 800b7dc:	898a      	ldrh	r2, [r1, #12]
 800b7de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b7e2:	d032      	beq.n	800b84a <__ssputs_r+0x80>
 800b7e4:	6825      	ldr	r5, [r4, #0]
 800b7e6:	6909      	ldr	r1, [r1, #16]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	eba5 0901 	sub.w	r9, r5, r1
 800b7ee:	6965      	ldr	r5, [r4, #20]
 800b7f0:	444b      	add	r3, r9
 800b7f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b7f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b7fa:	106d      	asrs	r5, r5, #1
 800b7fc:	429d      	cmp	r5, r3
 800b7fe:	bf38      	it	cc
 800b800:	461d      	movcc	r5, r3
 800b802:	0553      	lsls	r3, r2, #21
 800b804:	d531      	bpl.n	800b86a <__ssputs_r+0xa0>
 800b806:	4629      	mov	r1, r5
 800b808:	f7ff ff3c 	bl	800b684 <_malloc_r>
 800b80c:	4606      	mov	r6, r0
 800b80e:	b950      	cbnz	r0, 800b826 <__ssputs_r+0x5c>
 800b810:	230c      	movs	r3, #12
 800b812:	f04f 30ff 	mov.w	r0, #4294967295
 800b816:	f8ca 3000 	str.w	r3, [sl]
 800b81a:	89a3      	ldrh	r3, [r4, #12]
 800b81c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b820:	81a3      	strh	r3, [r4, #12]
 800b822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b826:	464a      	mov	r2, r9
 800b828:	6921      	ldr	r1, [r4, #16]
 800b82a:	f7ff f893 	bl	800a954 <memcpy>
 800b82e:	89a3      	ldrh	r3, [r4, #12]
 800b830:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b838:	81a3      	strh	r3, [r4, #12]
 800b83a:	6126      	str	r6, [r4, #16]
 800b83c:	444e      	add	r6, r9
 800b83e:	6026      	str	r6, [r4, #0]
 800b840:	463e      	mov	r6, r7
 800b842:	6165      	str	r5, [r4, #20]
 800b844:	eba5 0509 	sub.w	r5, r5, r9
 800b848:	60a5      	str	r5, [r4, #8]
 800b84a:	42be      	cmp	r6, r7
 800b84c:	d900      	bls.n	800b850 <__ssputs_r+0x86>
 800b84e:	463e      	mov	r6, r7
 800b850:	4632      	mov	r2, r6
 800b852:	4641      	mov	r1, r8
 800b854:	6820      	ldr	r0, [r4, #0]
 800b856:	f7ff fe93 	bl	800b580 <memmove>
 800b85a:	68a3      	ldr	r3, [r4, #8]
 800b85c:	2000      	movs	r0, #0
 800b85e:	1b9b      	subs	r3, r3, r6
 800b860:	60a3      	str	r3, [r4, #8]
 800b862:	6823      	ldr	r3, [r4, #0]
 800b864:	4433      	add	r3, r6
 800b866:	6023      	str	r3, [r4, #0]
 800b868:	e7db      	b.n	800b822 <__ssputs_r+0x58>
 800b86a:	462a      	mov	r2, r5
 800b86c:	f7ff ff7e 	bl	800b76c <_realloc_r>
 800b870:	4606      	mov	r6, r0
 800b872:	2800      	cmp	r0, #0
 800b874:	d1e1      	bne.n	800b83a <__ssputs_r+0x70>
 800b876:	4650      	mov	r0, sl
 800b878:	6921      	ldr	r1, [r4, #16]
 800b87a:	f7ff fe9b 	bl	800b5b4 <_free_r>
 800b87e:	e7c7      	b.n	800b810 <__ssputs_r+0x46>

0800b880 <_svfiprintf_r>:
 800b880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b884:	4698      	mov	r8, r3
 800b886:	898b      	ldrh	r3, [r1, #12]
 800b888:	4607      	mov	r7, r0
 800b88a:	061b      	lsls	r3, r3, #24
 800b88c:	460d      	mov	r5, r1
 800b88e:	4614      	mov	r4, r2
 800b890:	b09d      	sub	sp, #116	; 0x74
 800b892:	d50e      	bpl.n	800b8b2 <_svfiprintf_r+0x32>
 800b894:	690b      	ldr	r3, [r1, #16]
 800b896:	b963      	cbnz	r3, 800b8b2 <_svfiprintf_r+0x32>
 800b898:	2140      	movs	r1, #64	; 0x40
 800b89a:	f7ff fef3 	bl	800b684 <_malloc_r>
 800b89e:	6028      	str	r0, [r5, #0]
 800b8a0:	6128      	str	r0, [r5, #16]
 800b8a2:	b920      	cbnz	r0, 800b8ae <_svfiprintf_r+0x2e>
 800b8a4:	230c      	movs	r3, #12
 800b8a6:	603b      	str	r3, [r7, #0]
 800b8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ac:	e0d1      	b.n	800ba52 <_svfiprintf_r+0x1d2>
 800b8ae:	2340      	movs	r3, #64	; 0x40
 800b8b0:	616b      	str	r3, [r5, #20]
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b8b6:	2320      	movs	r3, #32
 800b8b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8bc:	2330      	movs	r3, #48	; 0x30
 800b8be:	f04f 0901 	mov.w	r9, #1
 800b8c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ba6c <_svfiprintf_r+0x1ec>
 800b8ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8ce:	4623      	mov	r3, r4
 800b8d0:	469a      	mov	sl, r3
 800b8d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8d6:	b10a      	cbz	r2, 800b8dc <_svfiprintf_r+0x5c>
 800b8d8:	2a25      	cmp	r2, #37	; 0x25
 800b8da:	d1f9      	bne.n	800b8d0 <_svfiprintf_r+0x50>
 800b8dc:	ebba 0b04 	subs.w	fp, sl, r4
 800b8e0:	d00b      	beq.n	800b8fa <_svfiprintf_r+0x7a>
 800b8e2:	465b      	mov	r3, fp
 800b8e4:	4622      	mov	r2, r4
 800b8e6:	4629      	mov	r1, r5
 800b8e8:	4638      	mov	r0, r7
 800b8ea:	f7ff ff6e 	bl	800b7ca <__ssputs_r>
 800b8ee:	3001      	adds	r0, #1
 800b8f0:	f000 80aa 	beq.w	800ba48 <_svfiprintf_r+0x1c8>
 800b8f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8f6:	445a      	add	r2, fp
 800b8f8:	9209      	str	r2, [sp, #36]	; 0x24
 800b8fa:	f89a 3000 	ldrb.w	r3, [sl]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	f000 80a2 	beq.w	800ba48 <_svfiprintf_r+0x1c8>
 800b904:	2300      	movs	r3, #0
 800b906:	f04f 32ff 	mov.w	r2, #4294967295
 800b90a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b90e:	f10a 0a01 	add.w	sl, sl, #1
 800b912:	9304      	str	r3, [sp, #16]
 800b914:	9307      	str	r3, [sp, #28]
 800b916:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b91a:	931a      	str	r3, [sp, #104]	; 0x68
 800b91c:	4654      	mov	r4, sl
 800b91e:	2205      	movs	r2, #5
 800b920:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b924:	4851      	ldr	r0, [pc, #324]	; (800ba6c <_svfiprintf_r+0x1ec>)
 800b926:	f7ff fe1d 	bl	800b564 <memchr>
 800b92a:	9a04      	ldr	r2, [sp, #16]
 800b92c:	b9d8      	cbnz	r0, 800b966 <_svfiprintf_r+0xe6>
 800b92e:	06d0      	lsls	r0, r2, #27
 800b930:	bf44      	itt	mi
 800b932:	2320      	movmi	r3, #32
 800b934:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b938:	0711      	lsls	r1, r2, #28
 800b93a:	bf44      	itt	mi
 800b93c:	232b      	movmi	r3, #43	; 0x2b
 800b93e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b942:	f89a 3000 	ldrb.w	r3, [sl]
 800b946:	2b2a      	cmp	r3, #42	; 0x2a
 800b948:	d015      	beq.n	800b976 <_svfiprintf_r+0xf6>
 800b94a:	4654      	mov	r4, sl
 800b94c:	2000      	movs	r0, #0
 800b94e:	f04f 0c0a 	mov.w	ip, #10
 800b952:	9a07      	ldr	r2, [sp, #28]
 800b954:	4621      	mov	r1, r4
 800b956:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b95a:	3b30      	subs	r3, #48	; 0x30
 800b95c:	2b09      	cmp	r3, #9
 800b95e:	d94e      	bls.n	800b9fe <_svfiprintf_r+0x17e>
 800b960:	b1b0      	cbz	r0, 800b990 <_svfiprintf_r+0x110>
 800b962:	9207      	str	r2, [sp, #28]
 800b964:	e014      	b.n	800b990 <_svfiprintf_r+0x110>
 800b966:	eba0 0308 	sub.w	r3, r0, r8
 800b96a:	fa09 f303 	lsl.w	r3, r9, r3
 800b96e:	4313      	orrs	r3, r2
 800b970:	46a2      	mov	sl, r4
 800b972:	9304      	str	r3, [sp, #16]
 800b974:	e7d2      	b.n	800b91c <_svfiprintf_r+0x9c>
 800b976:	9b03      	ldr	r3, [sp, #12]
 800b978:	1d19      	adds	r1, r3, #4
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	9103      	str	r1, [sp, #12]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	bfbb      	ittet	lt
 800b982:	425b      	neglt	r3, r3
 800b984:	f042 0202 	orrlt.w	r2, r2, #2
 800b988:	9307      	strge	r3, [sp, #28]
 800b98a:	9307      	strlt	r3, [sp, #28]
 800b98c:	bfb8      	it	lt
 800b98e:	9204      	strlt	r2, [sp, #16]
 800b990:	7823      	ldrb	r3, [r4, #0]
 800b992:	2b2e      	cmp	r3, #46	; 0x2e
 800b994:	d10c      	bne.n	800b9b0 <_svfiprintf_r+0x130>
 800b996:	7863      	ldrb	r3, [r4, #1]
 800b998:	2b2a      	cmp	r3, #42	; 0x2a
 800b99a:	d135      	bne.n	800ba08 <_svfiprintf_r+0x188>
 800b99c:	9b03      	ldr	r3, [sp, #12]
 800b99e:	3402      	adds	r4, #2
 800b9a0:	1d1a      	adds	r2, r3, #4
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	9203      	str	r2, [sp, #12]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	bfb8      	it	lt
 800b9aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9ae:	9305      	str	r3, [sp, #20]
 800b9b0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800ba70 <_svfiprintf_r+0x1f0>
 800b9b4:	2203      	movs	r2, #3
 800b9b6:	4650      	mov	r0, sl
 800b9b8:	7821      	ldrb	r1, [r4, #0]
 800b9ba:	f7ff fdd3 	bl	800b564 <memchr>
 800b9be:	b140      	cbz	r0, 800b9d2 <_svfiprintf_r+0x152>
 800b9c0:	2340      	movs	r3, #64	; 0x40
 800b9c2:	eba0 000a 	sub.w	r0, r0, sl
 800b9c6:	fa03 f000 	lsl.w	r0, r3, r0
 800b9ca:	9b04      	ldr	r3, [sp, #16]
 800b9cc:	3401      	adds	r4, #1
 800b9ce:	4303      	orrs	r3, r0
 800b9d0:	9304      	str	r3, [sp, #16]
 800b9d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9d6:	2206      	movs	r2, #6
 800b9d8:	4826      	ldr	r0, [pc, #152]	; (800ba74 <_svfiprintf_r+0x1f4>)
 800b9da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9de:	f7ff fdc1 	bl	800b564 <memchr>
 800b9e2:	2800      	cmp	r0, #0
 800b9e4:	d038      	beq.n	800ba58 <_svfiprintf_r+0x1d8>
 800b9e6:	4b24      	ldr	r3, [pc, #144]	; (800ba78 <_svfiprintf_r+0x1f8>)
 800b9e8:	bb1b      	cbnz	r3, 800ba32 <_svfiprintf_r+0x1b2>
 800b9ea:	9b03      	ldr	r3, [sp, #12]
 800b9ec:	3307      	adds	r3, #7
 800b9ee:	f023 0307 	bic.w	r3, r3, #7
 800b9f2:	3308      	adds	r3, #8
 800b9f4:	9303      	str	r3, [sp, #12]
 800b9f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9f8:	4433      	add	r3, r6
 800b9fa:	9309      	str	r3, [sp, #36]	; 0x24
 800b9fc:	e767      	b.n	800b8ce <_svfiprintf_r+0x4e>
 800b9fe:	460c      	mov	r4, r1
 800ba00:	2001      	movs	r0, #1
 800ba02:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba06:	e7a5      	b.n	800b954 <_svfiprintf_r+0xd4>
 800ba08:	2300      	movs	r3, #0
 800ba0a:	f04f 0c0a 	mov.w	ip, #10
 800ba0e:	4619      	mov	r1, r3
 800ba10:	3401      	adds	r4, #1
 800ba12:	9305      	str	r3, [sp, #20]
 800ba14:	4620      	mov	r0, r4
 800ba16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba1a:	3a30      	subs	r2, #48	; 0x30
 800ba1c:	2a09      	cmp	r2, #9
 800ba1e:	d903      	bls.n	800ba28 <_svfiprintf_r+0x1a8>
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d0c5      	beq.n	800b9b0 <_svfiprintf_r+0x130>
 800ba24:	9105      	str	r1, [sp, #20]
 800ba26:	e7c3      	b.n	800b9b0 <_svfiprintf_r+0x130>
 800ba28:	4604      	mov	r4, r0
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba30:	e7f0      	b.n	800ba14 <_svfiprintf_r+0x194>
 800ba32:	ab03      	add	r3, sp, #12
 800ba34:	9300      	str	r3, [sp, #0]
 800ba36:	462a      	mov	r2, r5
 800ba38:	4638      	mov	r0, r7
 800ba3a:	4b10      	ldr	r3, [pc, #64]	; (800ba7c <_svfiprintf_r+0x1fc>)
 800ba3c:	a904      	add	r1, sp, #16
 800ba3e:	f3af 8000 	nop.w
 800ba42:	1c42      	adds	r2, r0, #1
 800ba44:	4606      	mov	r6, r0
 800ba46:	d1d6      	bne.n	800b9f6 <_svfiprintf_r+0x176>
 800ba48:	89ab      	ldrh	r3, [r5, #12]
 800ba4a:	065b      	lsls	r3, r3, #25
 800ba4c:	f53f af2c 	bmi.w	800b8a8 <_svfiprintf_r+0x28>
 800ba50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba52:	b01d      	add	sp, #116	; 0x74
 800ba54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba58:	ab03      	add	r3, sp, #12
 800ba5a:	9300      	str	r3, [sp, #0]
 800ba5c:	462a      	mov	r2, r5
 800ba5e:	4638      	mov	r0, r7
 800ba60:	4b06      	ldr	r3, [pc, #24]	; (800ba7c <_svfiprintf_r+0x1fc>)
 800ba62:	a904      	add	r1, sp, #16
 800ba64:	f7ff f954 	bl	800ad10 <_printf_i>
 800ba68:	e7eb      	b.n	800ba42 <_svfiprintf_r+0x1c2>
 800ba6a:	bf00      	nop
 800ba6c:	0800d7a4 	.word	0x0800d7a4
 800ba70:	0800d7aa 	.word	0x0800d7aa
 800ba74:	0800d7ae 	.word	0x0800d7ae
 800ba78:	00000000 	.word	0x00000000
 800ba7c:	0800b7cb 	.word	0x0800b7cb

0800ba80 <_sbrk_r>:
 800ba80:	b538      	push	{r3, r4, r5, lr}
 800ba82:	2300      	movs	r3, #0
 800ba84:	4d05      	ldr	r5, [pc, #20]	; (800ba9c <_sbrk_r+0x1c>)
 800ba86:	4604      	mov	r4, r0
 800ba88:	4608      	mov	r0, r1
 800ba8a:	602b      	str	r3, [r5, #0]
 800ba8c:	f7fa fb92 	bl	80061b4 <_sbrk>
 800ba90:	1c43      	adds	r3, r0, #1
 800ba92:	d102      	bne.n	800ba9a <_sbrk_r+0x1a>
 800ba94:	682b      	ldr	r3, [r5, #0]
 800ba96:	b103      	cbz	r3, 800ba9a <_sbrk_r+0x1a>
 800ba98:	6023      	str	r3, [r4, #0]
 800ba9a:	bd38      	pop	{r3, r4, r5, pc}
 800ba9c:	20001494 	.word	0x20001494

0800baa0 <_raise_r>:
 800baa0:	291f      	cmp	r1, #31
 800baa2:	b538      	push	{r3, r4, r5, lr}
 800baa4:	4604      	mov	r4, r0
 800baa6:	460d      	mov	r5, r1
 800baa8:	d904      	bls.n	800bab4 <_raise_r+0x14>
 800baaa:	2316      	movs	r3, #22
 800baac:	6003      	str	r3, [r0, #0]
 800baae:	f04f 30ff 	mov.w	r0, #4294967295
 800bab2:	bd38      	pop	{r3, r4, r5, pc}
 800bab4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bab6:	b112      	cbz	r2, 800babe <_raise_r+0x1e>
 800bab8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800babc:	b94b      	cbnz	r3, 800bad2 <_raise_r+0x32>
 800babe:	4620      	mov	r0, r4
 800bac0:	f000 f830 	bl	800bb24 <_getpid_r>
 800bac4:	462a      	mov	r2, r5
 800bac6:	4601      	mov	r1, r0
 800bac8:	4620      	mov	r0, r4
 800baca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bace:	f000 b817 	b.w	800bb00 <_kill_r>
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d00a      	beq.n	800baec <_raise_r+0x4c>
 800bad6:	1c59      	adds	r1, r3, #1
 800bad8:	d103      	bne.n	800bae2 <_raise_r+0x42>
 800bada:	2316      	movs	r3, #22
 800badc:	6003      	str	r3, [r0, #0]
 800bade:	2001      	movs	r0, #1
 800bae0:	e7e7      	b.n	800bab2 <_raise_r+0x12>
 800bae2:	2400      	movs	r4, #0
 800bae4:	4628      	mov	r0, r5
 800bae6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800baea:	4798      	blx	r3
 800baec:	2000      	movs	r0, #0
 800baee:	e7e0      	b.n	800bab2 <_raise_r+0x12>

0800baf0 <raise>:
 800baf0:	4b02      	ldr	r3, [pc, #8]	; (800bafc <raise+0xc>)
 800baf2:	4601      	mov	r1, r0
 800baf4:	6818      	ldr	r0, [r3, #0]
 800baf6:	f7ff bfd3 	b.w	800baa0 <_raise_r>
 800bafa:	bf00      	nop
 800bafc:	20000024 	.word	0x20000024

0800bb00 <_kill_r>:
 800bb00:	b538      	push	{r3, r4, r5, lr}
 800bb02:	2300      	movs	r3, #0
 800bb04:	4d06      	ldr	r5, [pc, #24]	; (800bb20 <_kill_r+0x20>)
 800bb06:	4604      	mov	r4, r0
 800bb08:	4608      	mov	r0, r1
 800bb0a:	4611      	mov	r1, r2
 800bb0c:	602b      	str	r3, [r5, #0]
 800bb0e:	f7fa face 	bl	80060ae <_kill>
 800bb12:	1c43      	adds	r3, r0, #1
 800bb14:	d102      	bne.n	800bb1c <_kill_r+0x1c>
 800bb16:	682b      	ldr	r3, [r5, #0]
 800bb18:	b103      	cbz	r3, 800bb1c <_kill_r+0x1c>
 800bb1a:	6023      	str	r3, [r4, #0]
 800bb1c:	bd38      	pop	{r3, r4, r5, pc}
 800bb1e:	bf00      	nop
 800bb20:	20001494 	.word	0x20001494

0800bb24 <_getpid_r>:
 800bb24:	f7fa babc 	b.w	80060a0 <_getpid>

0800bb28 <__sread>:
 800bb28:	b510      	push	{r4, lr}
 800bb2a:	460c      	mov	r4, r1
 800bb2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb30:	f000 f8a8 	bl	800bc84 <_read_r>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	bfab      	itete	ge
 800bb38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb3a:	89a3      	ldrhlt	r3, [r4, #12]
 800bb3c:	181b      	addge	r3, r3, r0
 800bb3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb42:	bfac      	ite	ge
 800bb44:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb46:	81a3      	strhlt	r3, [r4, #12]
 800bb48:	bd10      	pop	{r4, pc}

0800bb4a <__swrite>:
 800bb4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb4e:	461f      	mov	r7, r3
 800bb50:	898b      	ldrh	r3, [r1, #12]
 800bb52:	4605      	mov	r5, r0
 800bb54:	05db      	lsls	r3, r3, #23
 800bb56:	460c      	mov	r4, r1
 800bb58:	4616      	mov	r6, r2
 800bb5a:	d505      	bpl.n	800bb68 <__swrite+0x1e>
 800bb5c:	2302      	movs	r3, #2
 800bb5e:	2200      	movs	r2, #0
 800bb60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb64:	f000 f868 	bl	800bc38 <_lseek_r>
 800bb68:	89a3      	ldrh	r3, [r4, #12]
 800bb6a:	4632      	mov	r2, r6
 800bb6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb70:	81a3      	strh	r3, [r4, #12]
 800bb72:	4628      	mov	r0, r5
 800bb74:	463b      	mov	r3, r7
 800bb76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb7e:	f000 b817 	b.w	800bbb0 <_write_r>

0800bb82 <__sseek>:
 800bb82:	b510      	push	{r4, lr}
 800bb84:	460c      	mov	r4, r1
 800bb86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb8a:	f000 f855 	bl	800bc38 <_lseek_r>
 800bb8e:	1c43      	adds	r3, r0, #1
 800bb90:	89a3      	ldrh	r3, [r4, #12]
 800bb92:	bf15      	itete	ne
 800bb94:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb9e:	81a3      	strheq	r3, [r4, #12]
 800bba0:	bf18      	it	ne
 800bba2:	81a3      	strhne	r3, [r4, #12]
 800bba4:	bd10      	pop	{r4, pc}

0800bba6 <__sclose>:
 800bba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbaa:	f000 b813 	b.w	800bbd4 <_close_r>
	...

0800bbb0 <_write_r>:
 800bbb0:	b538      	push	{r3, r4, r5, lr}
 800bbb2:	4604      	mov	r4, r0
 800bbb4:	4608      	mov	r0, r1
 800bbb6:	4611      	mov	r1, r2
 800bbb8:	2200      	movs	r2, #0
 800bbba:	4d05      	ldr	r5, [pc, #20]	; (800bbd0 <_write_r+0x20>)
 800bbbc:	602a      	str	r2, [r5, #0]
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	f7fa faac 	bl	800611c <_write>
 800bbc4:	1c43      	adds	r3, r0, #1
 800bbc6:	d102      	bne.n	800bbce <_write_r+0x1e>
 800bbc8:	682b      	ldr	r3, [r5, #0]
 800bbca:	b103      	cbz	r3, 800bbce <_write_r+0x1e>
 800bbcc:	6023      	str	r3, [r4, #0]
 800bbce:	bd38      	pop	{r3, r4, r5, pc}
 800bbd0:	20001494 	.word	0x20001494

0800bbd4 <_close_r>:
 800bbd4:	b538      	push	{r3, r4, r5, lr}
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	4d05      	ldr	r5, [pc, #20]	; (800bbf0 <_close_r+0x1c>)
 800bbda:	4604      	mov	r4, r0
 800bbdc:	4608      	mov	r0, r1
 800bbde:	602b      	str	r3, [r5, #0]
 800bbe0:	f7fa fab8 	bl	8006154 <_close>
 800bbe4:	1c43      	adds	r3, r0, #1
 800bbe6:	d102      	bne.n	800bbee <_close_r+0x1a>
 800bbe8:	682b      	ldr	r3, [r5, #0]
 800bbea:	b103      	cbz	r3, 800bbee <_close_r+0x1a>
 800bbec:	6023      	str	r3, [r4, #0]
 800bbee:	bd38      	pop	{r3, r4, r5, pc}
 800bbf0:	20001494 	.word	0x20001494

0800bbf4 <_fstat_r>:
 800bbf4:	b538      	push	{r3, r4, r5, lr}
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	4d06      	ldr	r5, [pc, #24]	; (800bc14 <_fstat_r+0x20>)
 800bbfa:	4604      	mov	r4, r0
 800bbfc:	4608      	mov	r0, r1
 800bbfe:	4611      	mov	r1, r2
 800bc00:	602b      	str	r3, [r5, #0]
 800bc02:	f7fa fab2 	bl	800616a <_fstat>
 800bc06:	1c43      	adds	r3, r0, #1
 800bc08:	d102      	bne.n	800bc10 <_fstat_r+0x1c>
 800bc0a:	682b      	ldr	r3, [r5, #0]
 800bc0c:	b103      	cbz	r3, 800bc10 <_fstat_r+0x1c>
 800bc0e:	6023      	str	r3, [r4, #0]
 800bc10:	bd38      	pop	{r3, r4, r5, pc}
 800bc12:	bf00      	nop
 800bc14:	20001494 	.word	0x20001494

0800bc18 <_isatty_r>:
 800bc18:	b538      	push	{r3, r4, r5, lr}
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	4d05      	ldr	r5, [pc, #20]	; (800bc34 <_isatty_r+0x1c>)
 800bc1e:	4604      	mov	r4, r0
 800bc20:	4608      	mov	r0, r1
 800bc22:	602b      	str	r3, [r5, #0]
 800bc24:	f7fa fab0 	bl	8006188 <_isatty>
 800bc28:	1c43      	adds	r3, r0, #1
 800bc2a:	d102      	bne.n	800bc32 <_isatty_r+0x1a>
 800bc2c:	682b      	ldr	r3, [r5, #0]
 800bc2e:	b103      	cbz	r3, 800bc32 <_isatty_r+0x1a>
 800bc30:	6023      	str	r3, [r4, #0]
 800bc32:	bd38      	pop	{r3, r4, r5, pc}
 800bc34:	20001494 	.word	0x20001494

0800bc38 <_lseek_r>:
 800bc38:	b538      	push	{r3, r4, r5, lr}
 800bc3a:	4604      	mov	r4, r0
 800bc3c:	4608      	mov	r0, r1
 800bc3e:	4611      	mov	r1, r2
 800bc40:	2200      	movs	r2, #0
 800bc42:	4d05      	ldr	r5, [pc, #20]	; (800bc58 <_lseek_r+0x20>)
 800bc44:	602a      	str	r2, [r5, #0]
 800bc46:	461a      	mov	r2, r3
 800bc48:	f7fa faa8 	bl	800619c <_lseek>
 800bc4c:	1c43      	adds	r3, r0, #1
 800bc4e:	d102      	bne.n	800bc56 <_lseek_r+0x1e>
 800bc50:	682b      	ldr	r3, [r5, #0]
 800bc52:	b103      	cbz	r3, 800bc56 <_lseek_r+0x1e>
 800bc54:	6023      	str	r3, [r4, #0]
 800bc56:	bd38      	pop	{r3, r4, r5, pc}
 800bc58:	20001494 	.word	0x20001494

0800bc5c <__malloc_lock>:
 800bc5c:	4801      	ldr	r0, [pc, #4]	; (800bc64 <__malloc_lock+0x8>)
 800bc5e:	f7ff bc19 	b.w	800b494 <__retarget_lock_acquire_recursive>
 800bc62:	bf00      	nop
 800bc64:	20001488 	.word	0x20001488

0800bc68 <__malloc_unlock>:
 800bc68:	4801      	ldr	r0, [pc, #4]	; (800bc70 <__malloc_unlock+0x8>)
 800bc6a:	f7ff bc14 	b.w	800b496 <__retarget_lock_release_recursive>
 800bc6e:	bf00      	nop
 800bc70:	20001488 	.word	0x20001488

0800bc74 <_malloc_usable_size_r>:
 800bc74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc78:	1f18      	subs	r0, r3, #4
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	bfbc      	itt	lt
 800bc7e:	580b      	ldrlt	r3, [r1, r0]
 800bc80:	18c0      	addlt	r0, r0, r3
 800bc82:	4770      	bx	lr

0800bc84 <_read_r>:
 800bc84:	b538      	push	{r3, r4, r5, lr}
 800bc86:	4604      	mov	r4, r0
 800bc88:	4608      	mov	r0, r1
 800bc8a:	4611      	mov	r1, r2
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	4d05      	ldr	r5, [pc, #20]	; (800bca4 <_read_r+0x20>)
 800bc90:	602a      	str	r2, [r5, #0]
 800bc92:	461a      	mov	r2, r3
 800bc94:	f7fa fa25 	bl	80060e2 <_read>
 800bc98:	1c43      	adds	r3, r0, #1
 800bc9a:	d102      	bne.n	800bca2 <_read_r+0x1e>
 800bc9c:	682b      	ldr	r3, [r5, #0]
 800bc9e:	b103      	cbz	r3, 800bca2 <_read_r+0x1e>
 800bca0:	6023      	str	r3, [r4, #0]
 800bca2:	bd38      	pop	{r3, r4, r5, pc}
 800bca4:	20001494 	.word	0x20001494

0800bca8 <atan>:
 800bca8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcac:	4bb6      	ldr	r3, [pc, #728]	; (800bf88 <atan+0x2e0>)
 800bcae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bcb2:	429e      	cmp	r6, r3
 800bcb4:	4604      	mov	r4, r0
 800bcb6:	460d      	mov	r5, r1
 800bcb8:	468b      	mov	fp, r1
 800bcba:	dd17      	ble.n	800bcec <atan+0x44>
 800bcbc:	4bb3      	ldr	r3, [pc, #716]	; (800bf8c <atan+0x2e4>)
 800bcbe:	429e      	cmp	r6, r3
 800bcc0:	dc01      	bgt.n	800bcc6 <atan+0x1e>
 800bcc2:	d109      	bne.n	800bcd8 <atan+0x30>
 800bcc4:	b140      	cbz	r0, 800bcd8 <atan+0x30>
 800bcc6:	4622      	mov	r2, r4
 800bcc8:	462b      	mov	r3, r5
 800bcca:	4620      	mov	r0, r4
 800bccc:	4629      	mov	r1, r5
 800bcce:	f7f4 fab1 	bl	8000234 <__adddf3>
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	460d      	mov	r5, r1
 800bcd6:	e005      	b.n	800bce4 <atan+0x3c>
 800bcd8:	f1bb 0f00 	cmp.w	fp, #0
 800bcdc:	4cac      	ldr	r4, [pc, #688]	; (800bf90 <atan+0x2e8>)
 800bcde:	f300 8121 	bgt.w	800bf24 <atan+0x27c>
 800bce2:	4dac      	ldr	r5, [pc, #688]	; (800bf94 <atan+0x2ec>)
 800bce4:	4620      	mov	r0, r4
 800bce6:	4629      	mov	r1, r5
 800bce8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcec:	4baa      	ldr	r3, [pc, #680]	; (800bf98 <atan+0x2f0>)
 800bcee:	429e      	cmp	r6, r3
 800bcf0:	dc11      	bgt.n	800bd16 <atan+0x6e>
 800bcf2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bcf6:	429e      	cmp	r6, r3
 800bcf8:	dc0a      	bgt.n	800bd10 <atan+0x68>
 800bcfa:	a38b      	add	r3, pc, #556	; (adr r3, 800bf28 <atan+0x280>)
 800bcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd00:	f7f4 fa98 	bl	8000234 <__adddf3>
 800bd04:	2200      	movs	r2, #0
 800bd06:	4ba5      	ldr	r3, [pc, #660]	; (800bf9c <atan+0x2f4>)
 800bd08:	f7f4 feda 	bl	8000ac0 <__aeabi_dcmpgt>
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	d1e9      	bne.n	800bce4 <atan+0x3c>
 800bd10:	f04f 3aff 	mov.w	sl, #4294967295
 800bd14:	e027      	b.n	800bd66 <atan+0xbe>
 800bd16:	f000 f997 	bl	800c048 <fabs>
 800bd1a:	4ba1      	ldr	r3, [pc, #644]	; (800bfa0 <atan+0x2f8>)
 800bd1c:	4604      	mov	r4, r0
 800bd1e:	429e      	cmp	r6, r3
 800bd20:	460d      	mov	r5, r1
 800bd22:	f300 80b8 	bgt.w	800be96 <atan+0x1ee>
 800bd26:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bd2a:	429e      	cmp	r6, r3
 800bd2c:	f300 809c 	bgt.w	800be68 <atan+0x1c0>
 800bd30:	4602      	mov	r2, r0
 800bd32:	460b      	mov	r3, r1
 800bd34:	f7f4 fa7e 	bl	8000234 <__adddf3>
 800bd38:	2200      	movs	r2, #0
 800bd3a:	4b98      	ldr	r3, [pc, #608]	; (800bf9c <atan+0x2f4>)
 800bd3c:	f7f4 fa78 	bl	8000230 <__aeabi_dsub>
 800bd40:	2200      	movs	r2, #0
 800bd42:	4606      	mov	r6, r0
 800bd44:	460f      	mov	r7, r1
 800bd46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	4629      	mov	r1, r5
 800bd4e:	f7f4 fa71 	bl	8000234 <__adddf3>
 800bd52:	4602      	mov	r2, r0
 800bd54:	460b      	mov	r3, r1
 800bd56:	4630      	mov	r0, r6
 800bd58:	4639      	mov	r1, r7
 800bd5a:	f7f4 fd4b 	bl	80007f4 <__aeabi_ddiv>
 800bd5e:	f04f 0a00 	mov.w	sl, #0
 800bd62:	4604      	mov	r4, r0
 800bd64:	460d      	mov	r5, r1
 800bd66:	4622      	mov	r2, r4
 800bd68:	462b      	mov	r3, r5
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	4629      	mov	r1, r5
 800bd6e:	f7f4 fc17 	bl	80005a0 <__aeabi_dmul>
 800bd72:	4602      	mov	r2, r0
 800bd74:	460b      	mov	r3, r1
 800bd76:	4680      	mov	r8, r0
 800bd78:	4689      	mov	r9, r1
 800bd7a:	f7f4 fc11 	bl	80005a0 <__aeabi_dmul>
 800bd7e:	a36c      	add	r3, pc, #432	; (adr r3, 800bf30 <atan+0x288>)
 800bd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd84:	4606      	mov	r6, r0
 800bd86:	460f      	mov	r7, r1
 800bd88:	f7f4 fc0a 	bl	80005a0 <__aeabi_dmul>
 800bd8c:	a36a      	add	r3, pc, #424	; (adr r3, 800bf38 <atan+0x290>)
 800bd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd92:	f7f4 fa4f 	bl	8000234 <__adddf3>
 800bd96:	4632      	mov	r2, r6
 800bd98:	463b      	mov	r3, r7
 800bd9a:	f7f4 fc01 	bl	80005a0 <__aeabi_dmul>
 800bd9e:	a368      	add	r3, pc, #416	; (adr r3, 800bf40 <atan+0x298>)
 800bda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda4:	f7f4 fa46 	bl	8000234 <__adddf3>
 800bda8:	4632      	mov	r2, r6
 800bdaa:	463b      	mov	r3, r7
 800bdac:	f7f4 fbf8 	bl	80005a0 <__aeabi_dmul>
 800bdb0:	a365      	add	r3, pc, #404	; (adr r3, 800bf48 <atan+0x2a0>)
 800bdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb6:	f7f4 fa3d 	bl	8000234 <__adddf3>
 800bdba:	4632      	mov	r2, r6
 800bdbc:	463b      	mov	r3, r7
 800bdbe:	f7f4 fbef 	bl	80005a0 <__aeabi_dmul>
 800bdc2:	a363      	add	r3, pc, #396	; (adr r3, 800bf50 <atan+0x2a8>)
 800bdc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc8:	f7f4 fa34 	bl	8000234 <__adddf3>
 800bdcc:	4632      	mov	r2, r6
 800bdce:	463b      	mov	r3, r7
 800bdd0:	f7f4 fbe6 	bl	80005a0 <__aeabi_dmul>
 800bdd4:	a360      	add	r3, pc, #384	; (adr r3, 800bf58 <atan+0x2b0>)
 800bdd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdda:	f7f4 fa2b 	bl	8000234 <__adddf3>
 800bdde:	4642      	mov	r2, r8
 800bde0:	464b      	mov	r3, r9
 800bde2:	f7f4 fbdd 	bl	80005a0 <__aeabi_dmul>
 800bde6:	a35e      	add	r3, pc, #376	; (adr r3, 800bf60 <atan+0x2b8>)
 800bde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdec:	4680      	mov	r8, r0
 800bdee:	4689      	mov	r9, r1
 800bdf0:	4630      	mov	r0, r6
 800bdf2:	4639      	mov	r1, r7
 800bdf4:	f7f4 fbd4 	bl	80005a0 <__aeabi_dmul>
 800bdf8:	a35b      	add	r3, pc, #364	; (adr r3, 800bf68 <atan+0x2c0>)
 800bdfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfe:	f7f4 fa17 	bl	8000230 <__aeabi_dsub>
 800be02:	4632      	mov	r2, r6
 800be04:	463b      	mov	r3, r7
 800be06:	f7f4 fbcb 	bl	80005a0 <__aeabi_dmul>
 800be0a:	a359      	add	r3, pc, #356	; (adr r3, 800bf70 <atan+0x2c8>)
 800be0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be10:	f7f4 fa0e 	bl	8000230 <__aeabi_dsub>
 800be14:	4632      	mov	r2, r6
 800be16:	463b      	mov	r3, r7
 800be18:	f7f4 fbc2 	bl	80005a0 <__aeabi_dmul>
 800be1c:	a356      	add	r3, pc, #344	; (adr r3, 800bf78 <atan+0x2d0>)
 800be1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be22:	f7f4 fa05 	bl	8000230 <__aeabi_dsub>
 800be26:	4632      	mov	r2, r6
 800be28:	463b      	mov	r3, r7
 800be2a:	f7f4 fbb9 	bl	80005a0 <__aeabi_dmul>
 800be2e:	a354      	add	r3, pc, #336	; (adr r3, 800bf80 <atan+0x2d8>)
 800be30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be34:	f7f4 f9fc 	bl	8000230 <__aeabi_dsub>
 800be38:	4632      	mov	r2, r6
 800be3a:	463b      	mov	r3, r7
 800be3c:	f7f4 fbb0 	bl	80005a0 <__aeabi_dmul>
 800be40:	4602      	mov	r2, r0
 800be42:	460b      	mov	r3, r1
 800be44:	4640      	mov	r0, r8
 800be46:	4649      	mov	r1, r9
 800be48:	f7f4 f9f4 	bl	8000234 <__adddf3>
 800be4c:	4622      	mov	r2, r4
 800be4e:	462b      	mov	r3, r5
 800be50:	f7f4 fba6 	bl	80005a0 <__aeabi_dmul>
 800be54:	f1ba 3fff 	cmp.w	sl, #4294967295
 800be58:	4602      	mov	r2, r0
 800be5a:	460b      	mov	r3, r1
 800be5c:	d144      	bne.n	800bee8 <atan+0x240>
 800be5e:	4620      	mov	r0, r4
 800be60:	4629      	mov	r1, r5
 800be62:	f7f4 f9e5 	bl	8000230 <__aeabi_dsub>
 800be66:	e734      	b.n	800bcd2 <atan+0x2a>
 800be68:	2200      	movs	r2, #0
 800be6a:	4b4c      	ldr	r3, [pc, #304]	; (800bf9c <atan+0x2f4>)
 800be6c:	f7f4 f9e0 	bl	8000230 <__aeabi_dsub>
 800be70:	2200      	movs	r2, #0
 800be72:	4606      	mov	r6, r0
 800be74:	460f      	mov	r7, r1
 800be76:	4620      	mov	r0, r4
 800be78:	4629      	mov	r1, r5
 800be7a:	4b48      	ldr	r3, [pc, #288]	; (800bf9c <atan+0x2f4>)
 800be7c:	f7f4 f9da 	bl	8000234 <__adddf3>
 800be80:	4602      	mov	r2, r0
 800be82:	460b      	mov	r3, r1
 800be84:	4630      	mov	r0, r6
 800be86:	4639      	mov	r1, r7
 800be88:	f7f4 fcb4 	bl	80007f4 <__aeabi_ddiv>
 800be8c:	f04f 0a01 	mov.w	sl, #1
 800be90:	4604      	mov	r4, r0
 800be92:	460d      	mov	r5, r1
 800be94:	e767      	b.n	800bd66 <atan+0xbe>
 800be96:	4b43      	ldr	r3, [pc, #268]	; (800bfa4 <atan+0x2fc>)
 800be98:	429e      	cmp	r6, r3
 800be9a:	da1a      	bge.n	800bed2 <atan+0x22a>
 800be9c:	2200      	movs	r2, #0
 800be9e:	4b42      	ldr	r3, [pc, #264]	; (800bfa8 <atan+0x300>)
 800bea0:	f7f4 f9c6 	bl	8000230 <__aeabi_dsub>
 800bea4:	2200      	movs	r2, #0
 800bea6:	4606      	mov	r6, r0
 800bea8:	460f      	mov	r7, r1
 800beaa:	4620      	mov	r0, r4
 800beac:	4629      	mov	r1, r5
 800beae:	4b3e      	ldr	r3, [pc, #248]	; (800bfa8 <atan+0x300>)
 800beb0:	f7f4 fb76 	bl	80005a0 <__aeabi_dmul>
 800beb4:	2200      	movs	r2, #0
 800beb6:	4b39      	ldr	r3, [pc, #228]	; (800bf9c <atan+0x2f4>)
 800beb8:	f7f4 f9bc 	bl	8000234 <__adddf3>
 800bebc:	4602      	mov	r2, r0
 800bebe:	460b      	mov	r3, r1
 800bec0:	4630      	mov	r0, r6
 800bec2:	4639      	mov	r1, r7
 800bec4:	f7f4 fc96 	bl	80007f4 <__aeabi_ddiv>
 800bec8:	f04f 0a02 	mov.w	sl, #2
 800becc:	4604      	mov	r4, r0
 800bece:	460d      	mov	r5, r1
 800bed0:	e749      	b.n	800bd66 <atan+0xbe>
 800bed2:	4602      	mov	r2, r0
 800bed4:	460b      	mov	r3, r1
 800bed6:	2000      	movs	r0, #0
 800bed8:	4934      	ldr	r1, [pc, #208]	; (800bfac <atan+0x304>)
 800beda:	f7f4 fc8b 	bl	80007f4 <__aeabi_ddiv>
 800bede:	f04f 0a03 	mov.w	sl, #3
 800bee2:	4604      	mov	r4, r0
 800bee4:	460d      	mov	r5, r1
 800bee6:	e73e      	b.n	800bd66 <atan+0xbe>
 800bee8:	4b31      	ldr	r3, [pc, #196]	; (800bfb0 <atan+0x308>)
 800beea:	4e32      	ldr	r6, [pc, #200]	; (800bfb4 <atan+0x30c>)
 800beec:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bef0:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800bef4:	e9da 2300 	ldrd	r2, r3, [sl]
 800bef8:	f7f4 f99a 	bl	8000230 <__aeabi_dsub>
 800befc:	4622      	mov	r2, r4
 800befe:	462b      	mov	r3, r5
 800bf00:	f7f4 f996 	bl	8000230 <__aeabi_dsub>
 800bf04:	4602      	mov	r2, r0
 800bf06:	460b      	mov	r3, r1
 800bf08:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bf0c:	f7f4 f990 	bl	8000230 <__aeabi_dsub>
 800bf10:	f1bb 0f00 	cmp.w	fp, #0
 800bf14:	4604      	mov	r4, r0
 800bf16:	460d      	mov	r5, r1
 800bf18:	f6bf aee4 	bge.w	800bce4 <atan+0x3c>
 800bf1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf20:	461d      	mov	r5, r3
 800bf22:	e6df      	b.n	800bce4 <atan+0x3c>
 800bf24:	4d24      	ldr	r5, [pc, #144]	; (800bfb8 <atan+0x310>)
 800bf26:	e6dd      	b.n	800bce4 <atan+0x3c>
 800bf28:	8800759c 	.word	0x8800759c
 800bf2c:	7e37e43c 	.word	0x7e37e43c
 800bf30:	e322da11 	.word	0xe322da11
 800bf34:	3f90ad3a 	.word	0x3f90ad3a
 800bf38:	24760deb 	.word	0x24760deb
 800bf3c:	3fa97b4b 	.word	0x3fa97b4b
 800bf40:	a0d03d51 	.word	0xa0d03d51
 800bf44:	3fb10d66 	.word	0x3fb10d66
 800bf48:	c54c206e 	.word	0xc54c206e
 800bf4c:	3fb745cd 	.word	0x3fb745cd
 800bf50:	920083ff 	.word	0x920083ff
 800bf54:	3fc24924 	.word	0x3fc24924
 800bf58:	5555550d 	.word	0x5555550d
 800bf5c:	3fd55555 	.word	0x3fd55555
 800bf60:	2c6a6c2f 	.word	0x2c6a6c2f
 800bf64:	bfa2b444 	.word	0xbfa2b444
 800bf68:	52defd9a 	.word	0x52defd9a
 800bf6c:	3fadde2d 	.word	0x3fadde2d
 800bf70:	af749a6d 	.word	0xaf749a6d
 800bf74:	3fb3b0f2 	.word	0x3fb3b0f2
 800bf78:	fe231671 	.word	0xfe231671
 800bf7c:	3fbc71c6 	.word	0x3fbc71c6
 800bf80:	9998ebc4 	.word	0x9998ebc4
 800bf84:	3fc99999 	.word	0x3fc99999
 800bf88:	440fffff 	.word	0x440fffff
 800bf8c:	7ff00000 	.word	0x7ff00000
 800bf90:	54442d18 	.word	0x54442d18
 800bf94:	bff921fb 	.word	0xbff921fb
 800bf98:	3fdbffff 	.word	0x3fdbffff
 800bf9c:	3ff00000 	.word	0x3ff00000
 800bfa0:	3ff2ffff 	.word	0x3ff2ffff
 800bfa4:	40038000 	.word	0x40038000
 800bfa8:	3ff80000 	.word	0x3ff80000
 800bfac:	bff00000 	.word	0xbff00000
 800bfb0:	0800d858 	.word	0x0800d858
 800bfb4:	0800d838 	.word	0x0800d838
 800bfb8:	3ff921fb 	.word	0x3ff921fb

0800bfbc <cos>:
 800bfbc:	b530      	push	{r4, r5, lr}
 800bfbe:	4a20      	ldr	r2, [pc, #128]	; (800c040 <cos+0x84>)
 800bfc0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	b087      	sub	sp, #28
 800bfc8:	dc06      	bgt.n	800bfd8 <cos+0x1c>
 800bfca:	2200      	movs	r2, #0
 800bfcc:	2300      	movs	r3, #0
 800bfce:	b007      	add	sp, #28
 800bfd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bfd4:	f000 baa0 	b.w	800c518 <__kernel_cos>
 800bfd8:	4a1a      	ldr	r2, [pc, #104]	; (800c044 <cos+0x88>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	dd05      	ble.n	800bfea <cos+0x2e>
 800bfde:	4602      	mov	r2, r0
 800bfe0:	460b      	mov	r3, r1
 800bfe2:	f7f4 f925 	bl	8000230 <__aeabi_dsub>
 800bfe6:	b007      	add	sp, #28
 800bfe8:	bd30      	pop	{r4, r5, pc}
 800bfea:	aa02      	add	r2, sp, #8
 800bfec:	f000 f89c 	bl	800c128 <__ieee754_rem_pio2>
 800bff0:	f000 0003 	and.w	r0, r0, #3
 800bff4:	2801      	cmp	r0, #1
 800bff6:	d009      	beq.n	800c00c <cos+0x50>
 800bff8:	2802      	cmp	r0, #2
 800bffa:	d011      	beq.n	800c020 <cos+0x64>
 800bffc:	b9b8      	cbnz	r0, 800c02e <cos+0x72>
 800bffe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c002:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c006:	f000 fa87 	bl	800c518 <__kernel_cos>
 800c00a:	e7ec      	b.n	800bfe6 <cos+0x2a>
 800c00c:	9000      	str	r0, [sp, #0]
 800c00e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c016:	f000 fe7f 	bl	800cd18 <__kernel_sin>
 800c01a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c01e:	e7e2      	b.n	800bfe6 <cos+0x2a>
 800c020:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c024:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c028:	f000 fa76 	bl	800c518 <__kernel_cos>
 800c02c:	e7f5      	b.n	800c01a <cos+0x5e>
 800c02e:	2301      	movs	r3, #1
 800c030:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c034:	9300      	str	r3, [sp, #0]
 800c036:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c03a:	f000 fe6d 	bl	800cd18 <__kernel_sin>
 800c03e:	e7d2      	b.n	800bfe6 <cos+0x2a>
 800c040:	3fe921fb 	.word	0x3fe921fb
 800c044:	7fefffff 	.word	0x7fefffff

0800c048 <fabs>:
 800c048:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c04c:	4770      	bx	lr
	...

0800c050 <sin>:
 800c050:	b530      	push	{r4, r5, lr}
 800c052:	4a20      	ldr	r2, [pc, #128]	; (800c0d4 <sin+0x84>)
 800c054:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c058:	4293      	cmp	r3, r2
 800c05a:	b087      	sub	sp, #28
 800c05c:	dc06      	bgt.n	800c06c <sin+0x1c>
 800c05e:	2300      	movs	r3, #0
 800c060:	2200      	movs	r2, #0
 800c062:	9300      	str	r3, [sp, #0]
 800c064:	2300      	movs	r3, #0
 800c066:	f000 fe57 	bl	800cd18 <__kernel_sin>
 800c06a:	e006      	b.n	800c07a <sin+0x2a>
 800c06c:	4a1a      	ldr	r2, [pc, #104]	; (800c0d8 <sin+0x88>)
 800c06e:	4293      	cmp	r3, r2
 800c070:	dd05      	ble.n	800c07e <sin+0x2e>
 800c072:	4602      	mov	r2, r0
 800c074:	460b      	mov	r3, r1
 800c076:	f7f4 f8db 	bl	8000230 <__aeabi_dsub>
 800c07a:	b007      	add	sp, #28
 800c07c:	bd30      	pop	{r4, r5, pc}
 800c07e:	aa02      	add	r2, sp, #8
 800c080:	f000 f852 	bl	800c128 <__ieee754_rem_pio2>
 800c084:	f000 0003 	and.w	r0, r0, #3
 800c088:	2801      	cmp	r0, #1
 800c08a:	d009      	beq.n	800c0a0 <sin+0x50>
 800c08c:	2802      	cmp	r0, #2
 800c08e:	d00e      	beq.n	800c0ae <sin+0x5e>
 800c090:	b9c0      	cbnz	r0, 800c0c4 <sin+0x74>
 800c092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c096:	2301      	movs	r3, #1
 800c098:	9300      	str	r3, [sp, #0]
 800c09a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c09e:	e7e2      	b.n	800c066 <sin+0x16>
 800c0a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0a8:	f000 fa36 	bl	800c518 <__kernel_cos>
 800c0ac:	e7e5      	b.n	800c07a <sin+0x2a>
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0b4:	9300      	str	r3, [sp, #0]
 800c0b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0ba:	f000 fe2d 	bl	800cd18 <__kernel_sin>
 800c0be:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c0c2:	e7da      	b.n	800c07a <sin+0x2a>
 800c0c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0cc:	f000 fa24 	bl	800c518 <__kernel_cos>
 800c0d0:	e7f5      	b.n	800c0be <sin+0x6e>
 800c0d2:	bf00      	nop
 800c0d4:	3fe921fb 	.word	0x3fe921fb
 800c0d8:	7fefffff 	.word	0x7fefffff

0800c0dc <roundf>:
 800c0dc:	b508      	push	{r3, lr}
 800c0de:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c0e2:	3b7f      	subs	r3, #127	; 0x7f
 800c0e4:	2b16      	cmp	r3, #22
 800c0e6:	4601      	mov	r1, r0
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	dc14      	bgt.n	800c116 <roundf+0x3a>
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	da07      	bge.n	800c100 <roundf+0x24>
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 800c0f6:	d101      	bne.n	800c0fc <roundf+0x20>
 800c0f8:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 800c0fc:	4608      	mov	r0, r1
 800c0fe:	bd08      	pop	{r3, pc}
 800c100:	4808      	ldr	r0, [pc, #32]	; (800c124 <roundf+0x48>)
 800c102:	4118      	asrs	r0, r3
 800c104:	4201      	tst	r1, r0
 800c106:	d0f9      	beq.n	800c0fc <roundf+0x20>
 800c108:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c10c:	4119      	asrs	r1, r3
 800c10e:	4411      	add	r1, r2
 800c110:	ea21 0100 	bic.w	r1, r1, r0
 800c114:	e7f2      	b.n	800c0fc <roundf+0x20>
 800c116:	2b80      	cmp	r3, #128	; 0x80
 800c118:	d1f0      	bne.n	800c0fc <roundf+0x20>
 800c11a:	f7f4 fd59 	bl	8000bd0 <__addsf3>
 800c11e:	4601      	mov	r1, r0
 800c120:	e7ec      	b.n	800c0fc <roundf+0x20>
 800c122:	bf00      	nop
 800c124:	007fffff 	.word	0x007fffff

0800c128 <__ieee754_rem_pio2>:
 800c128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c12c:	4614      	mov	r4, r2
 800c12e:	4ac4      	ldr	r2, [pc, #784]	; (800c440 <__ieee754_rem_pio2+0x318>)
 800c130:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800c134:	b08d      	sub	sp, #52	; 0x34
 800c136:	4592      	cmp	sl, r2
 800c138:	9104      	str	r1, [sp, #16]
 800c13a:	dc07      	bgt.n	800c14c <__ieee754_rem_pio2+0x24>
 800c13c:	2200      	movs	r2, #0
 800c13e:	2300      	movs	r3, #0
 800c140:	e9c4 0100 	strd	r0, r1, [r4]
 800c144:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c148:	2500      	movs	r5, #0
 800c14a:	e024      	b.n	800c196 <__ieee754_rem_pio2+0x6e>
 800c14c:	4abd      	ldr	r2, [pc, #756]	; (800c444 <__ieee754_rem_pio2+0x31c>)
 800c14e:	4592      	cmp	sl, r2
 800c150:	dc72      	bgt.n	800c238 <__ieee754_rem_pio2+0x110>
 800c152:	9b04      	ldr	r3, [sp, #16]
 800c154:	4dbc      	ldr	r5, [pc, #752]	; (800c448 <__ieee754_rem_pio2+0x320>)
 800c156:	2b00      	cmp	r3, #0
 800c158:	a3ab      	add	r3, pc, #684	; (adr r3, 800c408 <__ieee754_rem_pio2+0x2e0>)
 800c15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15e:	dd36      	ble.n	800c1ce <__ieee754_rem_pio2+0xa6>
 800c160:	f7f4 f866 	bl	8000230 <__aeabi_dsub>
 800c164:	45aa      	cmp	sl, r5
 800c166:	4606      	mov	r6, r0
 800c168:	460f      	mov	r7, r1
 800c16a:	d018      	beq.n	800c19e <__ieee754_rem_pio2+0x76>
 800c16c:	a3a8      	add	r3, pc, #672	; (adr r3, 800c410 <__ieee754_rem_pio2+0x2e8>)
 800c16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c172:	f7f4 f85d 	bl	8000230 <__aeabi_dsub>
 800c176:	4602      	mov	r2, r0
 800c178:	460b      	mov	r3, r1
 800c17a:	4630      	mov	r0, r6
 800c17c:	e9c4 2300 	strd	r2, r3, [r4]
 800c180:	4639      	mov	r1, r7
 800c182:	f7f4 f855 	bl	8000230 <__aeabi_dsub>
 800c186:	a3a2      	add	r3, pc, #648	; (adr r3, 800c410 <__ieee754_rem_pio2+0x2e8>)
 800c188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18c:	f7f4 f850 	bl	8000230 <__aeabi_dsub>
 800c190:	2501      	movs	r5, #1
 800c192:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c196:	4628      	mov	r0, r5
 800c198:	b00d      	add	sp, #52	; 0x34
 800c19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c19e:	a39e      	add	r3, pc, #632	; (adr r3, 800c418 <__ieee754_rem_pio2+0x2f0>)
 800c1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a4:	f7f4 f844 	bl	8000230 <__aeabi_dsub>
 800c1a8:	a39d      	add	r3, pc, #628	; (adr r3, 800c420 <__ieee754_rem_pio2+0x2f8>)
 800c1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ae:	4606      	mov	r6, r0
 800c1b0:	460f      	mov	r7, r1
 800c1b2:	f7f4 f83d 	bl	8000230 <__aeabi_dsub>
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	4630      	mov	r0, r6
 800c1bc:	e9c4 2300 	strd	r2, r3, [r4]
 800c1c0:	4639      	mov	r1, r7
 800c1c2:	f7f4 f835 	bl	8000230 <__aeabi_dsub>
 800c1c6:	a396      	add	r3, pc, #600	; (adr r3, 800c420 <__ieee754_rem_pio2+0x2f8>)
 800c1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1cc:	e7de      	b.n	800c18c <__ieee754_rem_pio2+0x64>
 800c1ce:	f7f4 f831 	bl	8000234 <__adddf3>
 800c1d2:	45aa      	cmp	sl, r5
 800c1d4:	4606      	mov	r6, r0
 800c1d6:	460f      	mov	r7, r1
 800c1d8:	d016      	beq.n	800c208 <__ieee754_rem_pio2+0xe0>
 800c1da:	a38d      	add	r3, pc, #564	; (adr r3, 800c410 <__ieee754_rem_pio2+0x2e8>)
 800c1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e0:	f7f4 f828 	bl	8000234 <__adddf3>
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	460b      	mov	r3, r1
 800c1e8:	4630      	mov	r0, r6
 800c1ea:	e9c4 2300 	strd	r2, r3, [r4]
 800c1ee:	4639      	mov	r1, r7
 800c1f0:	f7f4 f81e 	bl	8000230 <__aeabi_dsub>
 800c1f4:	a386      	add	r3, pc, #536	; (adr r3, 800c410 <__ieee754_rem_pio2+0x2e8>)
 800c1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fa:	f7f4 f81b 	bl	8000234 <__adddf3>
 800c1fe:	f04f 35ff 	mov.w	r5, #4294967295
 800c202:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c206:	e7c6      	b.n	800c196 <__ieee754_rem_pio2+0x6e>
 800c208:	a383      	add	r3, pc, #524	; (adr r3, 800c418 <__ieee754_rem_pio2+0x2f0>)
 800c20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20e:	f7f4 f811 	bl	8000234 <__adddf3>
 800c212:	a383      	add	r3, pc, #524	; (adr r3, 800c420 <__ieee754_rem_pio2+0x2f8>)
 800c214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c218:	4606      	mov	r6, r0
 800c21a:	460f      	mov	r7, r1
 800c21c:	f7f4 f80a 	bl	8000234 <__adddf3>
 800c220:	4602      	mov	r2, r0
 800c222:	460b      	mov	r3, r1
 800c224:	4630      	mov	r0, r6
 800c226:	e9c4 2300 	strd	r2, r3, [r4]
 800c22a:	4639      	mov	r1, r7
 800c22c:	f7f4 f800 	bl	8000230 <__aeabi_dsub>
 800c230:	a37b      	add	r3, pc, #492	; (adr r3, 800c420 <__ieee754_rem_pio2+0x2f8>)
 800c232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c236:	e7e0      	b.n	800c1fa <__ieee754_rem_pio2+0xd2>
 800c238:	4a84      	ldr	r2, [pc, #528]	; (800c44c <__ieee754_rem_pio2+0x324>)
 800c23a:	4592      	cmp	sl, r2
 800c23c:	f300 80d5 	bgt.w	800c3ea <__ieee754_rem_pio2+0x2c2>
 800c240:	f7ff ff02 	bl	800c048 <fabs>
 800c244:	a378      	add	r3, pc, #480	; (adr r3, 800c428 <__ieee754_rem_pio2+0x300>)
 800c246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24a:	4606      	mov	r6, r0
 800c24c:	460f      	mov	r7, r1
 800c24e:	f7f4 f9a7 	bl	80005a0 <__aeabi_dmul>
 800c252:	2200      	movs	r2, #0
 800c254:	4b7e      	ldr	r3, [pc, #504]	; (800c450 <__ieee754_rem_pio2+0x328>)
 800c256:	f7f3 ffed 	bl	8000234 <__adddf3>
 800c25a:	f7f4 fc3b 	bl	8000ad4 <__aeabi_d2iz>
 800c25e:	4605      	mov	r5, r0
 800c260:	f7f4 f934 	bl	80004cc <__aeabi_i2d>
 800c264:	4602      	mov	r2, r0
 800c266:	460b      	mov	r3, r1
 800c268:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c26c:	a366      	add	r3, pc, #408	; (adr r3, 800c408 <__ieee754_rem_pio2+0x2e0>)
 800c26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c272:	f7f4 f995 	bl	80005a0 <__aeabi_dmul>
 800c276:	4602      	mov	r2, r0
 800c278:	460b      	mov	r3, r1
 800c27a:	4630      	mov	r0, r6
 800c27c:	4639      	mov	r1, r7
 800c27e:	f7f3 ffd7 	bl	8000230 <__aeabi_dsub>
 800c282:	a363      	add	r3, pc, #396	; (adr r3, 800c410 <__ieee754_rem_pio2+0x2e8>)
 800c284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c288:	4680      	mov	r8, r0
 800c28a:	4689      	mov	r9, r1
 800c28c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c290:	f7f4 f986 	bl	80005a0 <__aeabi_dmul>
 800c294:	2d1f      	cmp	r5, #31
 800c296:	4606      	mov	r6, r0
 800c298:	460f      	mov	r7, r1
 800c29a:	dc0e      	bgt.n	800c2ba <__ieee754_rem_pio2+0x192>
 800c29c:	4b6d      	ldr	r3, [pc, #436]	; (800c454 <__ieee754_rem_pio2+0x32c>)
 800c29e:	1e6a      	subs	r2, r5, #1
 800c2a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2a4:	4553      	cmp	r3, sl
 800c2a6:	d008      	beq.n	800c2ba <__ieee754_rem_pio2+0x192>
 800c2a8:	4632      	mov	r2, r6
 800c2aa:	463b      	mov	r3, r7
 800c2ac:	4640      	mov	r0, r8
 800c2ae:	4649      	mov	r1, r9
 800c2b0:	f7f3 ffbe 	bl	8000230 <__aeabi_dsub>
 800c2b4:	e9c4 0100 	strd	r0, r1, [r4]
 800c2b8:	e013      	b.n	800c2e2 <__ieee754_rem_pio2+0x1ba>
 800c2ba:	463b      	mov	r3, r7
 800c2bc:	4632      	mov	r2, r6
 800c2be:	4640      	mov	r0, r8
 800c2c0:	4649      	mov	r1, r9
 800c2c2:	f7f3 ffb5 	bl	8000230 <__aeabi_dsub>
 800c2c6:	ea4f 532a 	mov.w	r3, sl, asr #20
 800c2ca:	9305      	str	r3, [sp, #20]
 800c2cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c2d0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800c2d4:	f1ba 0f10 	cmp.w	sl, #16
 800c2d8:	dc1f      	bgt.n	800c31a <__ieee754_rem_pio2+0x1f2>
 800c2da:	4602      	mov	r2, r0
 800c2dc:	460b      	mov	r3, r1
 800c2de:	e9c4 2300 	strd	r2, r3, [r4]
 800c2e2:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800c2e6:	4640      	mov	r0, r8
 800c2e8:	4653      	mov	r3, sl
 800c2ea:	4649      	mov	r1, r9
 800c2ec:	f7f3 ffa0 	bl	8000230 <__aeabi_dsub>
 800c2f0:	4632      	mov	r2, r6
 800c2f2:	463b      	mov	r3, r7
 800c2f4:	f7f3 ff9c 	bl	8000230 <__aeabi_dsub>
 800c2f8:	460b      	mov	r3, r1
 800c2fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c2fe:	9904      	ldr	r1, [sp, #16]
 800c300:	4602      	mov	r2, r0
 800c302:	2900      	cmp	r1, #0
 800c304:	f6bf af47 	bge.w	800c196 <__ieee754_rem_pio2+0x6e>
 800c308:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800c30c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800c310:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c314:	60e3      	str	r3, [r4, #12]
 800c316:	426d      	negs	r5, r5
 800c318:	e73d      	b.n	800c196 <__ieee754_rem_pio2+0x6e>
 800c31a:	a33f      	add	r3, pc, #252	; (adr r3, 800c418 <__ieee754_rem_pio2+0x2f0>)
 800c31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c320:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c324:	f7f4 f93c 	bl	80005a0 <__aeabi_dmul>
 800c328:	4606      	mov	r6, r0
 800c32a:	460f      	mov	r7, r1
 800c32c:	4602      	mov	r2, r0
 800c32e:	460b      	mov	r3, r1
 800c330:	4640      	mov	r0, r8
 800c332:	4649      	mov	r1, r9
 800c334:	f7f3 ff7c 	bl	8000230 <__aeabi_dsub>
 800c338:	4602      	mov	r2, r0
 800c33a:	460b      	mov	r3, r1
 800c33c:	4682      	mov	sl, r0
 800c33e:	468b      	mov	fp, r1
 800c340:	4640      	mov	r0, r8
 800c342:	4649      	mov	r1, r9
 800c344:	f7f3 ff74 	bl	8000230 <__aeabi_dsub>
 800c348:	4632      	mov	r2, r6
 800c34a:	463b      	mov	r3, r7
 800c34c:	f7f3 ff70 	bl	8000230 <__aeabi_dsub>
 800c350:	a333      	add	r3, pc, #204	; (adr r3, 800c420 <__ieee754_rem_pio2+0x2f8>)
 800c352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c356:	4606      	mov	r6, r0
 800c358:	460f      	mov	r7, r1
 800c35a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c35e:	f7f4 f91f 	bl	80005a0 <__aeabi_dmul>
 800c362:	4632      	mov	r2, r6
 800c364:	463b      	mov	r3, r7
 800c366:	f7f3 ff63 	bl	8000230 <__aeabi_dsub>
 800c36a:	4602      	mov	r2, r0
 800c36c:	460b      	mov	r3, r1
 800c36e:	4606      	mov	r6, r0
 800c370:	460f      	mov	r7, r1
 800c372:	4650      	mov	r0, sl
 800c374:	4659      	mov	r1, fp
 800c376:	f7f3 ff5b 	bl	8000230 <__aeabi_dsub>
 800c37a:	9a05      	ldr	r2, [sp, #20]
 800c37c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c380:	1ad3      	subs	r3, r2, r3
 800c382:	2b31      	cmp	r3, #49	; 0x31
 800c384:	dc06      	bgt.n	800c394 <__ieee754_rem_pio2+0x26c>
 800c386:	4602      	mov	r2, r0
 800c388:	460b      	mov	r3, r1
 800c38a:	46d0      	mov	r8, sl
 800c38c:	46d9      	mov	r9, fp
 800c38e:	e9c4 2300 	strd	r2, r3, [r4]
 800c392:	e7a6      	b.n	800c2e2 <__ieee754_rem_pio2+0x1ba>
 800c394:	a326      	add	r3, pc, #152	; (adr r3, 800c430 <__ieee754_rem_pio2+0x308>)
 800c396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c39e:	f7f4 f8ff 	bl	80005a0 <__aeabi_dmul>
 800c3a2:	4606      	mov	r6, r0
 800c3a4:	460f      	mov	r7, r1
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	4650      	mov	r0, sl
 800c3ac:	4659      	mov	r1, fp
 800c3ae:	f7f3 ff3f 	bl	8000230 <__aeabi_dsub>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	4680      	mov	r8, r0
 800c3b8:	4689      	mov	r9, r1
 800c3ba:	4650      	mov	r0, sl
 800c3bc:	4659      	mov	r1, fp
 800c3be:	f7f3 ff37 	bl	8000230 <__aeabi_dsub>
 800c3c2:	4632      	mov	r2, r6
 800c3c4:	463b      	mov	r3, r7
 800c3c6:	f7f3 ff33 	bl	8000230 <__aeabi_dsub>
 800c3ca:	a31b      	add	r3, pc, #108	; (adr r3, 800c438 <__ieee754_rem_pio2+0x310>)
 800c3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d0:	4606      	mov	r6, r0
 800c3d2:	460f      	mov	r7, r1
 800c3d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3d8:	f7f4 f8e2 	bl	80005a0 <__aeabi_dmul>
 800c3dc:	4632      	mov	r2, r6
 800c3de:	463b      	mov	r3, r7
 800c3e0:	f7f3 ff26 	bl	8000230 <__aeabi_dsub>
 800c3e4:	4606      	mov	r6, r0
 800c3e6:	460f      	mov	r7, r1
 800c3e8:	e75e      	b.n	800c2a8 <__ieee754_rem_pio2+0x180>
 800c3ea:	4a1b      	ldr	r2, [pc, #108]	; (800c458 <__ieee754_rem_pio2+0x330>)
 800c3ec:	4592      	cmp	sl, r2
 800c3ee:	dd35      	ble.n	800c45c <__ieee754_rem_pio2+0x334>
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	460b      	mov	r3, r1
 800c3f4:	f7f3 ff1c 	bl	8000230 <__aeabi_dsub>
 800c3f8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c3fc:	e9c4 0100 	strd	r0, r1, [r4]
 800c400:	e6a2      	b.n	800c148 <__ieee754_rem_pio2+0x20>
 800c402:	bf00      	nop
 800c404:	f3af 8000 	nop.w
 800c408:	54400000 	.word	0x54400000
 800c40c:	3ff921fb 	.word	0x3ff921fb
 800c410:	1a626331 	.word	0x1a626331
 800c414:	3dd0b461 	.word	0x3dd0b461
 800c418:	1a600000 	.word	0x1a600000
 800c41c:	3dd0b461 	.word	0x3dd0b461
 800c420:	2e037073 	.word	0x2e037073
 800c424:	3ba3198a 	.word	0x3ba3198a
 800c428:	6dc9c883 	.word	0x6dc9c883
 800c42c:	3fe45f30 	.word	0x3fe45f30
 800c430:	2e000000 	.word	0x2e000000
 800c434:	3ba3198a 	.word	0x3ba3198a
 800c438:	252049c1 	.word	0x252049c1
 800c43c:	397b839a 	.word	0x397b839a
 800c440:	3fe921fb 	.word	0x3fe921fb
 800c444:	4002d97b 	.word	0x4002d97b
 800c448:	3ff921fb 	.word	0x3ff921fb
 800c44c:	413921fb 	.word	0x413921fb
 800c450:	3fe00000 	.word	0x3fe00000
 800c454:	0800d878 	.word	0x0800d878
 800c458:	7fefffff 	.word	0x7fefffff
 800c45c:	ea4f 552a 	mov.w	r5, sl, asr #20
 800c460:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800c464:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800c468:	460f      	mov	r7, r1
 800c46a:	4606      	mov	r6, r0
 800c46c:	f7f4 fb32 	bl	8000ad4 <__aeabi_d2iz>
 800c470:	f7f4 f82c 	bl	80004cc <__aeabi_i2d>
 800c474:	4602      	mov	r2, r0
 800c476:	460b      	mov	r3, r1
 800c478:	4630      	mov	r0, r6
 800c47a:	4639      	mov	r1, r7
 800c47c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c480:	f7f3 fed6 	bl	8000230 <__aeabi_dsub>
 800c484:	2200      	movs	r2, #0
 800c486:	4b22      	ldr	r3, [pc, #136]	; (800c510 <__ieee754_rem_pio2+0x3e8>)
 800c488:	f7f4 f88a 	bl	80005a0 <__aeabi_dmul>
 800c48c:	460f      	mov	r7, r1
 800c48e:	4606      	mov	r6, r0
 800c490:	f7f4 fb20 	bl	8000ad4 <__aeabi_d2iz>
 800c494:	f7f4 f81a 	bl	80004cc <__aeabi_i2d>
 800c498:	4602      	mov	r2, r0
 800c49a:	460b      	mov	r3, r1
 800c49c:	4630      	mov	r0, r6
 800c49e:	4639      	mov	r1, r7
 800c4a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c4a4:	f7f3 fec4 	bl	8000230 <__aeabi_dsub>
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	4b19      	ldr	r3, [pc, #100]	; (800c510 <__ieee754_rem_pio2+0x3e8>)
 800c4ac:	f7f4 f878 	bl	80005a0 <__aeabi_dmul>
 800c4b0:	f04f 0803 	mov.w	r8, #3
 800c4b4:	2600      	movs	r6, #0
 800c4b6:	2700      	movs	r7, #0
 800c4b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c4bc:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800c4c0:	4632      	mov	r2, r6
 800c4c2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800c4c6:	463b      	mov	r3, r7
 800c4c8:	46c2      	mov	sl, r8
 800c4ca:	f108 38ff 	add.w	r8, r8, #4294967295
 800c4ce:	f7f4 facf 	bl	8000a70 <__aeabi_dcmpeq>
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	d1f4      	bne.n	800c4c0 <__ieee754_rem_pio2+0x398>
 800c4d6:	4b0f      	ldr	r3, [pc, #60]	; (800c514 <__ieee754_rem_pio2+0x3ec>)
 800c4d8:	462a      	mov	r2, r5
 800c4da:	9301      	str	r3, [sp, #4]
 800c4dc:	2302      	movs	r3, #2
 800c4de:	4621      	mov	r1, r4
 800c4e0:	9300      	str	r3, [sp, #0]
 800c4e2:	a806      	add	r0, sp, #24
 800c4e4:	4653      	mov	r3, sl
 800c4e6:	f000 f8d5 	bl	800c694 <__kernel_rem_pio2>
 800c4ea:	9b04      	ldr	r3, [sp, #16]
 800c4ec:	4605      	mov	r5, r0
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	f6bf ae51 	bge.w	800c196 <__ieee754_rem_pio2+0x6e>
 800c4f4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c4f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c4fc:	e9c4 2300 	strd	r2, r3, [r4]
 800c500:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c504:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c508:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c50c:	e703      	b.n	800c316 <__ieee754_rem_pio2+0x1ee>
 800c50e:	bf00      	nop
 800c510:	41700000 	.word	0x41700000
 800c514:	0800d8f8 	.word	0x0800d8f8

0800c518 <__kernel_cos>:
 800c518:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c51c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c520:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c524:	4680      	mov	r8, r0
 800c526:	460f      	mov	r7, r1
 800c528:	e9cd 2300 	strd	r2, r3, [sp]
 800c52c:	da04      	bge.n	800c538 <__kernel_cos+0x20>
 800c52e:	f7f4 fad1 	bl	8000ad4 <__aeabi_d2iz>
 800c532:	2800      	cmp	r0, #0
 800c534:	f000 8086 	beq.w	800c644 <__kernel_cos+0x12c>
 800c538:	4642      	mov	r2, r8
 800c53a:	463b      	mov	r3, r7
 800c53c:	4640      	mov	r0, r8
 800c53e:	4639      	mov	r1, r7
 800c540:	f7f4 f82e 	bl	80005a0 <__aeabi_dmul>
 800c544:	2200      	movs	r2, #0
 800c546:	4b4e      	ldr	r3, [pc, #312]	; (800c680 <__kernel_cos+0x168>)
 800c548:	4604      	mov	r4, r0
 800c54a:	460d      	mov	r5, r1
 800c54c:	f7f4 f828 	bl	80005a0 <__aeabi_dmul>
 800c550:	a33f      	add	r3, pc, #252	; (adr r3, 800c650 <__kernel_cos+0x138>)
 800c552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c556:	4682      	mov	sl, r0
 800c558:	468b      	mov	fp, r1
 800c55a:	4620      	mov	r0, r4
 800c55c:	4629      	mov	r1, r5
 800c55e:	f7f4 f81f 	bl	80005a0 <__aeabi_dmul>
 800c562:	a33d      	add	r3, pc, #244	; (adr r3, 800c658 <__kernel_cos+0x140>)
 800c564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c568:	f7f3 fe64 	bl	8000234 <__adddf3>
 800c56c:	4622      	mov	r2, r4
 800c56e:	462b      	mov	r3, r5
 800c570:	f7f4 f816 	bl	80005a0 <__aeabi_dmul>
 800c574:	a33a      	add	r3, pc, #232	; (adr r3, 800c660 <__kernel_cos+0x148>)
 800c576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57a:	f7f3 fe59 	bl	8000230 <__aeabi_dsub>
 800c57e:	4622      	mov	r2, r4
 800c580:	462b      	mov	r3, r5
 800c582:	f7f4 f80d 	bl	80005a0 <__aeabi_dmul>
 800c586:	a338      	add	r3, pc, #224	; (adr r3, 800c668 <__kernel_cos+0x150>)
 800c588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58c:	f7f3 fe52 	bl	8000234 <__adddf3>
 800c590:	4622      	mov	r2, r4
 800c592:	462b      	mov	r3, r5
 800c594:	f7f4 f804 	bl	80005a0 <__aeabi_dmul>
 800c598:	a335      	add	r3, pc, #212	; (adr r3, 800c670 <__kernel_cos+0x158>)
 800c59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59e:	f7f3 fe47 	bl	8000230 <__aeabi_dsub>
 800c5a2:	4622      	mov	r2, r4
 800c5a4:	462b      	mov	r3, r5
 800c5a6:	f7f3 fffb 	bl	80005a0 <__aeabi_dmul>
 800c5aa:	a333      	add	r3, pc, #204	; (adr r3, 800c678 <__kernel_cos+0x160>)
 800c5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b0:	f7f3 fe40 	bl	8000234 <__adddf3>
 800c5b4:	4622      	mov	r2, r4
 800c5b6:	462b      	mov	r3, r5
 800c5b8:	f7f3 fff2 	bl	80005a0 <__aeabi_dmul>
 800c5bc:	4622      	mov	r2, r4
 800c5be:	462b      	mov	r3, r5
 800c5c0:	f7f3 ffee 	bl	80005a0 <__aeabi_dmul>
 800c5c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5c8:	4604      	mov	r4, r0
 800c5ca:	460d      	mov	r5, r1
 800c5cc:	4640      	mov	r0, r8
 800c5ce:	4639      	mov	r1, r7
 800c5d0:	f7f3 ffe6 	bl	80005a0 <__aeabi_dmul>
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	4629      	mov	r1, r5
 800c5da:	4620      	mov	r0, r4
 800c5dc:	f7f3 fe28 	bl	8000230 <__aeabi_dsub>
 800c5e0:	4b28      	ldr	r3, [pc, #160]	; (800c684 <__kernel_cos+0x16c>)
 800c5e2:	4680      	mov	r8, r0
 800c5e4:	429e      	cmp	r6, r3
 800c5e6:	4689      	mov	r9, r1
 800c5e8:	dc0e      	bgt.n	800c608 <__kernel_cos+0xf0>
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	460b      	mov	r3, r1
 800c5ee:	4650      	mov	r0, sl
 800c5f0:	4659      	mov	r1, fp
 800c5f2:	f7f3 fe1d 	bl	8000230 <__aeabi_dsub>
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	2000      	movs	r0, #0
 800c5fa:	460b      	mov	r3, r1
 800c5fc:	4922      	ldr	r1, [pc, #136]	; (800c688 <__kernel_cos+0x170>)
 800c5fe:	f7f3 fe17 	bl	8000230 <__aeabi_dsub>
 800c602:	b003      	add	sp, #12
 800c604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c608:	2400      	movs	r4, #0
 800c60a:	4b20      	ldr	r3, [pc, #128]	; (800c68c <__kernel_cos+0x174>)
 800c60c:	4622      	mov	r2, r4
 800c60e:	429e      	cmp	r6, r3
 800c610:	bfcc      	ite	gt
 800c612:	4d1f      	ldrgt	r5, [pc, #124]	; (800c690 <__kernel_cos+0x178>)
 800c614:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800c618:	462b      	mov	r3, r5
 800c61a:	2000      	movs	r0, #0
 800c61c:	491a      	ldr	r1, [pc, #104]	; (800c688 <__kernel_cos+0x170>)
 800c61e:	f7f3 fe07 	bl	8000230 <__aeabi_dsub>
 800c622:	4622      	mov	r2, r4
 800c624:	4606      	mov	r6, r0
 800c626:	460f      	mov	r7, r1
 800c628:	462b      	mov	r3, r5
 800c62a:	4650      	mov	r0, sl
 800c62c:	4659      	mov	r1, fp
 800c62e:	f7f3 fdff 	bl	8000230 <__aeabi_dsub>
 800c632:	4642      	mov	r2, r8
 800c634:	464b      	mov	r3, r9
 800c636:	f7f3 fdfb 	bl	8000230 <__aeabi_dsub>
 800c63a:	4602      	mov	r2, r0
 800c63c:	460b      	mov	r3, r1
 800c63e:	4630      	mov	r0, r6
 800c640:	4639      	mov	r1, r7
 800c642:	e7dc      	b.n	800c5fe <__kernel_cos+0xe6>
 800c644:	2000      	movs	r0, #0
 800c646:	4910      	ldr	r1, [pc, #64]	; (800c688 <__kernel_cos+0x170>)
 800c648:	e7db      	b.n	800c602 <__kernel_cos+0xea>
 800c64a:	bf00      	nop
 800c64c:	f3af 8000 	nop.w
 800c650:	be8838d4 	.word	0xbe8838d4
 800c654:	bda8fae9 	.word	0xbda8fae9
 800c658:	bdb4b1c4 	.word	0xbdb4b1c4
 800c65c:	3e21ee9e 	.word	0x3e21ee9e
 800c660:	809c52ad 	.word	0x809c52ad
 800c664:	3e927e4f 	.word	0x3e927e4f
 800c668:	19cb1590 	.word	0x19cb1590
 800c66c:	3efa01a0 	.word	0x3efa01a0
 800c670:	16c15177 	.word	0x16c15177
 800c674:	3f56c16c 	.word	0x3f56c16c
 800c678:	5555554c 	.word	0x5555554c
 800c67c:	3fa55555 	.word	0x3fa55555
 800c680:	3fe00000 	.word	0x3fe00000
 800c684:	3fd33332 	.word	0x3fd33332
 800c688:	3ff00000 	.word	0x3ff00000
 800c68c:	3fe90000 	.word	0x3fe90000
 800c690:	3fd20000 	.word	0x3fd20000

0800c694 <__kernel_rem_pio2>:
 800c694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c698:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c69c:	9308      	str	r3, [sp, #32]
 800c69e:	9106      	str	r1, [sp, #24]
 800c6a0:	4bb6      	ldr	r3, [pc, #728]	; (800c97c <__kernel_rem_pio2+0x2e8>)
 800c6a2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800c6a4:	f112 0f14 	cmn.w	r2, #20
 800c6a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c6ac:	bfa8      	it	ge
 800c6ae:	1ed4      	subge	r4, r2, #3
 800c6b0:	9302      	str	r3, [sp, #8]
 800c6b2:	9b08      	ldr	r3, [sp, #32]
 800c6b4:	bfb8      	it	lt
 800c6b6:	2400      	movlt	r4, #0
 800c6b8:	f103 33ff 	add.w	r3, r3, #4294967295
 800c6bc:	9307      	str	r3, [sp, #28]
 800c6be:	bfa4      	itt	ge
 800c6c0:	2318      	movge	r3, #24
 800c6c2:	fb94 f4f3 	sdivge	r4, r4, r3
 800c6c6:	f06f 0317 	mvn.w	r3, #23
 800c6ca:	fb04 3303 	mla	r3, r4, r3, r3
 800c6ce:	eb03 0b02 	add.w	fp, r3, r2
 800c6d2:	9a07      	ldr	r2, [sp, #28]
 800c6d4:	9b02      	ldr	r3, [sp, #8]
 800c6d6:	1aa7      	subs	r7, r4, r2
 800c6d8:	eb03 0802 	add.w	r8, r3, r2
 800c6dc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c6de:	2500      	movs	r5, #0
 800c6e0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	9009      	str	r0, [sp, #36]	; 0x24
 800c6ea:	ae20      	add	r6, sp, #128	; 0x80
 800c6ec:	4545      	cmp	r5, r8
 800c6ee:	dd14      	ble.n	800c71a <__kernel_rem_pio2+0x86>
 800c6f0:	f04f 0800 	mov.w	r8, #0
 800c6f4:	9a08      	ldr	r2, [sp, #32]
 800c6f6:	ab20      	add	r3, sp, #128	; 0x80
 800c6f8:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800c6fc:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800c700:	9b02      	ldr	r3, [sp, #8]
 800c702:	4598      	cmp	r8, r3
 800c704:	dc35      	bgt.n	800c772 <__kernel_rem_pio2+0xde>
 800c706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c708:	2200      	movs	r2, #0
 800c70a:	f1a3 0908 	sub.w	r9, r3, #8
 800c70e:	2300      	movs	r3, #0
 800c710:	462f      	mov	r7, r5
 800c712:	2600      	movs	r6, #0
 800c714:	e9cd 2300 	strd	r2, r3, [sp]
 800c718:	e01f      	b.n	800c75a <__kernel_rem_pio2+0xc6>
 800c71a:	42ef      	cmn	r7, r5
 800c71c:	d40b      	bmi.n	800c736 <__kernel_rem_pio2+0xa2>
 800c71e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c722:	e9cd 2300 	strd	r2, r3, [sp]
 800c726:	f7f3 fed1 	bl	80004cc <__aeabi_i2d>
 800c72a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c72e:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c732:	3501      	adds	r5, #1
 800c734:	e7da      	b.n	800c6ec <__kernel_rem_pio2+0x58>
 800c736:	4610      	mov	r0, r2
 800c738:	4619      	mov	r1, r3
 800c73a:	e7f8      	b.n	800c72e <__kernel_rem_pio2+0x9a>
 800c73c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c740:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800c744:	f7f3 ff2c 	bl	80005a0 <__aeabi_dmul>
 800c748:	4602      	mov	r2, r0
 800c74a:	460b      	mov	r3, r1
 800c74c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c750:	f7f3 fd70 	bl	8000234 <__adddf3>
 800c754:	e9cd 0100 	strd	r0, r1, [sp]
 800c758:	3601      	adds	r6, #1
 800c75a:	9b07      	ldr	r3, [sp, #28]
 800c75c:	3f08      	subs	r7, #8
 800c75e:	429e      	cmp	r6, r3
 800c760:	ddec      	ble.n	800c73c <__kernel_rem_pio2+0xa8>
 800c762:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c766:	f108 0801 	add.w	r8, r8, #1
 800c76a:	e8ea 2302 	strd	r2, r3, [sl], #8
 800c76e:	3508      	adds	r5, #8
 800c770:	e7c6      	b.n	800c700 <__kernel_rem_pio2+0x6c>
 800c772:	9b02      	ldr	r3, [sp, #8]
 800c774:	aa0c      	add	r2, sp, #48	; 0x30
 800c776:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c77a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c77c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c77e:	9e02      	ldr	r6, [sp, #8]
 800c780:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c784:	930a      	str	r3, [sp, #40]	; 0x28
 800c786:	ab98      	add	r3, sp, #608	; 0x260
 800c788:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c78c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800c790:	ab70      	add	r3, sp, #448	; 0x1c0
 800c792:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800c796:	46d0      	mov	r8, sl
 800c798:	46b1      	mov	r9, r6
 800c79a:	af0c      	add	r7, sp, #48	; 0x30
 800c79c:	9700      	str	r7, [sp, #0]
 800c79e:	f1b9 0f00 	cmp.w	r9, #0
 800c7a2:	f1a8 0808 	sub.w	r8, r8, #8
 800c7a6:	dc71      	bgt.n	800c88c <__kernel_rem_pio2+0x1f8>
 800c7a8:	465a      	mov	r2, fp
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	4629      	mov	r1, r5
 800c7ae:	f000 fbeb 	bl	800cf88 <scalbn>
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c7b8:	4604      	mov	r4, r0
 800c7ba:	460d      	mov	r5, r1
 800c7bc:	f7f3 fef0 	bl	80005a0 <__aeabi_dmul>
 800c7c0:	f000 fb62 	bl	800ce88 <floor>
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	4b6e      	ldr	r3, [pc, #440]	; (800c980 <__kernel_rem_pio2+0x2ec>)
 800c7c8:	f7f3 feea 	bl	80005a0 <__aeabi_dmul>
 800c7cc:	4602      	mov	r2, r0
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	4629      	mov	r1, r5
 800c7d4:	f7f3 fd2c 	bl	8000230 <__aeabi_dsub>
 800c7d8:	460d      	mov	r5, r1
 800c7da:	4604      	mov	r4, r0
 800c7dc:	f7f4 f97a 	bl	8000ad4 <__aeabi_d2iz>
 800c7e0:	9004      	str	r0, [sp, #16]
 800c7e2:	f7f3 fe73 	bl	80004cc <__aeabi_i2d>
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	4629      	mov	r1, r5
 800c7ee:	f7f3 fd1f 	bl	8000230 <__aeabi_dsub>
 800c7f2:	f1bb 0f00 	cmp.w	fp, #0
 800c7f6:	4680      	mov	r8, r0
 800c7f8:	4689      	mov	r9, r1
 800c7fa:	dd70      	ble.n	800c8de <__kernel_rem_pio2+0x24a>
 800c7fc:	1e72      	subs	r2, r6, #1
 800c7fe:	ab0c      	add	r3, sp, #48	; 0x30
 800c800:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c804:	9c04      	ldr	r4, [sp, #16]
 800c806:	f1cb 0118 	rsb	r1, fp, #24
 800c80a:	fa40 f301 	asr.w	r3, r0, r1
 800c80e:	441c      	add	r4, r3
 800c810:	408b      	lsls	r3, r1
 800c812:	1ac0      	subs	r0, r0, r3
 800c814:	ab0c      	add	r3, sp, #48	; 0x30
 800c816:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c81a:	f1cb 0317 	rsb	r3, fp, #23
 800c81e:	9404      	str	r4, [sp, #16]
 800c820:	fa40 f303 	asr.w	r3, r0, r3
 800c824:	9300      	str	r3, [sp, #0]
 800c826:	9b00      	ldr	r3, [sp, #0]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	dd66      	ble.n	800c8fa <__kernel_rem_pio2+0x266>
 800c82c:	2200      	movs	r2, #0
 800c82e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c832:	4614      	mov	r4, r2
 800c834:	9b04      	ldr	r3, [sp, #16]
 800c836:	3301      	adds	r3, #1
 800c838:	9304      	str	r3, [sp, #16]
 800c83a:	4296      	cmp	r6, r2
 800c83c:	f300 80ac 	bgt.w	800c998 <__kernel_rem_pio2+0x304>
 800c840:	f1bb 0f00 	cmp.w	fp, #0
 800c844:	dd07      	ble.n	800c856 <__kernel_rem_pio2+0x1c2>
 800c846:	f1bb 0f01 	cmp.w	fp, #1
 800c84a:	f000 80b4 	beq.w	800c9b6 <__kernel_rem_pio2+0x322>
 800c84e:	f1bb 0f02 	cmp.w	fp, #2
 800c852:	f000 80ba 	beq.w	800c9ca <__kernel_rem_pio2+0x336>
 800c856:	9b00      	ldr	r3, [sp, #0]
 800c858:	2b02      	cmp	r3, #2
 800c85a:	d14e      	bne.n	800c8fa <__kernel_rem_pio2+0x266>
 800c85c:	4642      	mov	r2, r8
 800c85e:	464b      	mov	r3, r9
 800c860:	2000      	movs	r0, #0
 800c862:	4948      	ldr	r1, [pc, #288]	; (800c984 <__kernel_rem_pio2+0x2f0>)
 800c864:	f7f3 fce4 	bl	8000230 <__aeabi_dsub>
 800c868:	4680      	mov	r8, r0
 800c86a:	4689      	mov	r9, r1
 800c86c:	2c00      	cmp	r4, #0
 800c86e:	d044      	beq.n	800c8fa <__kernel_rem_pio2+0x266>
 800c870:	465a      	mov	r2, fp
 800c872:	2000      	movs	r0, #0
 800c874:	4943      	ldr	r1, [pc, #268]	; (800c984 <__kernel_rem_pio2+0x2f0>)
 800c876:	f000 fb87 	bl	800cf88 <scalbn>
 800c87a:	4602      	mov	r2, r0
 800c87c:	460b      	mov	r3, r1
 800c87e:	4640      	mov	r0, r8
 800c880:	4649      	mov	r1, r9
 800c882:	f7f3 fcd5 	bl	8000230 <__aeabi_dsub>
 800c886:	4680      	mov	r8, r0
 800c888:	4689      	mov	r9, r1
 800c88a:	e036      	b.n	800c8fa <__kernel_rem_pio2+0x266>
 800c88c:	2200      	movs	r2, #0
 800c88e:	4b3e      	ldr	r3, [pc, #248]	; (800c988 <__kernel_rem_pio2+0x2f4>)
 800c890:	4620      	mov	r0, r4
 800c892:	4629      	mov	r1, r5
 800c894:	f7f3 fe84 	bl	80005a0 <__aeabi_dmul>
 800c898:	f7f4 f91c 	bl	8000ad4 <__aeabi_d2iz>
 800c89c:	f7f3 fe16 	bl	80004cc <__aeabi_i2d>
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	460b      	mov	r3, r1
 800c8a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	4b38      	ldr	r3, [pc, #224]	; (800c98c <__kernel_rem_pio2+0x2f8>)
 800c8ac:	f7f3 fe78 	bl	80005a0 <__aeabi_dmul>
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	460b      	mov	r3, r1
 800c8b4:	4620      	mov	r0, r4
 800c8b6:	4629      	mov	r1, r5
 800c8b8:	f7f3 fcba 	bl	8000230 <__aeabi_dsub>
 800c8bc:	f7f4 f90a 	bl	8000ad4 <__aeabi_d2iz>
 800c8c0:	9b00      	ldr	r3, [sp, #0]
 800c8c2:	f109 39ff 	add.w	r9, r9, #4294967295
 800c8c6:	f843 0b04 	str.w	r0, [r3], #4
 800c8ca:	9300      	str	r3, [sp, #0]
 800c8cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8d0:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c8d4:	f7f3 fcae 	bl	8000234 <__adddf3>
 800c8d8:	4604      	mov	r4, r0
 800c8da:	460d      	mov	r5, r1
 800c8dc:	e75f      	b.n	800c79e <__kernel_rem_pio2+0x10a>
 800c8de:	d105      	bne.n	800c8ec <__kernel_rem_pio2+0x258>
 800c8e0:	1e73      	subs	r3, r6, #1
 800c8e2:	aa0c      	add	r2, sp, #48	; 0x30
 800c8e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c8e8:	15c3      	asrs	r3, r0, #23
 800c8ea:	e79b      	b.n	800c824 <__kernel_rem_pio2+0x190>
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	4b28      	ldr	r3, [pc, #160]	; (800c990 <__kernel_rem_pio2+0x2fc>)
 800c8f0:	f7f4 f8dc 	bl	8000aac <__aeabi_dcmpge>
 800c8f4:	2800      	cmp	r0, #0
 800c8f6:	d13e      	bne.n	800c976 <__kernel_rem_pio2+0x2e2>
 800c8f8:	9000      	str	r0, [sp, #0]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	4640      	mov	r0, r8
 800c900:	4649      	mov	r1, r9
 800c902:	f7f4 f8b5 	bl	8000a70 <__aeabi_dcmpeq>
 800c906:	2800      	cmp	r0, #0
 800c908:	f000 80b1 	beq.w	800ca6e <__kernel_rem_pio2+0x3da>
 800c90c:	1e74      	subs	r4, r6, #1
 800c90e:	4623      	mov	r3, r4
 800c910:	2200      	movs	r2, #0
 800c912:	9902      	ldr	r1, [sp, #8]
 800c914:	428b      	cmp	r3, r1
 800c916:	da5f      	bge.n	800c9d8 <__kernel_rem_pio2+0x344>
 800c918:	2a00      	cmp	r2, #0
 800c91a:	d074      	beq.n	800ca06 <__kernel_rem_pio2+0x372>
 800c91c:	ab0c      	add	r3, sp, #48	; 0x30
 800c91e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c922:	f1ab 0b18 	sub.w	fp, fp, #24
 800c926:	2b00      	cmp	r3, #0
 800c928:	f000 809f 	beq.w	800ca6a <__kernel_rem_pio2+0x3d6>
 800c92c:	465a      	mov	r2, fp
 800c92e:	2000      	movs	r0, #0
 800c930:	4914      	ldr	r1, [pc, #80]	; (800c984 <__kernel_rem_pio2+0x2f0>)
 800c932:	f000 fb29 	bl	800cf88 <scalbn>
 800c936:	46a2      	mov	sl, r4
 800c938:	4606      	mov	r6, r0
 800c93a:	460f      	mov	r7, r1
 800c93c:	f04f 0800 	mov.w	r8, #0
 800c940:	ab70      	add	r3, sp, #448	; 0x1c0
 800c942:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800c988 <__kernel_rem_pio2+0x2f4>
 800c946:	00e5      	lsls	r5, r4, #3
 800c948:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800c94c:	f1ba 0f00 	cmp.w	sl, #0
 800c950:	f280 80c3 	bge.w	800cada <__kernel_rem_pio2+0x446>
 800c954:	4626      	mov	r6, r4
 800c956:	2e00      	cmp	r6, #0
 800c958:	f2c0 80f5 	blt.w	800cb46 <__kernel_rem_pio2+0x4b2>
 800c95c:	4b0d      	ldr	r3, [pc, #52]	; (800c994 <__kernel_rem_pio2+0x300>)
 800c95e:	f04f 0a00 	mov.w	sl, #0
 800c962:	9307      	str	r3, [sp, #28]
 800c964:	ab70      	add	r3, sp, #448	; 0x1c0
 800c966:	f04f 0b00 	mov.w	fp, #0
 800c96a:	f04f 0800 	mov.w	r8, #0
 800c96e:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800c972:	1ba7      	subs	r7, r4, r6
 800c974:	e0db      	b.n	800cb2e <__kernel_rem_pio2+0x49a>
 800c976:	2302      	movs	r3, #2
 800c978:	9300      	str	r3, [sp, #0]
 800c97a:	e757      	b.n	800c82c <__kernel_rem_pio2+0x198>
 800c97c:	0800da40 	.word	0x0800da40
 800c980:	40200000 	.word	0x40200000
 800c984:	3ff00000 	.word	0x3ff00000
 800c988:	3e700000 	.word	0x3e700000
 800c98c:	41700000 	.word	0x41700000
 800c990:	3fe00000 	.word	0x3fe00000
 800c994:	0800da00 	.word	0x0800da00
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	b944      	cbnz	r4, 800c9ae <__kernel_rem_pio2+0x31a>
 800c99c:	b11b      	cbz	r3, 800c9a6 <__kernel_rem_pio2+0x312>
 800c99e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c9a2:	603b      	str	r3, [r7, #0]
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	461c      	mov	r4, r3
 800c9a8:	3201      	adds	r2, #1
 800c9aa:	3704      	adds	r7, #4
 800c9ac:	e745      	b.n	800c83a <__kernel_rem_pio2+0x1a6>
 800c9ae:	1acb      	subs	r3, r1, r3
 800c9b0:	603b      	str	r3, [r7, #0]
 800c9b2:	4623      	mov	r3, r4
 800c9b4:	e7f7      	b.n	800c9a6 <__kernel_rem_pio2+0x312>
 800c9b6:	1e72      	subs	r2, r6, #1
 800c9b8:	ab0c      	add	r3, sp, #48	; 0x30
 800c9ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9be:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c9c2:	a90c      	add	r1, sp, #48	; 0x30
 800c9c4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c9c8:	e745      	b.n	800c856 <__kernel_rem_pio2+0x1c2>
 800c9ca:	1e72      	subs	r2, r6, #1
 800c9cc:	ab0c      	add	r3, sp, #48	; 0x30
 800c9ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9d2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c9d6:	e7f4      	b.n	800c9c2 <__kernel_rem_pio2+0x32e>
 800c9d8:	a90c      	add	r1, sp, #48	; 0x30
 800c9da:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c9de:	3b01      	subs	r3, #1
 800c9e0:	430a      	orrs	r2, r1
 800c9e2:	e796      	b.n	800c912 <__kernel_rem_pio2+0x27e>
 800c9e4:	3401      	adds	r4, #1
 800c9e6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c9ea:	2a00      	cmp	r2, #0
 800c9ec:	d0fa      	beq.n	800c9e4 <__kernel_rem_pio2+0x350>
 800c9ee:	9b08      	ldr	r3, [sp, #32]
 800c9f0:	f106 0801 	add.w	r8, r6, #1
 800c9f4:	18f5      	adds	r5, r6, r3
 800c9f6:	ab20      	add	r3, sp, #128	; 0x80
 800c9f8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c9fc:	4434      	add	r4, r6
 800c9fe:	4544      	cmp	r4, r8
 800ca00:	da04      	bge.n	800ca0c <__kernel_rem_pio2+0x378>
 800ca02:	4626      	mov	r6, r4
 800ca04:	e6bf      	b.n	800c786 <__kernel_rem_pio2+0xf2>
 800ca06:	2401      	movs	r4, #1
 800ca08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca0a:	e7ec      	b.n	800c9e6 <__kernel_rem_pio2+0x352>
 800ca0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca0e:	f04f 0900 	mov.w	r9, #0
 800ca12:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ca16:	f7f3 fd59 	bl	80004cc <__aeabi_i2d>
 800ca1a:	2600      	movs	r6, #0
 800ca1c:	2700      	movs	r7, #0
 800ca1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca20:	e9c5 0100 	strd	r0, r1, [r5]
 800ca24:	3b08      	subs	r3, #8
 800ca26:	9300      	str	r3, [sp, #0]
 800ca28:	9504      	str	r5, [sp, #16]
 800ca2a:	9b07      	ldr	r3, [sp, #28]
 800ca2c:	4599      	cmp	r9, r3
 800ca2e:	dd05      	ble.n	800ca3c <__kernel_rem_pio2+0x3a8>
 800ca30:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800ca34:	f108 0801 	add.w	r8, r8, #1
 800ca38:	3508      	adds	r5, #8
 800ca3a:	e7e0      	b.n	800c9fe <__kernel_rem_pio2+0x36a>
 800ca3c:	f8dd c010 	ldr.w	ip, [sp, #16]
 800ca40:	9900      	ldr	r1, [sp, #0]
 800ca42:	f109 0901 	add.w	r9, r9, #1
 800ca46:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800ca4a:	9100      	str	r1, [sp, #0]
 800ca4c:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800ca50:	f8cd c010 	str.w	ip, [sp, #16]
 800ca54:	f7f3 fda4 	bl	80005a0 <__aeabi_dmul>
 800ca58:	4602      	mov	r2, r0
 800ca5a:	460b      	mov	r3, r1
 800ca5c:	4630      	mov	r0, r6
 800ca5e:	4639      	mov	r1, r7
 800ca60:	f7f3 fbe8 	bl	8000234 <__adddf3>
 800ca64:	4606      	mov	r6, r0
 800ca66:	460f      	mov	r7, r1
 800ca68:	e7df      	b.n	800ca2a <__kernel_rem_pio2+0x396>
 800ca6a:	3c01      	subs	r4, #1
 800ca6c:	e756      	b.n	800c91c <__kernel_rem_pio2+0x288>
 800ca6e:	f1cb 0200 	rsb	r2, fp, #0
 800ca72:	4640      	mov	r0, r8
 800ca74:	4649      	mov	r1, r9
 800ca76:	f000 fa87 	bl	800cf88 <scalbn>
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	4ba4      	ldr	r3, [pc, #656]	; (800cd10 <__kernel_rem_pio2+0x67c>)
 800ca7e:	4604      	mov	r4, r0
 800ca80:	460d      	mov	r5, r1
 800ca82:	f7f4 f813 	bl	8000aac <__aeabi_dcmpge>
 800ca86:	b1f8      	cbz	r0, 800cac8 <__kernel_rem_pio2+0x434>
 800ca88:	2200      	movs	r2, #0
 800ca8a:	4ba2      	ldr	r3, [pc, #648]	; (800cd14 <__kernel_rem_pio2+0x680>)
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	4629      	mov	r1, r5
 800ca90:	f7f3 fd86 	bl	80005a0 <__aeabi_dmul>
 800ca94:	f7f4 f81e 	bl	8000ad4 <__aeabi_d2iz>
 800ca98:	4607      	mov	r7, r0
 800ca9a:	f7f3 fd17 	bl	80004cc <__aeabi_i2d>
 800ca9e:	2200      	movs	r2, #0
 800caa0:	4b9b      	ldr	r3, [pc, #620]	; (800cd10 <__kernel_rem_pio2+0x67c>)
 800caa2:	f7f3 fd7d 	bl	80005a0 <__aeabi_dmul>
 800caa6:	460b      	mov	r3, r1
 800caa8:	4602      	mov	r2, r0
 800caaa:	4629      	mov	r1, r5
 800caac:	4620      	mov	r0, r4
 800caae:	f7f3 fbbf 	bl	8000230 <__aeabi_dsub>
 800cab2:	f7f4 f80f 	bl	8000ad4 <__aeabi_d2iz>
 800cab6:	1c74      	adds	r4, r6, #1
 800cab8:	ab0c      	add	r3, sp, #48	; 0x30
 800caba:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800cabe:	f10b 0b18 	add.w	fp, fp, #24
 800cac2:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800cac6:	e731      	b.n	800c92c <__kernel_rem_pio2+0x298>
 800cac8:	4620      	mov	r0, r4
 800caca:	4629      	mov	r1, r5
 800cacc:	f7f4 f802 	bl	8000ad4 <__aeabi_d2iz>
 800cad0:	ab0c      	add	r3, sp, #48	; 0x30
 800cad2:	4634      	mov	r4, r6
 800cad4:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800cad8:	e728      	b.n	800c92c <__kernel_rem_pio2+0x298>
 800cada:	ab0c      	add	r3, sp, #48	; 0x30
 800cadc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800cae0:	f7f3 fcf4 	bl	80004cc <__aeabi_i2d>
 800cae4:	4632      	mov	r2, r6
 800cae6:	463b      	mov	r3, r7
 800cae8:	f7f3 fd5a 	bl	80005a0 <__aeabi_dmul>
 800caec:	4642      	mov	r2, r8
 800caee:	e86b 0102 	strd	r0, r1, [fp], #-8
 800caf2:	464b      	mov	r3, r9
 800caf4:	4630      	mov	r0, r6
 800caf6:	4639      	mov	r1, r7
 800caf8:	f7f3 fd52 	bl	80005a0 <__aeabi_dmul>
 800cafc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb00:	4606      	mov	r6, r0
 800cb02:	460f      	mov	r7, r1
 800cb04:	e722      	b.n	800c94c <__kernel_rem_pio2+0x2b8>
 800cb06:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800cb0a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800cb0e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800cb12:	f8cd c01c 	str.w	ip, [sp, #28]
 800cb16:	f7f3 fd43 	bl	80005a0 <__aeabi_dmul>
 800cb1a:	4602      	mov	r2, r0
 800cb1c:	460b      	mov	r3, r1
 800cb1e:	4650      	mov	r0, sl
 800cb20:	4659      	mov	r1, fp
 800cb22:	f7f3 fb87 	bl	8000234 <__adddf3>
 800cb26:	4682      	mov	sl, r0
 800cb28:	468b      	mov	fp, r1
 800cb2a:	f108 0801 	add.w	r8, r8, #1
 800cb2e:	9b02      	ldr	r3, [sp, #8]
 800cb30:	4598      	cmp	r8, r3
 800cb32:	dc01      	bgt.n	800cb38 <__kernel_rem_pio2+0x4a4>
 800cb34:	45b8      	cmp	r8, r7
 800cb36:	dde6      	ble.n	800cb06 <__kernel_rem_pio2+0x472>
 800cb38:	ab48      	add	r3, sp, #288	; 0x120
 800cb3a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800cb3e:	e9c7 ab00 	strd	sl, fp, [r7]
 800cb42:	3e01      	subs	r6, #1
 800cb44:	e707      	b.n	800c956 <__kernel_rem_pio2+0x2c2>
 800cb46:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800cb48:	2b02      	cmp	r3, #2
 800cb4a:	dc09      	bgt.n	800cb60 <__kernel_rem_pio2+0x4cc>
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	dc32      	bgt.n	800cbb6 <__kernel_rem_pio2+0x522>
 800cb50:	d05a      	beq.n	800cc08 <__kernel_rem_pio2+0x574>
 800cb52:	9b04      	ldr	r3, [sp, #16]
 800cb54:	f003 0007 	and.w	r0, r3, #7
 800cb58:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800cb5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb60:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800cb62:	2b03      	cmp	r3, #3
 800cb64:	d1f5      	bne.n	800cb52 <__kernel_rem_pio2+0x4be>
 800cb66:	ab48      	add	r3, sp, #288	; 0x120
 800cb68:	441d      	add	r5, r3
 800cb6a:	46aa      	mov	sl, r5
 800cb6c:	46a3      	mov	fp, r4
 800cb6e:	f1bb 0f00 	cmp.w	fp, #0
 800cb72:	dc76      	bgt.n	800cc62 <__kernel_rem_pio2+0x5ce>
 800cb74:	46aa      	mov	sl, r5
 800cb76:	46a3      	mov	fp, r4
 800cb78:	f1bb 0f01 	cmp.w	fp, #1
 800cb7c:	f300 8090 	bgt.w	800cca0 <__kernel_rem_pio2+0x60c>
 800cb80:	2700      	movs	r7, #0
 800cb82:	463e      	mov	r6, r7
 800cb84:	2c01      	cmp	r4, #1
 800cb86:	f300 80aa 	bgt.w	800ccde <__kernel_rem_pio2+0x64a>
 800cb8a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800cb8e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800cb92:	9b00      	ldr	r3, [sp, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	f040 80ac 	bne.w	800ccf2 <__kernel_rem_pio2+0x65e>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	462a      	mov	r2, r5
 800cb9e:	9806      	ldr	r0, [sp, #24]
 800cba0:	e9c0 2300 	strd	r2, r3, [r0]
 800cba4:	4622      	mov	r2, r4
 800cba6:	460b      	mov	r3, r1
 800cba8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cbac:	463a      	mov	r2, r7
 800cbae:	4633      	mov	r3, r6
 800cbb0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800cbb4:	e7cd      	b.n	800cb52 <__kernel_rem_pio2+0x4be>
 800cbb6:	2000      	movs	r0, #0
 800cbb8:	46a0      	mov	r8, r4
 800cbba:	4601      	mov	r1, r0
 800cbbc:	ab48      	add	r3, sp, #288	; 0x120
 800cbbe:	441d      	add	r5, r3
 800cbc0:	f1b8 0f00 	cmp.w	r8, #0
 800cbc4:	da3a      	bge.n	800cc3c <__kernel_rem_pio2+0x5a8>
 800cbc6:	9b00      	ldr	r3, [sp, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d03e      	beq.n	800cc4a <__kernel_rem_pio2+0x5b6>
 800cbcc:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	462b      	mov	r3, r5
 800cbd4:	9d06      	ldr	r5, [sp, #24]
 800cbd6:	2601      	movs	r6, #1
 800cbd8:	e9c5 2300 	strd	r2, r3, [r5]
 800cbdc:	460b      	mov	r3, r1
 800cbde:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800cbe2:	f7f3 fb25 	bl	8000230 <__aeabi_dsub>
 800cbe6:	4684      	mov	ip, r0
 800cbe8:	460f      	mov	r7, r1
 800cbea:	ad48      	add	r5, sp, #288	; 0x120
 800cbec:	42b4      	cmp	r4, r6
 800cbee:	f105 0508 	add.w	r5, r5, #8
 800cbf2:	da2c      	bge.n	800cc4e <__kernel_rem_pio2+0x5ba>
 800cbf4:	9b00      	ldr	r3, [sp, #0]
 800cbf6:	b10b      	cbz	r3, 800cbfc <__kernel_rem_pio2+0x568>
 800cbf8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800cbfc:	4662      	mov	r2, ip
 800cbfe:	463b      	mov	r3, r7
 800cc00:	9906      	ldr	r1, [sp, #24]
 800cc02:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800cc06:	e7a4      	b.n	800cb52 <__kernel_rem_pio2+0x4be>
 800cc08:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800cc0a:	ab48      	add	r3, sp, #288	; 0x120
 800cc0c:	4637      	mov	r7, r6
 800cc0e:	441d      	add	r5, r3
 800cc10:	2c00      	cmp	r4, #0
 800cc12:	da09      	bge.n	800cc28 <__kernel_rem_pio2+0x594>
 800cc14:	9b00      	ldr	r3, [sp, #0]
 800cc16:	b10b      	cbz	r3, 800cc1c <__kernel_rem_pio2+0x588>
 800cc18:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800cc1c:	4632      	mov	r2, r6
 800cc1e:	463b      	mov	r3, r7
 800cc20:	9906      	ldr	r1, [sp, #24]
 800cc22:	e9c1 2300 	strd	r2, r3, [r1]
 800cc26:	e794      	b.n	800cb52 <__kernel_rem_pio2+0x4be>
 800cc28:	4630      	mov	r0, r6
 800cc2a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800cc2e:	4639      	mov	r1, r7
 800cc30:	f7f3 fb00 	bl	8000234 <__adddf3>
 800cc34:	3c01      	subs	r4, #1
 800cc36:	4606      	mov	r6, r0
 800cc38:	460f      	mov	r7, r1
 800cc3a:	e7e9      	b.n	800cc10 <__kernel_rem_pio2+0x57c>
 800cc3c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800cc40:	f7f3 faf8 	bl	8000234 <__adddf3>
 800cc44:	f108 38ff 	add.w	r8, r8, #4294967295
 800cc48:	e7ba      	b.n	800cbc0 <__kernel_rem_pio2+0x52c>
 800cc4a:	460d      	mov	r5, r1
 800cc4c:	e7c0      	b.n	800cbd0 <__kernel_rem_pio2+0x53c>
 800cc4e:	4660      	mov	r0, ip
 800cc50:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cc54:	4639      	mov	r1, r7
 800cc56:	f7f3 faed 	bl	8000234 <__adddf3>
 800cc5a:	3601      	adds	r6, #1
 800cc5c:	4684      	mov	ip, r0
 800cc5e:	460f      	mov	r7, r1
 800cc60:	e7c4      	b.n	800cbec <__kernel_rem_pio2+0x558>
 800cc62:	e9da 6700 	ldrd	r6, r7, [sl]
 800cc66:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800cc6a:	4632      	mov	r2, r6
 800cc6c:	463b      	mov	r3, r7
 800cc6e:	4640      	mov	r0, r8
 800cc70:	4649      	mov	r1, r9
 800cc72:	f7f3 fadf 	bl	8000234 <__adddf3>
 800cc76:	4602      	mov	r2, r0
 800cc78:	460b      	mov	r3, r1
 800cc7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc7e:	4640      	mov	r0, r8
 800cc80:	4649      	mov	r1, r9
 800cc82:	f7f3 fad5 	bl	8000230 <__aeabi_dsub>
 800cc86:	4632      	mov	r2, r6
 800cc88:	463b      	mov	r3, r7
 800cc8a:	f7f3 fad3 	bl	8000234 <__adddf3>
 800cc8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc92:	e86a 0102 	strd	r0, r1, [sl], #-8
 800cc96:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cc9a:	e9ca 2300 	strd	r2, r3, [sl]
 800cc9e:	e766      	b.n	800cb6e <__kernel_rem_pio2+0x4da>
 800cca0:	e9da 8900 	ldrd	r8, r9, [sl]
 800cca4:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800cca8:	4642      	mov	r2, r8
 800ccaa:	464b      	mov	r3, r9
 800ccac:	4630      	mov	r0, r6
 800ccae:	4639      	mov	r1, r7
 800ccb0:	f7f3 fac0 	bl	8000234 <__adddf3>
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	460b      	mov	r3, r1
 800ccb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccbc:	4630      	mov	r0, r6
 800ccbe:	4639      	mov	r1, r7
 800ccc0:	f7f3 fab6 	bl	8000230 <__aeabi_dsub>
 800ccc4:	4642      	mov	r2, r8
 800ccc6:	464b      	mov	r3, r9
 800ccc8:	f7f3 fab4 	bl	8000234 <__adddf3>
 800cccc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ccd0:	e86a 0102 	strd	r0, r1, [sl], #-8
 800ccd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ccd8:	e9ca 2300 	strd	r2, r3, [sl]
 800ccdc:	e74c      	b.n	800cb78 <__kernel_rem_pio2+0x4e4>
 800ccde:	4638      	mov	r0, r7
 800cce0:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800cce4:	4631      	mov	r1, r6
 800cce6:	f7f3 faa5 	bl	8000234 <__adddf3>
 800ccea:	3c01      	subs	r4, #1
 800ccec:	4607      	mov	r7, r0
 800ccee:	460e      	mov	r6, r1
 800ccf0:	e748      	b.n	800cb84 <__kernel_rem_pio2+0x4f0>
 800ccf2:	9b06      	ldr	r3, [sp, #24]
 800ccf4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ccf8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800ccfc:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800cd00:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800cd04:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800cd08:	601d      	str	r5, [r3, #0]
 800cd0a:	615e      	str	r6, [r3, #20]
 800cd0c:	e721      	b.n	800cb52 <__kernel_rem_pio2+0x4be>
 800cd0e:	bf00      	nop
 800cd10:	41700000 	.word	0x41700000
 800cd14:	3e700000 	.word	0x3e700000

0800cd18 <__kernel_sin>:
 800cd18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd1c:	b086      	sub	sp, #24
 800cd1e:	e9cd 2300 	strd	r2, r3, [sp]
 800cd22:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cd26:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cd2a:	4682      	mov	sl, r0
 800cd2c:	460c      	mov	r4, r1
 800cd2e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800cd30:	da03      	bge.n	800cd3a <__kernel_sin+0x22>
 800cd32:	f7f3 fecf 	bl	8000ad4 <__aeabi_d2iz>
 800cd36:	2800      	cmp	r0, #0
 800cd38:	d050      	beq.n	800cddc <__kernel_sin+0xc4>
 800cd3a:	4652      	mov	r2, sl
 800cd3c:	4623      	mov	r3, r4
 800cd3e:	4650      	mov	r0, sl
 800cd40:	4621      	mov	r1, r4
 800cd42:	f7f3 fc2d 	bl	80005a0 <__aeabi_dmul>
 800cd46:	4606      	mov	r6, r0
 800cd48:	460f      	mov	r7, r1
 800cd4a:	4602      	mov	r2, r0
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	4650      	mov	r0, sl
 800cd50:	4621      	mov	r1, r4
 800cd52:	f7f3 fc25 	bl	80005a0 <__aeabi_dmul>
 800cd56:	a33e      	add	r3, pc, #248	; (adr r3, 800ce50 <__kernel_sin+0x138>)
 800cd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd5c:	4680      	mov	r8, r0
 800cd5e:	4689      	mov	r9, r1
 800cd60:	4630      	mov	r0, r6
 800cd62:	4639      	mov	r1, r7
 800cd64:	f7f3 fc1c 	bl	80005a0 <__aeabi_dmul>
 800cd68:	a33b      	add	r3, pc, #236	; (adr r3, 800ce58 <__kernel_sin+0x140>)
 800cd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6e:	f7f3 fa5f 	bl	8000230 <__aeabi_dsub>
 800cd72:	4632      	mov	r2, r6
 800cd74:	463b      	mov	r3, r7
 800cd76:	f7f3 fc13 	bl	80005a0 <__aeabi_dmul>
 800cd7a:	a339      	add	r3, pc, #228	; (adr r3, 800ce60 <__kernel_sin+0x148>)
 800cd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd80:	f7f3 fa58 	bl	8000234 <__adddf3>
 800cd84:	4632      	mov	r2, r6
 800cd86:	463b      	mov	r3, r7
 800cd88:	f7f3 fc0a 	bl	80005a0 <__aeabi_dmul>
 800cd8c:	a336      	add	r3, pc, #216	; (adr r3, 800ce68 <__kernel_sin+0x150>)
 800cd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd92:	f7f3 fa4d 	bl	8000230 <__aeabi_dsub>
 800cd96:	4632      	mov	r2, r6
 800cd98:	463b      	mov	r3, r7
 800cd9a:	f7f3 fc01 	bl	80005a0 <__aeabi_dmul>
 800cd9e:	a334      	add	r3, pc, #208	; (adr r3, 800ce70 <__kernel_sin+0x158>)
 800cda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda4:	f7f3 fa46 	bl	8000234 <__adddf3>
 800cda8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdac:	b9dd      	cbnz	r5, 800cde6 <__kernel_sin+0xce>
 800cdae:	4602      	mov	r2, r0
 800cdb0:	460b      	mov	r3, r1
 800cdb2:	4630      	mov	r0, r6
 800cdb4:	4639      	mov	r1, r7
 800cdb6:	f7f3 fbf3 	bl	80005a0 <__aeabi_dmul>
 800cdba:	a32f      	add	r3, pc, #188	; (adr r3, 800ce78 <__kernel_sin+0x160>)
 800cdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc0:	f7f3 fa36 	bl	8000230 <__aeabi_dsub>
 800cdc4:	4642      	mov	r2, r8
 800cdc6:	464b      	mov	r3, r9
 800cdc8:	f7f3 fbea 	bl	80005a0 <__aeabi_dmul>
 800cdcc:	4602      	mov	r2, r0
 800cdce:	460b      	mov	r3, r1
 800cdd0:	4650      	mov	r0, sl
 800cdd2:	4621      	mov	r1, r4
 800cdd4:	f7f3 fa2e 	bl	8000234 <__adddf3>
 800cdd8:	4682      	mov	sl, r0
 800cdda:	460c      	mov	r4, r1
 800cddc:	4650      	mov	r0, sl
 800cdde:	4621      	mov	r1, r4
 800cde0:	b006      	add	sp, #24
 800cde2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cde6:	2200      	movs	r2, #0
 800cde8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cdec:	4b24      	ldr	r3, [pc, #144]	; (800ce80 <__kernel_sin+0x168>)
 800cdee:	f7f3 fbd7 	bl	80005a0 <__aeabi_dmul>
 800cdf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdf6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cdfa:	4640      	mov	r0, r8
 800cdfc:	4649      	mov	r1, r9
 800cdfe:	f7f3 fbcf 	bl	80005a0 <__aeabi_dmul>
 800ce02:	4602      	mov	r2, r0
 800ce04:	460b      	mov	r3, r1
 800ce06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce0a:	f7f3 fa11 	bl	8000230 <__aeabi_dsub>
 800ce0e:	4632      	mov	r2, r6
 800ce10:	463b      	mov	r3, r7
 800ce12:	f7f3 fbc5 	bl	80005a0 <__aeabi_dmul>
 800ce16:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce1a:	f7f3 fa09 	bl	8000230 <__aeabi_dsub>
 800ce1e:	a316      	add	r3, pc, #88	; (adr r3, 800ce78 <__kernel_sin+0x160>)
 800ce20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce24:	4606      	mov	r6, r0
 800ce26:	460f      	mov	r7, r1
 800ce28:	4640      	mov	r0, r8
 800ce2a:	4649      	mov	r1, r9
 800ce2c:	f7f3 fbb8 	bl	80005a0 <__aeabi_dmul>
 800ce30:	4602      	mov	r2, r0
 800ce32:	460b      	mov	r3, r1
 800ce34:	4630      	mov	r0, r6
 800ce36:	4639      	mov	r1, r7
 800ce38:	f7f3 f9fc 	bl	8000234 <__adddf3>
 800ce3c:	4602      	mov	r2, r0
 800ce3e:	460b      	mov	r3, r1
 800ce40:	4650      	mov	r0, sl
 800ce42:	4621      	mov	r1, r4
 800ce44:	f7f3 f9f4 	bl	8000230 <__aeabi_dsub>
 800ce48:	e7c6      	b.n	800cdd8 <__kernel_sin+0xc0>
 800ce4a:	bf00      	nop
 800ce4c:	f3af 8000 	nop.w
 800ce50:	5acfd57c 	.word	0x5acfd57c
 800ce54:	3de5d93a 	.word	0x3de5d93a
 800ce58:	8a2b9ceb 	.word	0x8a2b9ceb
 800ce5c:	3e5ae5e6 	.word	0x3e5ae5e6
 800ce60:	57b1fe7d 	.word	0x57b1fe7d
 800ce64:	3ec71de3 	.word	0x3ec71de3
 800ce68:	19c161d5 	.word	0x19c161d5
 800ce6c:	3f2a01a0 	.word	0x3f2a01a0
 800ce70:	1110f8a6 	.word	0x1110f8a6
 800ce74:	3f811111 	.word	0x3f811111
 800ce78:	55555549 	.word	0x55555549
 800ce7c:	3fc55555 	.word	0x3fc55555
 800ce80:	3fe00000 	.word	0x3fe00000
 800ce84:	00000000 	.word	0x00000000

0800ce88 <floor>:
 800ce88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce8c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800ce90:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800ce94:	2e13      	cmp	r6, #19
 800ce96:	4602      	mov	r2, r0
 800ce98:	460b      	mov	r3, r1
 800ce9a:	4607      	mov	r7, r0
 800ce9c:	460c      	mov	r4, r1
 800ce9e:	4605      	mov	r5, r0
 800cea0:	dc33      	bgt.n	800cf0a <floor+0x82>
 800cea2:	2e00      	cmp	r6, #0
 800cea4:	da14      	bge.n	800ced0 <floor+0x48>
 800cea6:	a334      	add	r3, pc, #208	; (adr r3, 800cf78 <floor+0xf0>)
 800cea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceac:	f7f3 f9c2 	bl	8000234 <__adddf3>
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	f7f3 fe04 	bl	8000ac0 <__aeabi_dcmpgt>
 800ceb8:	b138      	cbz	r0, 800ceca <floor+0x42>
 800ceba:	2c00      	cmp	r4, #0
 800cebc:	da58      	bge.n	800cf70 <floor+0xe8>
 800cebe:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cec2:	431d      	orrs	r5, r3
 800cec4:	d001      	beq.n	800ceca <floor+0x42>
 800cec6:	2500      	movs	r5, #0
 800cec8:	4c2d      	ldr	r4, [pc, #180]	; (800cf80 <floor+0xf8>)
 800ceca:	4623      	mov	r3, r4
 800cecc:	462f      	mov	r7, r5
 800cece:	e025      	b.n	800cf1c <floor+0x94>
 800ced0:	4a2c      	ldr	r2, [pc, #176]	; (800cf84 <floor+0xfc>)
 800ced2:	fa42 f806 	asr.w	r8, r2, r6
 800ced6:	ea01 0208 	and.w	r2, r1, r8
 800ceda:	4302      	orrs	r2, r0
 800cedc:	d01e      	beq.n	800cf1c <floor+0x94>
 800cede:	a326      	add	r3, pc, #152	; (adr r3, 800cf78 <floor+0xf0>)
 800cee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee4:	f7f3 f9a6 	bl	8000234 <__adddf3>
 800cee8:	2200      	movs	r2, #0
 800ceea:	2300      	movs	r3, #0
 800ceec:	f7f3 fde8 	bl	8000ac0 <__aeabi_dcmpgt>
 800cef0:	2800      	cmp	r0, #0
 800cef2:	d0ea      	beq.n	800ceca <floor+0x42>
 800cef4:	2c00      	cmp	r4, #0
 800cef6:	bfbe      	ittt	lt
 800cef8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800cefc:	fa43 f606 	asrlt.w	r6, r3, r6
 800cf00:	19a4      	addlt	r4, r4, r6
 800cf02:	2500      	movs	r5, #0
 800cf04:	ea24 0408 	bic.w	r4, r4, r8
 800cf08:	e7df      	b.n	800ceca <floor+0x42>
 800cf0a:	2e33      	cmp	r6, #51	; 0x33
 800cf0c:	dd0a      	ble.n	800cf24 <floor+0x9c>
 800cf0e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cf12:	d103      	bne.n	800cf1c <floor+0x94>
 800cf14:	f7f3 f98e 	bl	8000234 <__adddf3>
 800cf18:	4607      	mov	r7, r0
 800cf1a:	460b      	mov	r3, r1
 800cf1c:	4638      	mov	r0, r7
 800cf1e:	4619      	mov	r1, r3
 800cf20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf24:	f04f 32ff 	mov.w	r2, #4294967295
 800cf28:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800cf2c:	fa22 f808 	lsr.w	r8, r2, r8
 800cf30:	ea18 0f00 	tst.w	r8, r0
 800cf34:	d0f2      	beq.n	800cf1c <floor+0x94>
 800cf36:	a310      	add	r3, pc, #64	; (adr r3, 800cf78 <floor+0xf0>)
 800cf38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf3c:	f7f3 f97a 	bl	8000234 <__adddf3>
 800cf40:	2200      	movs	r2, #0
 800cf42:	2300      	movs	r3, #0
 800cf44:	f7f3 fdbc 	bl	8000ac0 <__aeabi_dcmpgt>
 800cf48:	2800      	cmp	r0, #0
 800cf4a:	d0be      	beq.n	800ceca <floor+0x42>
 800cf4c:	2c00      	cmp	r4, #0
 800cf4e:	da02      	bge.n	800cf56 <floor+0xce>
 800cf50:	2e14      	cmp	r6, #20
 800cf52:	d103      	bne.n	800cf5c <floor+0xd4>
 800cf54:	3401      	adds	r4, #1
 800cf56:	ea25 0508 	bic.w	r5, r5, r8
 800cf5a:	e7b6      	b.n	800ceca <floor+0x42>
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cf62:	fa03 f606 	lsl.w	r6, r3, r6
 800cf66:	4435      	add	r5, r6
 800cf68:	42bd      	cmp	r5, r7
 800cf6a:	bf38      	it	cc
 800cf6c:	18e4      	addcc	r4, r4, r3
 800cf6e:	e7f2      	b.n	800cf56 <floor+0xce>
 800cf70:	2500      	movs	r5, #0
 800cf72:	462c      	mov	r4, r5
 800cf74:	e7a9      	b.n	800ceca <floor+0x42>
 800cf76:	bf00      	nop
 800cf78:	8800759c 	.word	0x8800759c
 800cf7c:	7e37e43c 	.word	0x7e37e43c
 800cf80:	bff00000 	.word	0xbff00000
 800cf84:	000fffff 	.word	0x000fffff

0800cf88 <scalbn>:
 800cf88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf8a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800cf8e:	4604      	mov	r4, r0
 800cf90:	460d      	mov	r5, r1
 800cf92:	4617      	mov	r7, r2
 800cf94:	460b      	mov	r3, r1
 800cf96:	b996      	cbnz	r6, 800cfbe <scalbn+0x36>
 800cf98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cf9c:	4303      	orrs	r3, r0
 800cf9e:	d039      	beq.n	800d014 <scalbn+0x8c>
 800cfa0:	4b33      	ldr	r3, [pc, #204]	; (800d070 <scalbn+0xe8>)
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f7f3 fafc 	bl	80005a0 <__aeabi_dmul>
 800cfa8:	4b32      	ldr	r3, [pc, #200]	; (800d074 <scalbn+0xec>)
 800cfaa:	4604      	mov	r4, r0
 800cfac:	429f      	cmp	r7, r3
 800cfae:	460d      	mov	r5, r1
 800cfb0:	da0f      	bge.n	800cfd2 <scalbn+0x4a>
 800cfb2:	a32b      	add	r3, pc, #172	; (adr r3, 800d060 <scalbn+0xd8>)
 800cfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb8:	f7f3 faf2 	bl	80005a0 <__aeabi_dmul>
 800cfbc:	e006      	b.n	800cfcc <scalbn+0x44>
 800cfbe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800cfc2:	4296      	cmp	r6, r2
 800cfc4:	d10a      	bne.n	800cfdc <scalbn+0x54>
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	f7f3 f934 	bl	8000234 <__adddf3>
 800cfcc:	4604      	mov	r4, r0
 800cfce:	460d      	mov	r5, r1
 800cfd0:	e020      	b.n	800d014 <scalbn+0x8c>
 800cfd2:	460b      	mov	r3, r1
 800cfd4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800cfd8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800cfdc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800cfe0:	19b9      	adds	r1, r7, r6
 800cfe2:	4291      	cmp	r1, r2
 800cfe4:	dd0e      	ble.n	800d004 <scalbn+0x7c>
 800cfe6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800cfea:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800cfee:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800cff2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800cff6:	4820      	ldr	r0, [pc, #128]	; (800d078 <scalbn+0xf0>)
 800cff8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800cffc:	a31a      	add	r3, pc, #104	; (adr r3, 800d068 <scalbn+0xe0>)
 800cffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d002:	e7d9      	b.n	800cfb8 <scalbn+0x30>
 800d004:	2900      	cmp	r1, #0
 800d006:	dd08      	ble.n	800d01a <scalbn+0x92>
 800d008:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d00c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d010:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800d014:	4620      	mov	r0, r4
 800d016:	4629      	mov	r1, r5
 800d018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d01a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800d01e:	da12      	bge.n	800d046 <scalbn+0xbe>
 800d020:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d024:	429f      	cmp	r7, r3
 800d026:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800d02a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800d02e:	dcdc      	bgt.n	800cfea <scalbn+0x62>
 800d030:	a30b      	add	r3, pc, #44	; (adr r3, 800d060 <scalbn+0xd8>)
 800d032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d036:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800d03a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800d03e:	480f      	ldr	r0, [pc, #60]	; (800d07c <scalbn+0xf4>)
 800d040:	f041 011f 	orr.w	r1, r1, #31
 800d044:	e7b8      	b.n	800cfb8 <scalbn+0x30>
 800d046:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d04a:	3136      	adds	r1, #54	; 0x36
 800d04c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d050:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800d054:	4620      	mov	r0, r4
 800d056:	4629      	mov	r1, r5
 800d058:	2200      	movs	r2, #0
 800d05a:	4b09      	ldr	r3, [pc, #36]	; (800d080 <scalbn+0xf8>)
 800d05c:	e7ac      	b.n	800cfb8 <scalbn+0x30>
 800d05e:	bf00      	nop
 800d060:	c2f8f359 	.word	0xc2f8f359
 800d064:	01a56e1f 	.word	0x01a56e1f
 800d068:	8800759c 	.word	0x8800759c
 800d06c:	7e37e43c 	.word	0x7e37e43c
 800d070:	43500000 	.word	0x43500000
 800d074:	ffff3cb0 	.word	0xffff3cb0
 800d078:	8800759c 	.word	0x8800759c
 800d07c:	c2f8f359 	.word	0xc2f8f359
 800d080:	3c900000 	.word	0x3c900000

0800d084 <_init>:
 800d084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d086:	bf00      	nop
 800d088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d08a:	bc08      	pop	{r3}
 800d08c:	469e      	mov	lr, r3
 800d08e:	4770      	bx	lr

0800d090 <_fini>:
 800d090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d092:	bf00      	nop
 800d094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d096:	bc08      	pop	{r3}
 800d098:	469e      	mov	lr, r3
 800d09a:	4770      	bx	lr
